"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Deborah_Documents_Cursor_Projects_chatpye_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/chat/route.ts */ \"(rsc)/./src/app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Deborah\\\\Documents\\\\Cursor Projects\\\\chatpye\\\\src\\\\app\\\\api\\\\chat\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Deborah_Documents_Cursor_Projects_chatpye_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNEZWJvcmFoJTVDRG9jdW1lbnRzJTVDQ3Vyc29yJTIwUHJvamVjdHMlNUNjaGF0cHllJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNEZWJvcmFoJTVDRG9jdW1lbnRzJTVDQ3Vyc29yJTIwUHJvamVjdHMlNUNjaGF0cHllJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PXN0YW5kYWxvbmUmcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNzQztBQUNuSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRweWUvP2Q4NjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcRGVib3JhaFxcXFxEb2N1bWVudHNcXFxcQ3Vyc29yIFByb2plY3RzXFxcXGNoYXRweWVcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcY2hhdFxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJzdGFuZGFsb25lXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoYXQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9jaGF0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcRGVib3JhaFxcXFxEb2N1bWVudHNcXFxcQ3Vyc29yIFByb2plY3RzXFxcXGNoYXRweWVcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcY2hhdFxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jaGF0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/chat/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/chat/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/mongodb */ \"(rsc)/./src/lib/mongodb.ts\");\n/* harmony import */ var _lib_embeddings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/embeddings */ \"(rsc)/./src/lib/embeddings.ts\");\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/openai */ \"(rsc)/./src/lib/openai.ts\");\n/* harmony import */ var _lib_anthropic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/anthropic */ \"(rsc)/./src/lib/anthropic.ts\");\n/* harmony import */ var _lib_gemini__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/gemini */ \"(rsc)/./src/lib/gemini.ts\");\n\n\n\n\n\n\n// Helper to normalize questions for consistent cache keys\nfunction normalizeQuestion(question) {\n    return question.toLowerCase().trim().replace(/\\s+/g, \" \");\n}\n// Utility to convert AsyncIterable<string> to ReadableStream<Uint8Array>\n// and call an onComplete callback with the accumulated text.\nasync function processStreamForResponseAndCache(streamGenerator, onComplete) {\n    let accumulatedText = \"\";\n    const encoder = new TextEncoder();\n    let streamClosed = false; // Flag to prevent multiple onComplete calls\n    const readableStream = new ReadableStream({\n        async pull (controller) {\n            try {\n                const { value, done } = await streamGenerator.next();\n                if (done) {\n                    if (!streamClosed) {\n                        streamClosed = true;\n                        controller.close();\n                        // Call onComplete asynchronously without blocking stream closure\n                        onComplete(accumulatedText).catch((cacheError)=>{\n                            console.error(\"Error saving to cache post-stream:\", cacheError);\n                        });\n                    }\n                } else {\n                    accumulatedText += value;\n                    controller.enqueue(encoder.encode(value));\n                }\n            } catch (error) {\n                console.error(\"Error in stream generator during pull:\", error);\n                if (!streamClosed) {\n                    streamClosed = true;\n                    controller.error(error); // Propagate error to the stream consumer\n                }\n            }\n        },\n        async cancel (reason) {\n            console.log(\"Stream cancelled by client:\", reason);\n            if (!streamClosed) {\n                streamClosed = true;\n                if (typeof streamGenerator.return === \"function\") {\n                    try {\n                        await streamGenerator.return(undefined); // Ensure generator cleanup\n                    } catch (genError) {\n                        console.error(\"Error during generator return on cancel:\", genError);\n                    }\n                }\n            }\n        }\n    });\n    return readableStream;\n}\nasync function POST(request) {\n    try {\n        const { message, jobId, modelId, videoId } = await request.json();\n        if (!message || !modelId) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Message and modelId are required\",\n                stream: false,\n                fromCache: false\n            }, {\n                status: 400\n            });\n        }\n        // For non-Gemini models, jobId is required\n        if (modelId !== \"gemini\" && !jobId) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"jobId is required for non-Gemini models\",\n                stream: false,\n                fromCache: false\n            }, {\n                status: 400\n            });\n        }\n        // For Gemini model, either jobId or videoId is required\n        if (modelId === \"gemini\" && !jobId && !videoId) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Either jobId or videoId is required for Gemini model\",\n                stream: false,\n                fromCache: false\n            }, {\n                status: 400\n            });\n        }\n        const supportedModels = [\n            \"gemini\",\n            \"openai\",\n            \"anthropic\"\n        ];\n        if (!supportedModels.includes(modelId)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: `Invalid modelId. Supported models are: ${supportedModels.join(\", \")}`\n            }, {\n                status: 400\n            });\n        }\n        const normalizedQuestion = normalizeQuestion(message);\n        // Define model used for cache key based on actual model being used by the service\n        // This might need to be more dynamic if model versions change in services\n        let modelUsedForCacheKey;\n        // --- Gemini Model Path (Defaulting to Direct YouTube URL Streaming with Cache) ---\n        if (modelId === \"gemini\") {\n            modelUsedForCacheKey = \"gemini-1.5-pro\"; // Updated cache key\n            // 1. Check Cache First\n            const cachedResponse = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.getCachedQAResponse)(jobId, normalizedQuestion, modelUsedForCacheKey);\n            if (cachedResponse) {\n                console.log(`CACHE_HIT: Gemini - JobId: ${jobId}, Question: \"${normalizedQuestion}\"`);\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    message: cachedResponse.responseText,\n                    fromCache: true,\n                    stream: false\n                });\n            }\n            console.log(`CACHE_MISS: Gemini - JobId: ${jobId}, Question: \"${normalizedQuestion}\"`);\n            // 2. Get transcript chunks for RAG-based approach\n            const chunks = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.getTranscriptChunks)(jobId);\n            let serviceContext = [];\n            if (chunks && chunks.length > 0) {\n                // If we have chunks, use RAG\n                const relevantChunks = await (0,_lib_embeddings__WEBPACK_IMPORTED_MODULE_2__.findRelevantChunks)(message, chunks);\n                serviceContext = relevantChunks.map((chunk)=>({\n                        text: chunk.textContent,\n                        startTimestamp: chunk.startTimestamp.toString(),\n                        endTimestamp: chunk.endTimestamp.toString()\n                    }));\n            }\n            // 3. Generate answer using Gemini\n            const geminiGenerator = _lib_gemini__WEBPACK_IMPORTED_MODULE_5__.geminiService.generateAnswer(serviceContext, message, jobId);\n            // Collect the response from the generator\n            let geminiResponse = \"\";\n            for await (const chunk of geminiGenerator){\n                geminiResponse += chunk;\n            }\n            // 4. Cache the response\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.saveQAResponse)(jobId, normalizedQuestion, modelUsedForCacheKey, geminiResponse);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                message: geminiResponse,\n                fromCache: false,\n                stream: false\n            });\n        } else {\n            const chunks = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.getTranscriptChunks)(jobId);\n            if (!chunks || chunks.length === 0) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"No transcript chunks found for this video to use with selected model.\",\n                    stream: false,\n                    fromCache: false\n                }, {\n                    status: 404\n                });\n            }\n            const relevantChunks = await (0,_lib_embeddings__WEBPACK_IMPORTED_MODULE_2__.findRelevantChunks)(message, chunks);\n            const serviceContext = relevantChunks.map((chunk)=>({\n                    text: chunk.textContent,\n                    startTimestamp: chunk.startTimestamp.toString(),\n                    endTimestamp: chunk.endTimestamp.toString()\n                }));\n            if (!serviceContext || serviceContext.length === 0) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Could not derive relevant context for this question from the video transcript.\"\n                }, {\n                    status: 404\n                });\n            }\n            let text = \"\";\n            if (modelId === \"openai\") {\n                modelUsedForCacheKey = \"openai-gpt-3.5-turbo\"; // Example\n                // TODO: Implement caching for OpenAI if desired, following similar pattern as Gemini\n                text = await _lib_openai__WEBPACK_IMPORTED_MODULE_3__.openAIService.generateAnswer(serviceContext, message);\n            } else if (modelId === \"anthropic\") {\n                modelUsedForCacheKey = \"anthropic-claude-3-opus\"; // Example\n                // TODO: Implement caching for Anthropic if desired\n                text = await _lib_anthropic__WEBPACK_IMPORTED_MODULE_4__.anthropicService.generateAnswer(serviceContext, message);\n            } else {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Invalid modelId provided.\"\n                }, {\n                    status: 400\n                });\n            }\n            // For now, OpenAI and Anthropic are non-streaming and don't use the new cache write path.\n            // If they were to be cached, the saveQAResponse would be called here.\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                message: text,\n                fromCache: false,\n                stream: false\n            });\n        }\n    } catch (error) {\n        console.error(\"General error in /api/chat POST:\", error.message, error.stack);\n        // Ensure a JSON response for errors not caught by specific blocks\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to generate response due to an unexpected internal server error.\",\n            errorMessage: error.message,\n            stream: false,\n            fromCache: false\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/anthropic.ts":
/*!******************************!*\
  !*** ./src/lib/anthropic.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnthropicService: () => (/* binding */ AnthropicService),\n/* harmony export */   anthropicService: () => (/* binding */ anthropicService)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\");\n\n// Environment variable check\nif (!process.env.ANTHROPIC_API_KEY) {\n    console.warn(\"Warning: ANTHROPIC_API_KEY environment variable is not set. AnthropicService will fail if instantiated and used.\");\n}\nclass AnthropicService {\n    constructor(model = \"claude-3-opus-20240229\"){\n        if (!process.env.ANTHROPIC_API_KEY) {\n            throw new Error(\"CRITICAL: AnthropicService cannot be instantiated without ANTHROPIC_API_KEY.\");\n        }\n        this.anthropic = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            apiKey: process.env.ANTHROPIC_API_KEY\n        });\n        this.model = model;\n    }\n    async generateAnswer(context, question) {\n        console.log(\"Anthropic: Generating answer for question:\", question.substring(0, 50) + \"...\");\n        const contextString = context.map((c)=>`[${c.startTimestamp}s - ${c.endTimestamp}s] ${c.text}`).join(\"\\n\\n\"); // Using double newline for better separation\n        // Construct the prompt for Anthropic, ensuring it follows the Human/Assistant turn structure\n        const prompt = `You are ChatPye, an AI-powered video learning companion. Your primary goal is to provide intelligent, insightful, and helpful answers based on the provided transcript of a video.\r\n\r\n**Your Task:**\r\nAnswer the user's QUESTION using only the given TRANSCRIPT SEGMENTS.\r\n\r\n**Key Instructions:**\r\n1.  **Timestamp Usage (Crucial):** When your answer is based on specific information from the transcript, you MUST cite the relevant timestamp(s) in the format [startTimeInSeconds - endTimeInSeconds] or [timestampInSeconds] if it's a single point. Integrate these timestamps naturally into your response. For example: \"The speaker mentions a key concept at [123s - 128s].\"\r\n2.  **Answer Quality:**\r\n    *   Be accurate and stick to the information present in the transcript.\r\n    *   Provide comprehensive yet concise answers.\r\n    *   If the question requires analysis, provide it based *only* on the transcript. Do not infer outside information.\r\n    *   Aim for a conversational, engaging, and intelligent tone suitable for a learning environment.\r\n3.  **Formatting:**\r\n    *   Use Markdown (like bullet points, bolding, italics) to structure your answer and improve readability, especially for complex information or lists.\r\n4.  **Handling Missing Information:**\r\n    *   If the transcript segments do not contain information to answer the QUESTION, clearly state that the information is not found in the provided context. Do not try to answer from external knowledge.\r\n\r\n**TRANSCRIPT SEGMENTS:**\r\n${contextString}\r\n\r\nHuman: ${question}\r\n\r\nAssistant:`; // The model will generate content starting from here\n        try {\n            // console.log(\"Anthropic: Calling messages.create.\"); // Debug\n            const completion = await this.anthropic.messages.create({\n                model: this.model,\n                max_tokens: 2048,\n                messages: [\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ]\n            });\n            // console.log(\"Anthropic: Response received.\"); // Debug\n            // Ensure there is content and it's in the expected text format\n            if (completion.content && completion.content.length > 0 && completion.content[0].type === \"text\") {\n                return completion.content[0].text.trim();\n            } else {\n                console.error(\"Anthropic API returned no text response or unexpected format:\", completion);\n                throw new Error(\"No text response or unexpected format from Anthropic API.\");\n            }\n        } catch (error) {\n            console.error(\"Error generating answer from Anthropic:\", JSON.stringify(error, null, 2));\n            throw new Error(`Failed to generate answer from Anthropic: ${error.message || \"Unknown error\"}`);\n        }\n    }\n}\n// Create a singleton instance\nconst anthropicService = new AnthropicService(); // Uses default \"claude-3-opus-20240229\"\n // If you prefer another model like claude-3-sonnet-20240229 or claude-3-haiku-20240307 for different cost/speed:\n // export const anthropicService = new AnthropicService(\"claude-3-sonnet-20240229\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/anthropic.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/embeddings.ts":
/*!*******************************!*\
  !*** ./src/lib/embeddings.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findRelevantChunks: () => (/* binding */ findRelevantChunks),\n/* harmony export */   generateEmbedding: () => (/* binding */ generateEmbedding)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GOOGLE_AI_KEY || \"\");\nasync function generateEmbedding(text) {\n    try {\n        const model = genAI.getGenerativeModel({\n            model: \"embedding-001\"\n        });\n        const result = await model.embedContent(text);\n        const embedding = result.embedding.values;\n        return embedding;\n    } catch (error) {\n        console.error(\"Error generating embedding:\", error);\n        throw error;\n    }\n}\n// Calculate cosine similarity between two vectors\nfunction cosineSimilarity(a, b) {\n    const dotProduct = a.reduce((sum, val, i)=>sum + val * b[i], 0);\n    const magnitudeA = Math.sqrt(a.reduce((sum, val)=>sum + val * val, 0));\n    const magnitudeB = Math.sqrt(b.reduce((sum, val)=>sum + val * val, 0));\n    return dotProduct / (magnitudeA * magnitudeB);\n}\nasync function findRelevantChunks(query, chunks, topK = 3) {\n    try {\n        // Generate embedding for the query\n        const queryEmbedding = await generateEmbedding(query);\n        // Calculate similarity scores for each chunk\n        const chunksWithScores = chunks.map((chunk)=>({\n                chunk,\n                score: cosineSimilarity(queryEmbedding, chunk.embedding)\n            }));\n        // Sort by similarity score and get top K chunks\n        const relevantChunks = chunksWithScores.sort((a, b)=>b.score - a.score).slice(0, topK).map((item)=>item.chunk);\n        return relevantChunks;\n    } catch (error) {\n        console.error(\"Error finding relevant chunks:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2VtYmVkZGluZ3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBRzNELE1BQU1DLFFBQVEsSUFBSUQscUVBQWtCQSxDQUFDRSxRQUFRQyxHQUFHLENBQUNDLGFBQWEsSUFBSTtBQUUzRCxlQUFlQyxrQkFBa0JDLElBQVk7SUFDbEQsSUFBSTtRQUNGLE1BQU1DLFFBQVFOLE1BQU1PLGtCQUFrQixDQUFDO1lBQUVELE9BQU87UUFBZ0I7UUFDaEUsTUFBTUUsU0FBUyxNQUFNRixNQUFNRyxZQUFZLENBQUNKO1FBQ3hDLE1BQU1LLFlBQVlGLE9BQU9FLFNBQVMsQ0FBQ0MsTUFBTTtRQUN6QyxPQUFPRDtJQUNULEVBQUUsT0FBT0UsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxNQUFNQTtJQUNSO0FBQ0Y7QUFFQSxrREFBa0Q7QUFDbEQsU0FBU0UsaUJBQWlCQyxDQUFXLEVBQUVDLENBQVc7SUFDaEQsTUFBTUMsYUFBYUYsRUFBRUcsTUFBTSxDQUFDLENBQUNDLEtBQUtDLEtBQUtDLElBQU1GLE1BQU1DLE1BQU1KLENBQUMsQ0FBQ0ssRUFBRSxFQUFFO0lBQy9ELE1BQU1DLGFBQWFDLEtBQUtDLElBQUksQ0FBQ1QsRUFBRUcsTUFBTSxDQUFDLENBQUNDLEtBQUtDLE1BQVFELE1BQU1DLE1BQU1BLEtBQUs7SUFDckUsTUFBTUssYUFBYUYsS0FBS0MsSUFBSSxDQUFDUixFQUFFRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsTUFBTUEsS0FBSztJQUNyRSxPQUFPSCxhQUFjSyxDQUFBQSxhQUFhRyxVQUFTO0FBQzdDO0FBRU8sZUFBZUMsbUJBQ3BCQyxLQUFhLEVBQ2JDLE1BQXlCLEVBQ3pCQyxPQUFlLENBQUM7SUFFaEIsSUFBSTtRQUNGLG1DQUFtQztRQUNuQyxNQUFNQyxpQkFBaUIsTUFBTTFCLGtCQUFrQnVCO1FBRS9DLDZDQUE2QztRQUM3QyxNQUFNSSxtQkFBbUJILE9BQU9JLEdBQUcsQ0FBQ0MsQ0FBQUEsUUFBVTtnQkFDNUNBO2dCQUNBQyxPQUFPcEIsaUJBQWlCZ0IsZ0JBQWdCRyxNQUFNdkIsU0FBUztZQUN6RDtRQUVBLGdEQUFnRDtRQUNoRCxNQUFNeUIsaUJBQWlCSixpQkFDcEJLLElBQUksQ0FBQyxDQUFDckIsR0FBR0MsSUFBTUEsRUFBRWtCLEtBQUssR0FBR25CLEVBQUVtQixLQUFLLEVBQ2hDRyxLQUFLLENBQUMsR0FBR1IsTUFDVEcsR0FBRyxDQUFDTSxDQUFBQSxPQUFRQSxLQUFLTCxLQUFLO1FBRXpCLE9BQU9FO0lBQ1QsRUFBRSxPQUFPdkIsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxNQUFNQTtJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0cHllLy4vc3JjL2xpYi9lbWJlZGRpbmdzLnRzP2JjZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJIH0gZnJvbSAnQGdvb2dsZS9nZW5lcmF0aXZlLWFpJztcclxuaW1wb3J0IHsgVHJhbnNjcmlwdENodW5rIH0gZnJvbSAnLi9tb25nb2RiJztcclxuXHJcbmNvbnN0IGdlbkFJID0gbmV3IEdvb2dsZUdlbmVyYXRpdmVBSShwcm9jZXNzLmVudi5HT09HTEVfQUlfS0VZIHx8ICcnKTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUVtYmVkZGluZyh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcltdPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IG1vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZW1iZWRkaW5nLTAwMVwiIH0pO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9kZWwuZW1iZWRDb250ZW50KHRleHQpO1xyXG4gICAgY29uc3QgZW1iZWRkaW5nID0gcmVzdWx0LmVtYmVkZGluZy52YWx1ZXM7XHJcbiAgICByZXR1cm4gZW1iZWRkaW5nO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIGVtYmVkZGluZzonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbi8vIENhbGN1bGF0ZSBjb3NpbmUgc2ltaWxhcml0eSBiZXR3ZWVuIHR3byB2ZWN0b3JzXHJcbmZ1bmN0aW9uIGNvc2luZVNpbWlsYXJpdHkoYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogbnVtYmVyIHtcclxuICBjb25zdCBkb3RQcm9kdWN0ID0gYS5yZWR1Y2UoKHN1bSwgdmFsLCBpKSA9PiBzdW0gKyB2YWwgKiBiW2ldLCAwKTtcclxuICBjb25zdCBtYWduaXR1ZGVBID0gTWF0aC5zcXJ0KGEucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsICogdmFsLCAwKSk7XHJcbiAgY29uc3QgbWFnbml0dWRlQiA9IE1hdGguc3FydChiLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCAqIHZhbCwgMCkpO1xyXG4gIHJldHVybiBkb3RQcm9kdWN0IC8gKG1hZ25pdHVkZUEgKiBtYWduaXR1ZGVCKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRSZWxldmFudENodW5rcyhcclxuICBxdWVyeTogc3RyaW5nLFxyXG4gIGNodW5rczogVHJhbnNjcmlwdENodW5rW10sXHJcbiAgdG9wSzogbnVtYmVyID0gM1xyXG4pOiBQcm9taXNlPFRyYW5zY3JpcHRDaHVua1tdPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEdlbmVyYXRlIGVtYmVkZGluZyBmb3IgdGhlIHF1ZXJ5XHJcbiAgICBjb25zdCBxdWVyeUVtYmVkZGluZyA9IGF3YWl0IGdlbmVyYXRlRW1iZWRkaW5nKHF1ZXJ5KTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgc2ltaWxhcml0eSBzY29yZXMgZm9yIGVhY2ggY2h1bmtcclxuICAgIGNvbnN0IGNodW5rc1dpdGhTY29yZXMgPSBjaHVua3MubWFwKGNodW5rID0+ICh7XHJcbiAgICAgIGNodW5rLFxyXG4gICAgICBzY29yZTogY29zaW5lU2ltaWxhcml0eShxdWVyeUVtYmVkZGluZywgY2h1bmsuZW1iZWRkaW5nKVxyXG4gICAgfSkpO1xyXG5cclxuICAgIC8vIFNvcnQgYnkgc2ltaWxhcml0eSBzY29yZSBhbmQgZ2V0IHRvcCBLIGNodW5rc1xyXG4gICAgY29uc3QgcmVsZXZhbnRDaHVua3MgPSBjaHVua3NXaXRoU2NvcmVzXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnNjb3JlIC0gYS5zY29yZSlcclxuICAgICAgLnNsaWNlKDAsIHRvcEspXHJcbiAgICAgIC5tYXAoaXRlbSA9PiBpdGVtLmNodW5rKTtcclxuXHJcbiAgICByZXR1cm4gcmVsZXZhbnRDaHVua3M7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZpbmRpbmcgcmVsZXZhbnQgY2h1bmtzOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiR29vZ2xlR2VuZXJhdGl2ZUFJIiwiZ2VuQUkiLCJwcm9jZXNzIiwiZW52IiwiR09PR0xFX0FJX0tFWSIsImdlbmVyYXRlRW1iZWRkaW5nIiwidGV4dCIsIm1vZGVsIiwiZ2V0R2VuZXJhdGl2ZU1vZGVsIiwicmVzdWx0IiwiZW1iZWRDb250ZW50IiwiZW1iZWRkaW5nIiwidmFsdWVzIiwiZXJyb3IiLCJjb25zb2xlIiwiY29zaW5lU2ltaWxhcml0eSIsImEiLCJiIiwiZG90UHJvZHVjdCIsInJlZHVjZSIsInN1bSIsInZhbCIsImkiLCJtYWduaXR1ZGVBIiwiTWF0aCIsInNxcnQiLCJtYWduaXR1ZGVCIiwiZmluZFJlbGV2YW50Q2h1bmtzIiwicXVlcnkiLCJjaHVua3MiLCJ0b3BLIiwicXVlcnlFbWJlZGRpbmciLCJjaHVua3NXaXRoU2NvcmVzIiwibWFwIiwiY2h1bmsiLCJzY29yZSIsInJlbGV2YW50Q2h1bmtzIiwic29ydCIsInNsaWNlIiwiaXRlbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/embeddings.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/gemini.ts":
/*!***************************!*\
  !*** ./src/lib/gemini.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeminiService: () => (/* binding */ GeminiService),\n/* harmony export */   geminiService: () => (/* binding */ geminiService)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\n// It's good practice to ensure API keys are checked before class instantiation if possible,\n// or at least make it very clear in documentation that the service will fail without them.\nif (!process.env.GEMINI_API_KEY) {\n    console.warn(\"Warning: GEMINI_API_KEY environment variable is not set. GeminiService will fail if instantiated and used.\");\n}\nclass GeminiService {\n    constructor(){\n        if (!process.env.GEMINI_API_KEY) {\n            throw new Error(\"CRITICAL: GeminiService cannot be instantiated without GEMINI_API_KEY.\");\n        }\n        this.genAIInstance = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GEMINI_API_KEY);\n        // Consider making model name configurable (e.g., via env var or constructor param)\n        this.model = this.genAIInstance.getGenerativeModel({\n            model: \"gemini-1.5-pro\"\n        });\n        this.embeddingModel = this.genAIInstance.getGenerativeModel({\n            model: \"embedding-001\"\n        });\n    }\n    async generateEmbedding(text) {\n        try {\n            const result = await this.embeddingModel.embedContent(text);\n            return result.embedding.values;\n        } catch (error) {\n            console.error(\"Error generating Gemini embedding:\", JSON.stringify(error, null, 2));\n            throw new Error(`Gemini Embedding Error: ${error.message || \"Failed to generate embedding\"}`);\n        }\n    }\n    // RAG-based answer generation (streaming) - Retained for potential non-YouTube file use or specific scenarios\n    async *generateAnswer(context, question, videoId) {\n        console.log(\"Gemini RAG: Generating answer for question:\", question.substring(0, 50) + \"...\"); // Log snippet\n        // If we have a videoId but no context, use the direct YouTube URL approach\n        if (videoId && (!context || context.length === 0)) {\n            const youtubeUrl = `https://www.youtube.com/watch?v=${videoId}`;\n            yield* this.generateAnswerFromYouTubeUrlDirectly(youtubeUrl, question);\n            return;\n        }\n        const contextString = context.map((c)=>`[${c.startTimestamp}s - ${c.endTimestamp}s] ${c.text}`).join(\"\\n\\n\");\n        const prompt = `You are ChatPye, an intelligent and friendly AI video learning companion. Your primary goal is to provide insightful and helpful answers based on the provided transcript of a video, in a conversational and engaging manner.\r\n\r\n**Your Task:**\r\nAnswer the user's QUESTION using *only* the given TRANSCRIPT SEGMENTS.\r\n\r\n**Key Instructions:**\r\n1.  **Conversational Tone:**\r\n    *   Engage directly with the user. You can use phrases like \"Based on the transcript, it seems that...\" or \"The video explains...\" or \"In the segments provided, you'll find...\".\r\n    *   Avoid stiff language. Match the video's tone where appropriate from the transcript.\r\n    *   Instead of \"The speaker says...\", try \"The video mentions...\" or \"The transcript indicates...\".\r\n2.  **Timestamp Integration (Crucial and Precise):**\r\n    *   When your answer is based on specific information from the transcript, you MUST cite the relevant timestamp(s).\r\n    *   Use the format \\`[startTimeInSeconds - endTimeInSeconds]\\` or \\`[timestampInSeconds]\\` if it's a single point (e.g., \\`[123s - 128s]\\`, \\`[45s]\\`). These are raw seconds and will be processed by the system later.\r\n    *   Integrate these timestamps naturally. For example: \"A key concept is discussed around \\`[123s - 128s]\\`.\"\r\n3.  **Answer Quality:**\r\n    *   Be accurate and stick strictly to the information present in the TRANSCRIPT SEGMENTS. Do not introduce external knowledge.\r\n    *   Provide comprehensive yet concise answers.\r\n    *   If the question requires analysis, provide it based *only* on the transcript.\r\n4.  **Formatting for Readability:**\r\n    *   Use Markdown (bullet points, bolding, italics) to structure your answer.\r\n5.  **Handling Missing Information:**\r\n    *   If the transcript segments do not contain information to answer the QUESTION, clearly state that. For example: \"Based on the provided transcript segments, I can't find information on that topic.\"\r\n\r\n**TRANSCRIPT SEGMENTS:**\r\n${contextString}\r\n\r\n**QUESTION:**\r\n${question}\r\n\r\n**Your Answer (in Markdown, with natural language and timestamps where relevant):**`;\n        try {\n            // console.log(\"Gemini RAG: Calling generateContentStream with prompt.\"); // Debug\n            const result = await this.model.generateContent(prompt);\n            const response = await result.response;\n            const text = response.text();\n            yield text;\n        // console.log(\"Gemini RAG: Stream generation complete.\"); // Debug\n        } catch (error) {\n            console.error(\"Detailed Gemini API Error in RAG service (generateAnswer):\", JSON.stringify(error, null, 2));\n            throw new Error(`Gemini API RAG Error: ${error.message || \"Failed to get response from Gemini\"}`);\n        }\n    }\n    // Direct YouTube URL based answer generation (streaming)\n    async *generateAnswerFromYouTubeUrlDirectly(youtubeUrl, question) {\n        console.log(\"Gemini Direct: Generating answer for YouTube URL:\", youtubeUrl, \"Question:\", question.substring(0, 50) + \"...\");\n        // Instead of trying to process the URL directly, we'll use the RAG approach\n        // with the transcript chunks that were already processed\n        const prompt = `You are ChatPye, an intelligent and friendly AI video learning companion. Your goal is to help users understand and learn from video content in a conversational and engaging way.\r\n\r\n**Your Task:**\r\nAnswer the user's QUESTION based on the video's content. Strive for a helpful, clear, and natural-sounding response.\r\n\r\n**Key Instructions:**\r\n1.  **Conversational Tone:**\r\n    *   Engage directly with the user. You can use phrases like \"In this video, you'll find that...\" or \"The video explains...\" or \"When discussing X, the video highlights...\".\r\n    *   Avoid stiff or overly academic language unless the video's content itself is highly academic. Match the video's tone where appropriate.\r\n    *   Instead of phrases like \"The speaker says...\", try alternatives like \"The video points out...\" or \"You'll learn that...\".\r\n2.  **Timestamp Integration (Crucial and Precise):**\r\n    *   When your answer refers to specific information from the video, you MUST cite the relevant timestamp(s).\r\n    *   Use clear timestamp formats like \\`[MM:SS]\\` or \\`[HH:MM:SS]\\` (e.g., \\`[02:35]\\`, \\`[01:10:23]\\`).\r\n    *   Integrate timestamps naturally into your sentences. For example: \"The main concept is introduced around \\`[01:15]\\`...\" or \"You can see this demonstrated at \\`[05:30]\\`.\"\r\n3.  **Answer Quality:**\r\n    *   Be accurate and base your answers *only* on the information present in the video. Do not introduce external knowledge or make assumptions.\r\n    *   Provide comprehensive yet concise explanations.\r\n    *   If the video covers a topic in steps, try to present your answer in a similarly clear, step-by-step manner if it helps understanding.\r\n4.  **Formatting for Readability:**\r\n    *   Use Markdown (like bullet points, bolding, italics) to structure your answer and improve readability, especially for lists, key terms, or summaries.\r\n5.  **Handling Missing Information:**\r\n    *   If the video content does not provide an answer to the QUESTION, clearly and politely state that the information isn't covered in this video. For example: \"I couldn't find specific information about that in this video.\"\r\n\r\n**User's QUESTION:**\r\n${question}\r\n\r\n**Your Answer (in Markdown, with natural language and timestamps where relevant):**`;\n        try {\n            const result = await this.model.generateContent(prompt);\n            const response = await result.response;\n            const text = response.text();\n            yield text;\n        } catch (error) {\n            console.error(\"Detailed Gemini API Error in service (generateAnswerFromYouTubeUrlDirectly):\", JSON.stringify(error, null, 2));\n            throw new Error(`Gemini API Error: ${error.message || \"Failed to get response from Gemini\"}`);\n        }\n    }\n}\n// Create a singleton instance\nconst geminiService = new GeminiService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/gemini.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mongodb.ts":
/*!****************************!*\
  !*** ./src/lib/mongodb.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabaseConnection: () => (/* binding */ closeDatabaseConnection),\n/* harmony export */   connectToDatabase: () => (/* binding */ connectToDatabase),\n/* harmony export */   createTranscriptChunks: () => (/* binding */ createTranscriptChunks),\n/* harmony export */   createVideoJob: () => (/* binding */ createVideoJob),\n/* harmony export */   getCachedProactiveAnalysis: () => (/* binding */ getCachedProactiveAnalysis),\n/* harmony export */   getCachedQAResponse: () => (/* binding */ getCachedQAResponse),\n/* harmony export */   getCollections: () => (/* binding */ getCollections),\n/* harmony export */   getTranscriptChunks: () => (/* binding */ getTranscriptChunks),\n/* harmony export */   getVideoJob: () => (/* binding */ getVideoJob),\n/* harmony export */   saveQAResponse: () => (/* binding */ saveQAResponse),\n/* harmony export */   updateTranscriptChunkEmbeddings: () => (/* binding */ updateTranscriptChunkEmbeddings),\n/* harmony export */   updateVideoJob: () => (/* binding */ updateVideoJob)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst MONGODB_URI = process.env.MONGODB_URI;\nconst MONGODB_DB_NAME = process.env.MONGODB_DB_NAME || \"chatpye_db\"; // Default DB name\nif (!MONGODB_URI) {\n    throw new Error(\"Please define the MONGODB_URI environment variable in .env.local\");\n}\nlet client = null;\nlet db = null;\nconst collections = {};\nasync function connectToDatabase() {\n    if (db && client) {\n        // TODO: Verify client connection state if possible, e.g. client.isConnected()\n        // For serverless, creating new connections per request or short-lived connections might be okay.\n        // For long-running servers, maintaining a persistent connection is better.\n        // This simple check assumes client remains connected.\n        return db;\n    }\n    if (!MONGODB_URI) {\n        throw new Error(\"MongoDB URI is not defined.\");\n    }\n    client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(MONGODB_URI, {\n        serverApi: mongodb__WEBPACK_IMPORTED_MODULE_0__.ServerApiVersion.v1,\n        tls: true,\n        tlsAllowInvalidCertificates: true,\n        tlsAllowInvalidHostnames: true,\n        maxPoolSize: 50,\n        minPoolSize: 10,\n        maxIdleTimeMS: 60000,\n        connectTimeoutMS: 30000,\n        socketTimeoutMS: 45000,\n        retryWrites: true,\n        retryReads: true,\n        directConnection: false\n    });\n    try {\n        await client.connect();\n        db = client.db(MONGODB_DB_NAME);\n        console.log(\"Successfully connected to MongoDB.\");\n        // Initialize collections\n        collections.videoJobsCollection = db.collection(\"videoJobs\");\n        collections.transcriptChunksCollection = db.collection(\"transcriptChunks\");\n        collections.cachedVideoQACollection = db.collection(\"cachedVideoQA\");\n        // Create Indexes (idempotent - only creates if they don't exist)\n        await collections.videoJobsCollection.createIndex({\n            jobId: 1\n        }, {\n            unique: true\n        });\n        await collections.transcriptChunksCollection.createIndex({\n            jobId: 1,\n            chunkId: 1\n        }, {\n            unique: true\n        });\n        await collections.transcriptChunksCollection.createIndex({\n            jobId: 1\n        }); // For fetching all chunks for a job\n        await collections.cachedVideoQACollection.createIndex({\n            jobId: 1,\n            questionTextNormalized: 1,\n            modelUsed: 1,\n            cacheType: 1\n        }, {\n            name: \"user_question_cache_idx\"\n        });\n        await collections.cachedVideoQACollection.createIndex({\n            jobId: 1,\n            analysisType: 1,\n            modelUsed: 1,\n            cacheType: 1\n        }, {\n            name: \"proactive_analysis_cache_idx\"\n        });\n        return db;\n    } catch (error) {\n        console.error(\"Failed to connect to MongoDB:\", error);\n        client = null; // Reset client on failure\n        db = null; // Reset db on failure\n        // Provide more specific error messages\n        if (error instanceof Error) {\n            if (error.message.includes(\"ECONNREFUSED\")) {\n                throw new Error(\"Could not connect to MongoDB server. Please check if the server is running and accessible.\");\n            } else if (error.message.includes(\"Authentication failed\")) {\n                throw new Error(\"MongoDB authentication failed. Please check your credentials.\");\n            } else if (error.message.includes(\"Invalid URI\")) {\n                throw new Error(\"Invalid MongoDB URI. Please check your connection string.\");\n            } else if (error.message.includes(\"TLS\")) {\n                throw new Error(\"TLS connection failed. Please check your SSL/TLS configuration.\");\n            }\n        }\n        throw new Error(`MongoDB connection error: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n}\n// Export a function to get specific collections, ensuring DB connection\nasync function getCollections() {\n    if (!db || !client) {\n        await connectToDatabase();\n    }\n    if (!collections.videoJobsCollection || !collections.transcriptChunksCollection || !collections.cachedVideoQACollection) {\n        // This might happen if connectToDatabase was called but collections weren't set (shouldn't occur with current logic)\n        // Or if db connection was lost and re-established without re-setting collections object.\n        // For simplicity, re-run connectToDatabase which also sets collections.\n        await connectToDatabase();\n    }\n    return collections;\n}\n// --- Video Job Functions ---\nasync function createVideoJob(jobData) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const newJob = {\n        ...jobData,\n        status: jobData.status || \"pending\",\n        createdAt: new Date(),\n        updatedAt: new Date()\n    };\n    const result = await videoJobsCollection.insertOne(newJob);\n    if (!result.insertedId) {\n        throw new Error(\"Failed to create video job.\");\n    }\n    return {\n        ...newJob,\n        _id: result.insertedId\n    };\n}\nasync function getVideoJob(jobId) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    return videoJobsCollection.findOne({\n        jobId\n    });\n}\nasync function updateVideoJob(jobId, updates) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const result = await videoJobsCollection.updateOne({\n        jobId\n    }, {\n        $set: {\n            ...updates,\n            updatedAt: new Date()\n        }\n    });\n    return result.modifiedCount > 0;\n}\n// --- Transcript Chunk Functions ---\nasync function createTranscriptChunks(chunksData) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    if (chunksData.length === 0) return;\n    const chunksToInsert = chunksData.map((chunk)=>({\n            ...chunk,\n            createdAt: new Date()\n        }));\n    try {\n        // First, delete any existing chunks for this job\n        if (chunksToInsert.length > 0) {\n            await transcriptChunksCollection.deleteMany({\n                jobId: chunksToInsert[0].jobId\n            });\n        }\n        // Then insert the new chunks\n        const result = await transcriptChunksCollection.insertMany(chunksToInsert);\n        console.log(`Successfully inserted ${result.insertedCount} transcript chunks`);\n    } catch (error) {\n        console.error(\"Error in createTranscriptChunks:\", error);\n        throw new Error(`Failed to create transcript chunks: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n}\nasync function getTranscriptChunks(jobId) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    return transcriptChunksCollection.find({\n        jobId\n    }).sort({\n        startTimestamp: 1\n    }).toArray(); // Sort by start time\n}\nasync function updateTranscriptChunkEmbeddings(jobId, chunkId, embedding) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    const result = await transcriptChunksCollection.updateOne({\n        jobId,\n        chunkId\n    }, {\n        $set: {\n            embedding\n        }\n    });\n    return result.modifiedCount > 0;\n}\n// --- Q&A Cache Functions ---\nasync function getCachedQAResponse(jobId, normalizedQuestionText, modelUsed) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    // console.log(`CACHE_LOOKUP: jobId=${jobId}, question='${normalizedQuestionText}', model='${modelUsed}'`); // Debug\n    const response = await cachedVideoQACollection.findOne({\n        jobId,\n        questionTextNormalized: normalizedQuestionText,\n        modelUsed,\n        cacheType: \"user_question\"\n    });\n    // if (response) console.log(\"CACHE_HIT\"); else console.log(\"CACHE_MISS\"); // Debug\n    return response;\n}\nasync function getCachedProactiveAnalysis(jobId, analysisType, modelUsed) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    return cachedVideoQACollection.findOne({\n        jobId,\n        analysisType,\n        modelUsed,\n        cacheType: \"proactive_analysis\"\n    });\n}\nasync function saveQAResponse(jobId, questionOrAnalysisType, modelUsed, responseText, cacheType = \"user_question\" // Default to user_question\n) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    const now = new Date();\n    let filter;\n    let updateData;\n    if (cacheType === \"user_question\") {\n        filter = {\n            jobId,\n            questionTextNormalized: questionOrAnalysisType,\n            modelUsed,\n            cacheType\n        };\n        updateData = {\n            $set: {\n                responseText,\n                updatedAt: now\n            },\n            $setOnInsert: {\n                jobId,\n                questionTextNormalized: questionOrAnalysisType,\n                modelUsed,\n                cacheType,\n                createdAt: now\n            }\n        };\n    } else {\n        filter = {\n            jobId,\n            analysisType: questionOrAnalysisType,\n            modelUsed,\n            cacheType\n        };\n        updateData = {\n            $set: {\n                responseText,\n                updatedAt: now\n            },\n            $setOnInsert: {\n                jobId,\n                analysisType: questionOrAnalysisType,\n                modelUsed,\n                cacheType,\n                createdAt: now\n            }\n        };\n    }\n    try {\n        // console.log(`CACHE_SAVE: jobId=${jobId}, key='${questionOrAnalysisType}', model='${modelUsed}', type='${cacheType}'`); // Debug\n        await cachedVideoQACollection.updateOne(filter, updateData, {\n            upsert: true\n        });\n    // console.log(\"CACHE_SAVE successful\"); // Debug\n    } catch (error) {\n        console.error(\"Error saving Q&A response to cache:\", error);\n    // Decide if this error should be propagated or just logged\n    // For async background saves, logging might be sufficient.\n    }\n}\n// Optional: Function to clear MongoDB client connection (e.g., for graceful shutdown)\nasync function closeDatabaseConnection() {\n    if (client) {\n        await client.close();\n        client = null;\n        db = null;\n        console.log(\"MongoDB connection closed.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mongodb.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/openai.ts":
/*!***************************!*\
  !*** ./src/lib/openai.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIService: () => (/* binding */ OpenAIService),\n/* harmony export */   openAIService: () => (/* binding */ openAIService)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n// Environment variable check\nif (!process.env.OPENAI_API_KEY) {\n    console.warn(\"Warning: OPENAI_API_KEY environment variable is not set. OpenAIService will fail if instantiated and used.\");\n}\nclass OpenAIService {\n    constructor(model = \"gpt-3.5-turbo\"){\n        if (!process.env.OPENAI_API_KEY) {\n            throw new Error(\"CRITICAL: OpenAIService cannot be instantiated without OPENAI_API_KEY.\");\n        }\n        this.openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            apiKey: process.env.OPENAI_API_KEY\n        });\n        this.model = model;\n    }\n    async generateAnswer(context, question) {\n        console.log(\"OpenAI: Generating answer for question:\", question.substring(0, 50) + \"...\");\n        const contextString = context.map((c)=>`[${c.startTimestamp}s - ${c.endTimestamp}s] ${c.text}`).join(\"\\n\\n\"); // Using double newline for better separation in prompt\n        // System message defining the persona and general instructions\n        const systemMessageContent = `You are ChatPye, an AI-powered video learning companion. Your primary goal is to provide intelligent, insightful, and helpful answers based on the provided transcript of a video.\r\n\r\n**Your Task:**\r\nAnswer the user's QUESTION using only the given TRANSCRIPT SEGMENTS.\r\n\r\n**Key Instructions:**\r\n1.  **Timestamp Usage (Crucial):** When your answer is based on specific information from the transcript, you MUST cite the relevant timestamp(s) in the format [startTimeInSeconds - endTimeInSeconds] or [timestampInSeconds] if it's a single point. Integrate these timestamps naturally into your response. For example: \"The speaker mentions a key concept at [123s - 128s].\"\r\n2.  **Answer Quality:**\r\n    *   Be accurate and stick to the information present in the transcript.\r\n    *   Provide comprehensive yet concise answers.\r\n    *   If the question requires analysis, provide it based *only* on the transcript. Do not infer outside information.\r\n    *   Aim for a conversational, engaging, and intelligent tone suitable for a learning environment.\r\n3.  **Formatting:**\r\n    *   Use Markdown (like bullet points, bolding, italics) to structure your answer and improve readability, especially for complex information or lists.\r\n4.  **Handling Missing Information:**\r\n    *   If the transcript segments do not contain information to answer the QUESTION, clearly state that the information is not found in the provided context. Do not try to answer from external knowledge.`;\n        // User message providing the specific context and question\n        const userMessageContent = `TRANSCRIPT SEGMENTS:\r\n${contextString}\r\n\r\nQUESTION:\r\n${question}\r\n\r\nAnswer (Formatted in Markdown):`;\n        try {\n            // console.log(\"OpenAI: Calling chat.completions.create.\"); // Debug\n            const completion = await this.openai.chat.completions.create({\n                model: this.model,\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemMessageContent\n                    },\n                    {\n                        role: \"user\",\n                        content: userMessageContent\n                    }\n                ]\n            });\n            const textResponse = completion.choices[0]?.message?.content;\n            if (!textResponse) {\n                console.error(\"OpenAI API returned no text response:\", completion);\n                throw new Error(\"No text response from OpenAI API.\");\n            }\n            // console.log(\"OpenAI: Response received.\"); // Debug\n            return textResponse.trim();\n        } catch (error) {\n            console.error(\"Error generating answer from OpenAI:\", JSON.stringify(error, null, 2));\n            throw new Error(`Failed to generate answer from OpenAI: ${error.message || \"Unknown error\"}`);\n        }\n    }\n}\n// Create a singleton instance\nconst openAIService = new OpenAIService(); // Uses default \"gpt-3.5-turbo\"\n // If you want to use a different model by default, e.g., \"gpt-4\":\n // export const openAIService = new OpenAIService(\"gpt-4\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/openai.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/@google","vendor-chunks/ms","vendor-chunks/openai","vendor-chunks/@anthropic-ai","vendor-chunks/form-data-encoder","vendor-chunks/node-fetch","vendor-chunks/agentkeepalive","vendor-chunks/web-streams-polyfill","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();