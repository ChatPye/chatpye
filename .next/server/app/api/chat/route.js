"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/chat/route";
exports.ids = ["app/api/chat/route"];
exports.modules = {

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Deborah_Documents_Cursor_Projects_chatpye_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/chat/route.ts */ \"(rsc)/./src/app/api/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"standalone\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/chat/route\",\n        pathname: \"/api/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/chat/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Deborah\\\\Documents\\\\Cursor Projects\\\\chatpye\\\\src\\\\app\\\\api\\\\chat\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Deborah_Documents_Cursor_Projects_chatpye_src_app_api_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjaGF0JTJGcm91dGUmcGFnZT0lMkZhcGklMkZjaGF0JTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNEZWJvcmFoJTVDRG9jdW1lbnRzJTVDQ3Vyc29yJTIwUHJvamVjdHMlNUNjaGF0cHllJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNEZWJvcmFoJTVDRG9jdW1lbnRzJTVDQ3Vyc29yJTIwUHJvamVjdHMlNUNjaGF0cHllJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PXN0YW5kYWxvbmUmcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNzQztBQUNuSDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRweWUvP2Q4NjYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcRGVib3JhaFxcXFxEb2N1bWVudHNcXFxcQ3Vyc29yIFByb2plY3RzXFxcXGNoYXRweWVcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcY2hhdFxcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJzdGFuZGFsb25lXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2NoYXQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGF0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9jaGF0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcRGVib3JhaFxcXFxEb2N1bWVudHNcXFxcQ3Vyc29yIFByb2plY3RzXFxcXGNoYXRweWVcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxcY2hhdFxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jaGF0L3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/chat/route.ts":
/*!***********************************!*\
  !*** ./src/app/api/chat/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/mongodb */ \"(rsc)/./src/lib/mongodb.ts\");\n/* harmony import */ var _lib_embeddings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/embeddings */ \"(rsc)/./src/lib/embeddings.ts\");\n/* harmony import */ var _lib_openai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/openai */ \"(rsc)/./src/lib/openai.ts\");\n/* harmony import */ var _lib_anthropic__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/anthropic */ \"(rsc)/./src/lib/anthropic.ts\");\n/* harmony import */ var _lib_gemini__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/gemini */ \"(rsc)/./src/lib/gemini.ts\");\n\n\n\n\n\n\n// Helper to normalize questions for consistent cache keys\nfunction normalizeQuestion(question) {\n    return question.toLowerCase().trim().replace(/\\s+/g, \" \");\n}\n// Utility to convert AsyncIterable<string> to ReadableStream<Uint8Array>\n// and call an onComplete callback with the accumulated text.\nasync function processStreamForResponseAndCache(streamGenerator, onComplete) {\n    let accumulatedText = \"\";\n    const encoder = new TextEncoder();\n    let streamClosed = false; // Flag to prevent multiple onComplete calls\n    const readableStream = new ReadableStream({\n        async pull (controller) {\n            try {\n                const { value, done } = await streamGenerator.next();\n                if (done) {\n                    if (!streamClosed) {\n                        streamClosed = true;\n                        controller.close();\n                        // Call onComplete asynchronously without blocking stream closure\n                        onComplete(accumulatedText).catch((cacheError)=>{\n                            console.error(\"Error saving to cache post-stream:\", cacheError);\n                        });\n                    }\n                } else {\n                    accumulatedText += value;\n                    controller.enqueue(encoder.encode(value));\n                }\n            } catch (error) {\n                console.error(\"Error in stream generator during pull:\", error);\n                if (!streamClosed) {\n                    streamClosed = true;\n                    controller.error(error); // Propagate error to the stream consumer\n                }\n            }\n        },\n        async cancel (reason) {\n            console.log(\"Stream cancelled by client:\", reason);\n            if (!streamClosed) {\n                streamClosed = true;\n                if (typeof streamGenerator.return === \"function\") {\n                    try {\n                        await streamGenerator.return(undefined); // Ensure generator cleanup\n                    } catch (genError) {\n                        console.error(\"Error during generator return on cancel:\", genError);\n                    }\n                }\n            }\n        }\n    });\n    return readableStream;\n}\n// Add this function at the top level\nasync function validateTranscriptChunks(chunks, videoId, userId) {\n    if (!chunks || chunks.length === 0) {\n        console.log(\"No transcript chunks found for video:\", videoId);\n        throw new Error(\"No transcript chunks found\");\n    }\n    // Verify all chunks belong to the correct video\n    const invalidChunks = chunks.filter((chunk)=>chunk.metadata?.videoId !== videoId);\n    if (invalidChunks.length > 0) {\n        console.error(\"Found transcript chunks with mismatched videoId:\", {\n            expectedVideoId: videoId,\n            invalidChunks: invalidChunks.map((c)=>({\n                    jobId: c.jobId,\n                    actualVideoId: c.metadata?.videoId\n                }))\n        });\n        throw new Error(\"Found transcript chunks with mismatched video ID\");\n    }\n    // Verify all chunks belong to the correct user\n    const unauthorizedChunks = chunks.filter((chunk)=>chunk.userId !== userId);\n    if (unauthorizedChunks.length > 0) {\n        console.error(\"Found transcript chunks with mismatched userId:\", {\n            expectedUserId: userId,\n            unauthorizedChunks: unauthorizedChunks.map((c)=>({\n                    jobId: c.jobId,\n                    actualUserId: c.userId\n                }))\n        });\n        throw new Error(\"Found transcript chunks with mismatched user ID\");\n    }\n    // Verify timestamp continuity\n    const sortedChunks = [\n        ...chunks\n    ].sort((a, b)=>parseFloat(a.startTimestamp) - parseFloat(b.startTimestamp));\n    for(let i = 1; i < sortedChunks.length; i++){\n        const prevEnd = parseFloat(sortedChunks[i - 1].endTimestamp);\n        const currStart = parseFloat(sortedChunks[i].startTimestamp);\n        if (currStart < prevEnd) {\n            console.error(\"Found overlapping timestamps:\", {\n                previous: {\n                    jobId: sortedChunks[i - 1].jobId,\n                    end: prevEnd\n                },\n                current: {\n                    jobId: sortedChunks[i].jobId,\n                    start: currStart\n                }\n            });\n            throw new Error(\"Transcript chunks contain overlapping timestamps\");\n        }\n    }\n    return sortedChunks;\n}\nasync function POST(request) {\n    try {\n        const { message, jobId: providedJobId, modelId, videoId: youtubeVideoIdFromRequest, videoTitle, videoDescription } = await request.json();\n        if (!message || !modelId) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"Message and modelId are required\"\n            }, {\n                status: 400\n            });\n        }\n        // For RAG and caching, we need a canonical jobId (UUID)\n        let canonicalJobId = providedJobId;\n        let actualYoutubeVideoId = youtubeVideoIdFromRequest;\n        // If no jobId provided but we have a videoId, try to resolve the canonical jobId\n        if (!canonicalJobId && youtubeVideoIdFromRequest) {\n            try {\n                const resolveResponse = await fetch(`${request.headers.get(\"origin\")}/api/video/resolve-job?youtubeVideoId=${youtubeVideoIdFromRequest}`);\n                if (resolveResponse.ok) {\n                    const { jobId } = await resolveResponse.json();\n                    canonicalJobId = jobId;\n                }\n            } catch (error) {\n                console.error(\"Error resolving jobId:\", error);\n            }\n        }\n        // For OpenAI/Anthropic, we absolutely need a jobId\n        if (!canonicalJobId && modelId !== \"gemini\") {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"jobId (canonical UUID) is required for this model.\"\n            }, {\n                status: 400\n            });\n        }\n        // For Gemini, we need either a jobId or a videoId\n        if (!canonicalJobId && modelId === \"gemini\" && !youtubeVideoIdFromRequest) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"For Gemini, either jobId (UUID) or videoId (YouTube ID) is required.\"\n            }, {\n                status: 400\n            });\n        }\n        const supportedModels = [\n            \"gemini\",\n            \"openai\",\n            \"anthropic\"\n        ];\n        if (!supportedModels.includes(modelId)) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: `Invalid modelId. Supported models: ${supportedModels.join(\", \")}`\n            }, {\n                status: 400\n            });\n        }\n        const normalizedQuestion = normalizeQuestion(message);\n        let modelUsedForCacheKey;\n        if (modelId === \"gemini\") {\n            modelUsedForCacheKey = \"gemini-1.5-pro\";\n            // Use the canonical jobId for caching if available\n            if (canonicalJobId) {\n                const cachedResponse = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.getCachedQAResponse)(canonicalJobId, normalizedQuestion, modelUsedForCacheKey);\n                if (cachedResponse) {\n                    console.log(`CACHE_HIT: Gemini - JobId: ${canonicalJobId}, Question: \"${normalizedQuestion}\"`);\n                    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                        message: cachedResponse.responseText,\n                        fromCache: true,\n                        stream: false\n                    });\n                }\n                console.log(`CACHE_MISS: Gemini - JobId: ${canonicalJobId}, Question: \"${normalizedQuestion}\"`);\n            } else {\n                console.log(`CACHE_SKIP: No jobId (UUID) provided, skipping cache lookup for Gemini. Question: \"${normalizedQuestion}\"`);\n            }\n            let serviceContext = [];\n            if (canonicalJobId) {\n                const chunks = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.getTranscriptChunks)(canonicalJobId);\n                if (chunks && chunks.length > 0) {\n                    const relevantChunks = await (0,_lib_embeddings__WEBPACK_IMPORTED_MODULE_2__.findRelevantChunks)(message, chunks);\n                    serviceContext = relevantChunks.map((chunk)=>({\n                            text: chunk.textContent,\n                            startTimestamp: chunk.startTimestamp.toString(),\n                            endTimestamp: chunk.endTimestamp.toString(),\n                            jobId: canonicalJobId,\n                            videoId: actualYoutubeVideoId || \"\"\n                        }));\n                }\n            }\n            // If we don't have a videoId but have a jobId, try to get it from the job\n            if (!actualYoutubeVideoId && canonicalJobId) {\n                const jobDetails = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.getVideoJob)(canonicalJobId);\n                if (jobDetails?.processingMetadata?.videoId) {\n                    actualYoutubeVideoId = jobDetails.processingMetadata.videoId;\n                    // Update videoId in serviceContext if we found it\n                    serviceContext = serviceContext.map((ctx)=>({\n                            ...ctx,\n                            videoId: actualYoutubeVideoId\n                        }));\n                }\n            }\n            // If no transcript chunks found, fall back to direct YouTube URL approach\n            if (serviceContext.length === 0 && !actualYoutubeVideoId) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Cannot generate answer without transcript or videoId.\"\n                }, {\n                    status: 400\n                });\n            }\n            const geminiGenerator = _lib_gemini__WEBPACK_IMPORTED_MODULE_5__.geminiService.generateAnswerStream(serviceContext, message, actualYoutubeVideoId || \"\", videoTitle, videoDescription);\n            const stream = await processStreamForResponseAndCache(geminiGenerator, async (fullText)=>{\n                if (canonicalJobId) {\n                    await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.saveQAResponse)(canonicalJobId, normalizedQuestion, fullText, modelUsedForCacheKey);\n                    console.log(`CACHE_SAVE: Gemini - JobId: ${canonicalJobId}, Question: \"${normalizedQuestion}\"`);\n                }\n            });\n            return new next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"](stream, {\n                headers: {\n                    \"Content-Type\": \"text/plain\",\n                    \"Cache-Control\": \"no-cache\"\n                }\n            });\n        } else if (modelId === \"openai\") {\n            // Logic for OpenAI\n            if (!canonicalJobId) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"jobId is required for OpenAI model.\"\n                }, {\n                    status: 400\n                });\n            }\n            const chunks = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.getTranscriptChunks)(canonicalJobId);\n            if (!chunks || chunks.length === 0) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"No transcript chunks found for this video.\",\n                    stream: false,\n                    fromCache: false\n                }, {\n                    status: 404\n                });\n            }\n            const relevantChunks = await (0,_lib_embeddings__WEBPACK_IMPORTED_MODULE_2__.findRelevantChunks)(message, chunks);\n            const serviceContextFromChunks = relevantChunks.map((chunk)=>({\n                    text: chunk.textContent,\n                    startTimestamp: chunk.startTimestamp.toString(),\n                    endTimestamp: chunk.endTimestamp.toString()\n                }));\n            if (!serviceContextFromChunks || serviceContextFromChunks.length === 0) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Could not derive relevant context from the video transcript.\"\n                }, {\n                    status: 404\n                });\n            }\n            let text = \"\";\n            modelUsedForCacheKey = \"openai-gpt-3.5-turbo\";\n            text = await _lib_openai__WEBPACK_IMPORTED_MODULE_3__.openAIService.generateAnswer(serviceContextFromChunks, message);\n            // Cache the response\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.saveQAResponse)(canonicalJobId, normalizedQuestion, modelUsedForCacheKey, text);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                message: text,\n                fromCache: false,\n                stream: false\n            });\n        } else {\n            // Logic for Anthropic\n            if (!canonicalJobId) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"jobId is required for Anthropic model.\"\n                }, {\n                    status: 400\n                });\n            }\n            const chunks = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.getTranscriptChunks)(canonicalJobId);\n            if (!chunks || chunks.length === 0) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"No transcript chunks found for this video.\",\n                    stream: false,\n                    fromCache: false\n                }, {\n                    status: 404\n                });\n            }\n            const relevantChunks = await (0,_lib_embeddings__WEBPACK_IMPORTED_MODULE_2__.findRelevantChunks)(message, chunks);\n            const serviceContextFromChunks = relevantChunks.map((chunk)=>({\n                    text: chunk.textContent,\n                    startTimestamp: chunk.startTimestamp.toString(),\n                    endTimestamp: chunk.endTimestamp.toString()\n                }));\n            if (!serviceContextFromChunks || serviceContextFromChunks.length === 0) {\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                    error: \"Could not derive relevant context from the video transcript.\"\n                }, {\n                    status: 404\n                });\n            }\n            let text = \"\";\n            modelUsedForCacheKey = \"anthropic-claude-3-opus\";\n            text = await _lib_anthropic__WEBPACK_IMPORTED_MODULE_4__.anthropicService.generateAnswer(serviceContextFromChunks, message);\n            // Cache the response\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.saveQAResponse)(canonicalJobId, normalizedQuestion, modelUsedForCacheKey, text);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                message: text,\n                fromCache: false,\n                stream: false\n            });\n        }\n    } catch (error) {\n        console.error(\"General error in /api/chat POST:\", error.message, error.stack);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to generate response due to an unexpected internal server error.\",\n            errorMessage: error.message\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/anthropic.ts":
/*!******************************!*\
  !*** ./src/lib/anthropic.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnthropicService: () => (/* binding */ AnthropicService),\n/* harmony export */   anthropicService: () => (/* binding */ anthropicService)\n/* harmony export */ });\n/* harmony import */ var _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @anthropic-ai/sdk */ \"(rsc)/./node_modules/@anthropic-ai/sdk/index.mjs\");\n\n// Environment variable check\nif (!process.env.ANTHROPIC_API_KEY) {\n    console.warn(\"Warning: ANTHROPIC_API_KEY environment variable is not set. AnthropicService will fail if instantiated and used.\");\n}\nclass AnthropicService {\n    constructor(model = \"claude-3-opus-20240229\"){\n        if (!process.env.ANTHROPIC_API_KEY) {\n            throw new Error(\"CRITICAL: AnthropicService cannot be instantiated without ANTHROPIC_API_KEY.\");\n        }\n        this.anthropic = new _anthropic_ai_sdk__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            apiKey: process.env.ANTHROPIC_API_KEY\n        });\n        this.model = model;\n    }\n    async generateAnswer(context, question) {\n        console.log(\"Anthropic: Generating answer for question:\", question.substring(0, 50) + \"...\");\n        const contextString = context.map((c)=>`[${c.startTimestamp}s - ${c.endTimestamp}s] ${c.text}`).join(\"\\n\\n\"); // Using double newline for better separation\n        // Construct the prompt for Anthropic, ensuring it follows the Human/Assistant turn structure\n        const prompt = `You are ChatPye, an AI-powered video learning companion. Your primary goal is to provide intelligent, insightful, and helpful answers based on the provided transcript of a video.\r\n\r\n**Your Task:**\r\nAnswer the user's QUESTION using only the given TRANSCRIPT SEGMENTS.\r\n\r\n**Key Instructions:**\r\n1.  **Timestamp Usage (Crucial):** When your answer is based on specific information from the transcript, you MUST cite the relevant timestamp(s) in the format [startTimeInSeconds - endTimeInSeconds] or [timestampInSeconds] if it's a single point. Integrate these timestamps naturally into your response. For example: \"The speaker mentions a key concept at [123s - 128s].\"\r\n2.  **Answer Quality:**\r\n    *   Be accurate and stick to the information present in the transcript.\r\n    *   Provide comprehensive yet concise answers.\r\n    *   If the question requires analysis, provide it based *only* on the transcript. Do not infer outside information.\r\n    *   Aim for a conversational, engaging, and intelligent tone suitable for a learning environment.\r\n3.  **Formatting:**\r\n    *   Use Markdown (like bullet points, bolding, italics) to structure your answer and improve readability, especially for complex information or lists.\r\n4.  **Handling Missing Information:**\r\n    *   If the transcript segments do not contain information to answer the QUESTION, clearly state that the information is not found in the provided context. Do not try to answer from external knowledge.\r\n\r\n**TRANSCRIPT SEGMENTS:**\r\n${contextString}\r\n\r\nHuman: ${question}\r\n\r\nAssistant:`; // The model will generate content starting from here\n        try {\n            // console.log(\"Anthropic: Calling messages.create.\"); // Debug\n            const completion = await this.anthropic.messages.create({\n                model: this.model,\n                max_tokens: 2048,\n                messages: [\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ]\n            });\n            // console.log(\"Anthropic: Response received.\"); // Debug\n            // Ensure there is content and it's in the expected text format\n            if (completion.content && completion.content.length > 0 && completion.content[0].type === \"text\") {\n                return completion.content[0].text.trim();\n            } else {\n                console.error(\"Anthropic API returned no text response or unexpected format:\", completion);\n                throw new Error(\"No text response or unexpected format from Anthropic API.\");\n            }\n        } catch (error) {\n            console.error(\"Error generating answer from Anthropic:\", JSON.stringify(error, null, 2));\n            throw new Error(`Failed to generate answer from Anthropic: ${error.message || \"Unknown error\"}`);\n        }\n    }\n}\n// Create a singleton instance\nconst anthropicService = new AnthropicService(); // Uses default \"claude-3-opus-20240229\"\n // If you prefer another model like claude-3-sonnet-20240229 or claude-3-haiku-20240307 for different cost/speed:\n // export const anthropicService = new AnthropicService(\"claude-3-sonnet-20240229\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/anthropic.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/embeddings.ts":
/*!*******************************!*\
  !*** ./src/lib/embeddings.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findRelevantChunks: () => (/* binding */ findRelevantChunks),\n/* harmony export */   generateEmbedding: () => (/* binding */ generateEmbedding)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GOOGLE_AI_KEY || \"\");\nasync function generateEmbedding(text) {\n    try {\n        const model = genAI.getGenerativeModel({\n            model: \"embedding-001\"\n        });\n        const result = await model.embedContent(text);\n        const embedding = result.embedding.values;\n        return embedding;\n    } catch (error) {\n        console.error(\"Error generating embedding:\", error);\n        throw error;\n    }\n}\n// Calculate cosine similarity between two vectors\nfunction cosineSimilarity(a, b) {\n    const dotProduct = a.reduce((sum, val, i)=>sum + val * b[i], 0);\n    const magnitudeA = Math.sqrt(a.reduce((sum, val)=>sum + val * val, 0));\n    const magnitudeB = Math.sqrt(b.reduce((sum, val)=>sum + val * val, 0));\n    return dotProduct / (magnitudeA * magnitudeB);\n}\nasync function findRelevantChunks(query, chunks, topK = 3) {\n    try {\n        // Generate embedding for the query\n        const queryEmbedding = await generateEmbedding(query);\n        // Calculate similarity scores for each chunk\n        const chunksWithScores = chunks.map((chunk)=>({\n                chunk,\n                score: cosineSimilarity(queryEmbedding, chunk.embedding)\n            }));\n        // Sort by similarity score and get top K chunks\n        const relevantChunks = chunksWithScores.sort((a, b)=>b.score - a.score).slice(0, topK).map((item)=>item.chunk);\n        return relevantChunks;\n    } catch (error) {\n        console.error(\"Error finding relevant chunks:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2VtYmVkZGluZ3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBRzNELE1BQU1DLFFBQVEsSUFBSUQscUVBQWtCQSxDQUFDRSxRQUFRQyxHQUFHLENBQUNDLGFBQWEsSUFBSTtBQUUzRCxlQUFlQyxrQkFBa0JDLElBQVk7SUFDbEQsSUFBSTtRQUNGLE1BQU1DLFFBQVFOLE1BQU1PLGtCQUFrQixDQUFDO1lBQUVELE9BQU87UUFBZ0I7UUFDaEUsTUFBTUUsU0FBUyxNQUFNRixNQUFNRyxZQUFZLENBQUNKO1FBQ3hDLE1BQU1LLFlBQVlGLE9BQU9FLFNBQVMsQ0FBQ0MsTUFBTTtRQUN6QyxPQUFPRDtJQUNULEVBQUUsT0FBT0UsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxNQUFNQTtJQUNSO0FBQ0Y7QUFFQSxrREFBa0Q7QUFDbEQsU0FBU0UsaUJBQWlCQyxDQUFXLEVBQUVDLENBQVc7SUFDaEQsTUFBTUMsYUFBYUYsRUFBRUcsTUFBTSxDQUFDLENBQUNDLEtBQUtDLEtBQUtDLElBQU1GLE1BQU1DLE1BQU1KLENBQUMsQ0FBQ0ssRUFBRSxFQUFFO0lBQy9ELE1BQU1DLGFBQWFDLEtBQUtDLElBQUksQ0FBQ1QsRUFBRUcsTUFBTSxDQUFDLENBQUNDLEtBQUtDLE1BQVFELE1BQU1DLE1BQU1BLEtBQUs7SUFDckUsTUFBTUssYUFBYUYsS0FBS0MsSUFBSSxDQUFDUixFQUFFRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsTUFBTUEsS0FBSztJQUNyRSxPQUFPSCxhQUFjSyxDQUFBQSxhQUFhRyxVQUFTO0FBQzdDO0FBRU8sZUFBZUMsbUJBQ3BCQyxLQUFhLEVBQ2JDLE1BQXlCLEVBQ3pCQyxPQUFlLENBQUM7SUFFaEIsSUFBSTtRQUNGLG1DQUFtQztRQUNuQyxNQUFNQyxpQkFBaUIsTUFBTTFCLGtCQUFrQnVCO1FBRS9DLDZDQUE2QztRQUM3QyxNQUFNSSxtQkFBbUJILE9BQU9JLEdBQUcsQ0FBQ0MsQ0FBQUEsUUFBVTtnQkFDNUNBO2dCQUNBQyxPQUFPcEIsaUJBQWlCZ0IsZ0JBQWdCRyxNQUFNdkIsU0FBUztZQUN6RDtRQUVBLGdEQUFnRDtRQUNoRCxNQUFNeUIsaUJBQWlCSixpQkFDcEJLLElBQUksQ0FBQyxDQUFDckIsR0FBR0MsSUFBTUEsRUFBRWtCLEtBQUssR0FBR25CLEVBQUVtQixLQUFLLEVBQ2hDRyxLQUFLLENBQUMsR0FBR1IsTUFDVEcsR0FBRyxDQUFDTSxDQUFBQSxPQUFRQSxLQUFLTCxLQUFLO1FBRXpCLE9BQU9FO0lBQ1QsRUFBRSxPQUFPdkIsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxNQUFNQTtJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0cHllLy4vc3JjL2xpYi9lbWJlZGRpbmdzLnRzP2JjZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJIH0gZnJvbSAnQGdvb2dsZS9nZW5lcmF0aXZlLWFpJztcclxuaW1wb3J0IHsgVHJhbnNjcmlwdENodW5rIH0gZnJvbSAnLi9tb25nb2RiJztcclxuXHJcbmNvbnN0IGdlbkFJID0gbmV3IEdvb2dsZUdlbmVyYXRpdmVBSShwcm9jZXNzLmVudi5HT09HTEVfQUlfS0VZIHx8ICcnKTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUVtYmVkZGluZyh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcltdPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IG1vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZW1iZWRkaW5nLTAwMVwiIH0pO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9kZWwuZW1iZWRDb250ZW50KHRleHQpO1xyXG4gICAgY29uc3QgZW1iZWRkaW5nID0gcmVzdWx0LmVtYmVkZGluZy52YWx1ZXM7XHJcbiAgICByZXR1cm4gZW1iZWRkaW5nO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIGVtYmVkZGluZzonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbi8vIENhbGN1bGF0ZSBjb3NpbmUgc2ltaWxhcml0eSBiZXR3ZWVuIHR3byB2ZWN0b3JzXHJcbmZ1bmN0aW9uIGNvc2luZVNpbWlsYXJpdHkoYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogbnVtYmVyIHtcclxuICBjb25zdCBkb3RQcm9kdWN0ID0gYS5yZWR1Y2UoKHN1bSwgdmFsLCBpKSA9PiBzdW0gKyB2YWwgKiBiW2ldLCAwKTtcclxuICBjb25zdCBtYWduaXR1ZGVBID0gTWF0aC5zcXJ0KGEucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsICogdmFsLCAwKSk7XHJcbiAgY29uc3QgbWFnbml0dWRlQiA9IE1hdGguc3FydChiLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCAqIHZhbCwgMCkpO1xyXG4gIHJldHVybiBkb3RQcm9kdWN0IC8gKG1hZ25pdHVkZUEgKiBtYWduaXR1ZGVCKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRSZWxldmFudENodW5rcyhcclxuICBxdWVyeTogc3RyaW5nLFxyXG4gIGNodW5rczogVHJhbnNjcmlwdENodW5rW10sXHJcbiAgdG9wSzogbnVtYmVyID0gM1xyXG4pOiBQcm9taXNlPFRyYW5zY3JpcHRDaHVua1tdPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEdlbmVyYXRlIGVtYmVkZGluZyBmb3IgdGhlIHF1ZXJ5XHJcbiAgICBjb25zdCBxdWVyeUVtYmVkZGluZyA9IGF3YWl0IGdlbmVyYXRlRW1iZWRkaW5nKHF1ZXJ5KTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgc2ltaWxhcml0eSBzY29yZXMgZm9yIGVhY2ggY2h1bmtcclxuICAgIGNvbnN0IGNodW5rc1dpdGhTY29yZXMgPSBjaHVua3MubWFwKGNodW5rID0+ICh7XHJcbiAgICAgIGNodW5rLFxyXG4gICAgICBzY29yZTogY29zaW5lU2ltaWxhcml0eShxdWVyeUVtYmVkZGluZywgY2h1bmsuZW1iZWRkaW5nKVxyXG4gICAgfSkpO1xyXG5cclxuICAgIC8vIFNvcnQgYnkgc2ltaWxhcml0eSBzY29yZSBhbmQgZ2V0IHRvcCBLIGNodW5rc1xyXG4gICAgY29uc3QgcmVsZXZhbnRDaHVua3MgPSBjaHVua3NXaXRoU2NvcmVzXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnNjb3JlIC0gYS5zY29yZSlcclxuICAgICAgLnNsaWNlKDAsIHRvcEspXHJcbiAgICAgIC5tYXAoaXRlbSA9PiBpdGVtLmNodW5rKTtcclxuXHJcbiAgICByZXR1cm4gcmVsZXZhbnRDaHVua3M7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZpbmRpbmcgcmVsZXZhbnQgY2h1bmtzOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiR29vZ2xlR2VuZXJhdGl2ZUFJIiwiZ2VuQUkiLCJwcm9jZXNzIiwiZW52IiwiR09PR0xFX0FJX0tFWSIsImdlbmVyYXRlRW1iZWRkaW5nIiwidGV4dCIsIm1vZGVsIiwiZ2V0R2VuZXJhdGl2ZU1vZGVsIiwicmVzdWx0IiwiZW1iZWRDb250ZW50IiwiZW1iZWRkaW5nIiwidmFsdWVzIiwiZXJyb3IiLCJjb25zb2xlIiwiY29zaW5lU2ltaWxhcml0eSIsImEiLCJiIiwiZG90UHJvZHVjdCIsInJlZHVjZSIsInN1bSIsInZhbCIsImkiLCJtYWduaXR1ZGVBIiwiTWF0aCIsInNxcnQiLCJtYWduaXR1ZGVCIiwiZmluZFJlbGV2YW50Q2h1bmtzIiwicXVlcnkiLCJjaHVua3MiLCJ0b3BLIiwicXVlcnlFbWJlZGRpbmciLCJjaHVua3NXaXRoU2NvcmVzIiwibWFwIiwiY2h1bmsiLCJzY29yZSIsInJlbGV2YW50Q2h1bmtzIiwic29ydCIsInNsaWNlIiwiaXRlbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/embeddings.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/env.ts":
/*!************************!*\
  !*** ./src/lib/env.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getEnvVar: () => (/* binding */ getEnvVar),\n/* harmony export */   getOptionalEnvVar: () => (/* binding */ getOptionalEnvVar),\n/* harmony export */   isTestEnvironment: () => (/* binding */ isTestEnvironment),\n/* harmony export */   validateEnv: () => (/* binding */ validateEnv)\n/* harmony export */ });\n/**\r\n * Environment variable validation utility\r\n */ // Required environment variables for production\nconst REQUIRED_ENV_VARS = [\n    \"GEMINI_API_KEY\",\n    \"YOUTUBE_API_KEY\",\n    \"MONGODB_URI\",\n    \"GOOGLE_AI_KEY\"\n];\n// Optional environment variables with defaults\nconst OPTIONAL_ENV_VARS = {\n    MONGODB_DB_NAME: \"chatpye_db\",\n    NODE_ENV: \"development\"\n};\n/**\r\n * Validates that all required environment variables are set\r\n * @throws Error if any required environment variables are missing\r\n */ function validateEnv() {\n    // Skip validation in test environment\n    if (isTestEnvironment()) {\n        return;\n    }\n    const missing = REQUIRED_ENV_VARS.filter((key)=>!process.env[key]);\n    if (missing.length > 0) {\n        throw new Error(`Missing required environment variables: ${missing.join(\", \")}\\n` + \"Please check your .env.local file and ensure all required variables are set.\");\n    }\n}\n/**\r\n * Gets an environment variable with type safety\r\n * @param key The environment variable key\r\n * @returns The environment variable value\r\n * @throws Error if the environment variable is not set\r\n */ function getEnvVar(key) {\n    const value = process.env[key];\n    if (!value) {\n        throw new Error(`Environment variable ${key} is not set`);\n    }\n    return value;\n}\n/**\r\n * Gets an optional environment variable with a default value\r\n * @param key The environment variable key\r\n * @returns The environment variable value or its default\r\n */ function getOptionalEnvVar(key) {\n    return process.env[key] || OPTIONAL_ENV_VARS[key];\n}\n/**\r\n * Checks if we're running in a test environment\r\n * @returns true if running in test environment\r\n */ function isTestEnvironment() {\n    // Check for Vitest's test environment\n    return process.env.VITEST === \"true\" || // Check for Jest's test environment\n    process.env.JEST_WORKER_ID !== undefined || // Check for Node's test environment\n    \"development\" === \"test\";\n}\n// Export the module\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    validateEnv,\n    getEnvVar,\n    getOptionalEnvVar,\n    isTestEnvironment\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2Vudi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztDQUVDLEdBRUQsZ0RBQWdEO0FBQ2hELE1BQU1BLG9CQUFvQjtJQUN4QjtJQUNBO0lBQ0E7SUFDQTtDQUNEO0FBRUQsK0NBQStDO0FBQy9DLE1BQU1DLG9CQUFvQjtJQUN4QkMsaUJBQWlCO0lBQ2pCQyxVQUFVO0FBQ1o7QUFFQTs7O0NBR0MsR0FDTSxTQUFTQztJQUNkLHNDQUFzQztJQUN0QyxJQUFJQyxxQkFBcUI7UUFDdkI7SUFDRjtJQUVBLE1BQU1DLFVBQVVOLGtCQUFrQk8sTUFBTSxDQUFDQyxDQUFBQSxNQUFPLENBQUNDLFFBQVFDLEdBQUcsQ0FBQ0YsSUFBSTtJQUVqRSxJQUFJRixRQUFRSyxNQUFNLEdBQUcsR0FBRztRQUN0QixNQUFNLElBQUlDLE1BQ1IsQ0FBQyx3Q0FBd0MsRUFBRU4sUUFBUU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQ2pFO0lBRUo7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ00sU0FBU0MsVUFBVU4sR0FBcUM7SUFDN0QsTUFBTU8sUUFBUU4sUUFBUUMsR0FBRyxDQUFDRixJQUFJO0lBQzlCLElBQUksQ0FBQ08sT0FBTztRQUNWLE1BQU0sSUFBSUgsTUFBTSxDQUFDLHFCQUFxQixFQUFFSixJQUFJLFdBQVcsQ0FBQztJQUMxRDtJQUNBLE9BQU9PO0FBQ1Q7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0Msa0JBQ2RSLEdBQU07SUFFTixPQUFPQyxRQUFRQyxHQUFHLENBQUNGLElBQUksSUFBSVAsaUJBQWlCLENBQUNPLElBQUk7QUFDbkQ7QUFFQTs7O0NBR0MsR0FDTSxTQUFTSDtJQUNkLHNDQUFzQztJQUN0QyxPQUFPSSxRQUFRQyxHQUFHLENBQUNPLE1BQU0sS0FBSyxVQUN2QixvQ0FBb0M7SUFDcENSLFFBQVFDLEdBQUcsQ0FBQ1EsY0FBYyxLQUFLQyxhQUMvQixvQ0FBb0M7SUF4RTdDLGtCQXlFa0M7QUFDbEM7QUFFQSxvQkFBb0I7QUFDcEIsaUVBQWU7SUFDYmY7SUFDQVU7SUFDQUU7SUFDQVg7QUFDRixDQUFDLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0cHllLy4vc3JjL2xpYi9lbnYudHM/ODQ4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogRW52aXJvbm1lbnQgdmFyaWFibGUgdmFsaWRhdGlvbiB1dGlsaXR5XHJcbiAqL1xyXG5cclxuLy8gUmVxdWlyZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIGZvciBwcm9kdWN0aW9uXHJcbmNvbnN0IFJFUVVJUkVEX0VOVl9WQVJTID0gW1xyXG4gICdHRU1JTklfQVBJX0tFWScsXHJcbiAgJ1lPVVRVQkVfQVBJX0tFWScsXHJcbiAgJ01PTkdPREJfVVJJJyxcclxuICAnR09PR0xFX0FJX0tFWSdcclxuXSBhcyBjb25zdDtcclxuXHJcbi8vIE9wdGlvbmFsIGVudmlyb25tZW50IHZhcmlhYmxlcyB3aXRoIGRlZmF1bHRzXHJcbmNvbnN0IE9QVElPTkFMX0VOVl9WQVJTID0ge1xyXG4gIE1PTkdPREJfREJfTkFNRTogJ2NoYXRweWVfZGInLFxyXG4gIE5PREVfRU5WOiAnZGV2ZWxvcG1lbnQnXHJcbn0gYXMgY29uc3Q7XHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoYXQgYWxsIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgc2V0XHJcbiAqIEB0aHJvd3MgRXJyb3IgaWYgYW55IHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgbWlzc2luZ1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRW52KCkge1xyXG4gIC8vIFNraXAgdmFsaWRhdGlvbiBpbiB0ZXN0IGVudmlyb25tZW50XHJcbiAgaWYgKGlzVGVzdEVudmlyb25tZW50KCkpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGNvbnN0IG1pc3NpbmcgPSBSRVFVSVJFRF9FTlZfVkFSUy5maWx0ZXIoa2V5ID0+ICFwcm9jZXNzLmVudltrZXldKTtcclxuICBcclxuICBpZiAobWlzc2luZy5sZW5ndGggPiAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgIGBNaXNzaW5nIHJlcXVpcmVkIGVudmlyb25tZW50IHZhcmlhYmxlczogJHttaXNzaW5nLmpvaW4oJywgJyl9XFxuYCArXHJcbiAgICAgICdQbGVhc2UgY2hlY2sgeW91ciAuZW52LmxvY2FsIGZpbGUgYW5kIGVuc3VyZSBhbGwgcmVxdWlyZWQgdmFyaWFibGVzIGFyZSBzZXQuJ1xyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXRzIGFuIGVudmlyb25tZW50IHZhcmlhYmxlIHdpdGggdHlwZSBzYWZldHlcclxuICogQHBhcmFtIGtleSBUaGUgZW52aXJvbm1lbnQgdmFyaWFibGUga2V5XHJcbiAqIEByZXR1cm5zIFRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSB2YWx1ZVxyXG4gKiBAdGhyb3dzIEVycm9yIGlmIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBub3Qgc2V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW52VmFyKGtleTogdHlwZW9mIFJFUVVJUkVEX0VOVl9WQVJTW251bWJlcl0pOiBzdHJpbmcge1xyXG4gIGNvbnN0IHZhbHVlID0gcHJvY2Vzcy5lbnZba2V5XTtcclxuICBpZiAoIXZhbHVlKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEVudmlyb25tZW50IHZhcmlhYmxlICR7a2V5fSBpcyBub3Qgc2V0YCk7XHJcbiAgfVxyXG4gIHJldHVybiB2YWx1ZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgYW4gb3B0aW9uYWwgZW52aXJvbm1lbnQgdmFyaWFibGUgd2l0aCBhIGRlZmF1bHQgdmFsdWVcclxuICogQHBhcmFtIGtleSBUaGUgZW52aXJvbm1lbnQgdmFyaWFibGUga2V5XHJcbiAqIEByZXR1cm5zIFRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZSB2YWx1ZSBvciBpdHMgZGVmYXVsdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wdGlvbmFsRW52VmFyPEsgZXh0ZW5kcyBrZXlvZiB0eXBlb2YgT1BUSU9OQUxfRU5WX1ZBUlM+KFxyXG4gIGtleTogS1xyXG4pOiBzdHJpbmcge1xyXG4gIHJldHVybiBwcm9jZXNzLmVudltrZXldIHx8IE9QVElPTkFMX0VOVl9WQVJTW2tleV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgd2UncmUgcnVubmluZyBpbiBhIHRlc3QgZW52aXJvbm1lbnRcclxuICogQHJldHVybnMgdHJ1ZSBpZiBydW5uaW5nIGluIHRlc3QgZW52aXJvbm1lbnRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1Rlc3RFbnZpcm9ubWVudCgpOiBib29sZWFuIHtcclxuICAvLyBDaGVjayBmb3IgVml0ZXN0J3MgdGVzdCBlbnZpcm9ubWVudFxyXG4gIHJldHVybiBwcm9jZXNzLmVudi5WSVRFU1QgPT09ICd0cnVlJyB8fCBcclxuICAgICAgICAgLy8gQ2hlY2sgZm9yIEplc3QncyB0ZXN0IGVudmlyb25tZW50XHJcbiAgICAgICAgIHByb2Nlc3MuZW52LkpFU1RfV09SS0VSX0lEICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgLy8gQ2hlY2sgZm9yIE5vZGUncyB0ZXN0IGVudmlyb25tZW50XHJcbiAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAndGVzdCc7XHJcbn1cclxuXHJcbi8vIEV4cG9ydCB0aGUgbW9kdWxlXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICB2YWxpZGF0ZUVudixcclxuICBnZXRFbnZWYXIsXHJcbiAgZ2V0T3B0aW9uYWxFbnZWYXIsXHJcbiAgaXNUZXN0RW52aXJvbm1lbnRcclxufTsgIl0sIm5hbWVzIjpbIlJFUVVJUkVEX0VOVl9WQVJTIiwiT1BUSU9OQUxfRU5WX1ZBUlMiLCJNT05HT0RCX0RCX05BTUUiLCJOT0RFX0VOViIsInZhbGlkYXRlRW52IiwiaXNUZXN0RW52aXJvbm1lbnQiLCJtaXNzaW5nIiwiZmlsdGVyIiwia2V5IiwicHJvY2VzcyIsImVudiIsImxlbmd0aCIsIkVycm9yIiwiam9pbiIsImdldEVudlZhciIsInZhbHVlIiwiZ2V0T3B0aW9uYWxFbnZWYXIiLCJWSVRFU1QiLCJKRVNUX1dPUktFUl9JRCIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/env.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/gemini.ts":
/*!***************************!*\
  !*** ./src/lib/gemini.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeminiService: () => (/* binding */ GeminiService),\n/* harmony export */   geminiService: () => (/* binding */ geminiService)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./env */ \"(rsc)/./src/lib/env.ts\");\n/* harmony import */ var _mongodb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mongodb */ \"(rsc)/./src/lib/mongodb.ts\");\n\n\n\n// It's good practice to ensure API keys are checked before class instantiation if possible,\n// or at least make it very clear in documentation that the service will fail without them.\nif (!process.env.GEMINI_API_KEY) {\n    console.warn(\"Warning: GEMINI_API_KEY environment variable is not set. GeminiService will fail if instantiated and used.\");\n}\nclass GeminiService {\n    constructor(){\n        const apiKey = (0,_env__WEBPACK_IMPORTED_MODULE_1__.getEnvVar)(\"GEMINI_API_KEY\");\n        if (!apiKey) {\n            throw new Error(\"GEMINI_API_KEY environment variable is not set.\");\n        }\n        this.genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(apiKey);\n        // Define the generation config\n        this.generationConfig = {\n            temperature: 0.7,\n            topK: 1,\n            topP: 1,\n            maxOutputTokens: 2048\n        };\n        // Initialize the model\n        try {\n            this.model = this.genAI.getGenerativeModel({\n                model: \"gemini-1.5-pro\",\n                generationConfig: this.generationConfig\n            });\n        } catch (error) {\n            console.error(\"Failed to initialize Gemini model:\", error);\n            throw new Error(\"Could not initialize Gemini model. Please check your API key and model name.\");\n        }\n    }\n    async validateContexts(contexts, videoId) {\n        if (!contexts || contexts.length === 0) {\n            throw new Error(\"No transcript context provided\");\n        }\n        // Get the videoId from the first context\n        const expectedVideoId = contexts[0].videoId;\n        if (!expectedVideoId) {\n            throw new Error(\"No videoId found in transcript context\");\n        }\n        // Verify that all contexts have the same videoId\n        const mismatchedContexts = contexts.filter((context)=>context.videoId !== expectedVideoId);\n        if (mismatchedContexts.length > 0) {\n            console.error(\"Found contexts with mismatched videoId:\", {\n                expectedVideoId,\n                mismatchedContexts: mismatchedContexts.map((c)=>({\n                        jobId: c.jobId,\n                        actualVideoId: c.videoId\n                    }))\n            });\n            throw new Error(\"Transcript contexts contain mismatched video IDs\");\n        }\n        // Verify that the videoId matches the job for each context\n        for (const context of contexts){\n            const isValid = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_2__.verifyTranscriptVideoId)(context.jobId, expectedVideoId);\n            if (!isValid) {\n                console.error(\"Invalid transcript context:\", {\n                    jobId: context.jobId,\n                    videoId: context.videoId,\n                    expectedVideoId\n                });\n                throw new Error(`Transcript context does not match the provided videoId: ${expectedVideoId}`);\n            }\n        }\n        // Verify timestamp continuity\n        const sortedContexts = [\n            ...contexts\n        ].sort((a, b)=>parseFloat(a.startTimestamp) - parseFloat(b.startTimestamp));\n        for(let i = 1; i < sortedContexts.length; i++){\n            const prevEnd = parseFloat(sortedContexts[i - 1].endTimestamp);\n            const currStart = parseFloat(sortedContexts[i].startTimestamp);\n            if (currStart < prevEnd) {\n                console.error(\"Found overlapping timestamps:\", {\n                    previous: {\n                        jobId: sortedContexts[i - 1].jobId,\n                        end: prevEnd\n                    },\n                    current: {\n                        jobId: sortedContexts[i].jobId,\n                        start: currStart\n                    }\n                });\n                throw new Error(\"Transcript contexts contain overlapping timestamps\");\n            }\n        }\n    }\n    // Unified function for generating answers. Handles both RAG and direct-to-video.\n    async *generateAnswerStream(contexts, question, videoId, videoTitle, videoDescription) {\n        // We still validate if context is provided, to ensure data integrity if it exists.\n        if (contexts.length > 0) {\n            await this.validateContexts(contexts, videoId);\n        } else if (!videoId) {\n            // If there's no context, we MUST have a videoId to proceed.\n            throw new Error(\"Cannot generate answer without transcript context or a videoId.\");\n        }\n        try {\n            if (contexts.length === 0) {\n                // --- Direct-to-video prompt when no transcript is available ---\n                // This now uses the official method for prompting with a YouTube URL.\n                const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;\n                const result = await this.model.generateContentStream([\n                    question,\n                    {\n                        fileData: {\n                            mimeType: \"video/youtube\",\n                            fileUri: videoUrl\n                        }\n                    }\n                ]);\n                for await (const chunk of result.stream){\n                    const chunkText = chunk.text();\n                    yield chunkText;\n                }\n                return; // Exit the generator after handling the direct-to-video case\n            }\n            // This part of the code is now only for the RAG-based approach\n            const chat = this.model.startChat({\n                history: [],\n                generationConfig: this.generationConfig\n            });\n            const transcriptSegments = contexts.map((c)=>`[${c.startTimestamp} - ${c.endTimestamp}] ${c.text}`).join(\"\\n\");\n            const ragPrompt = `\r\n        You are a helpful AI assistant. Answer the user's question based *only* on the following transcript segments from the video.\r\n        Do not use any prior knowledge. If the answer is not in the provided segments, say \"I cannot answer that based on the provided transcript.\"\r\n        When you use information from a segment, cite the start timestamp in your answer, like this: [01:23].\r\n        \r\n        Transcript Segments:\r\n        ---\r\n        ${transcriptSegments}\r\n        ---\r\n        \r\n        User Question: ${question}\r\n      `;\n            const result = await chat.sendMessageStream(ragPrompt);\n            for await (const chunk of result.stream){\n                const chunkText = chunk.text();\n                yield chunkText;\n            }\n        } catch (error) {\n            console.error(\"Error generating answer stream:\", error);\n            yield \"Sorry, I encountered an error while trying to answer your question.\";\n        }\n    }\n}\nconst geminiService = new GeminiService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/gemini.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mongodb.ts":
/*!****************************!*\
  !*** ./src/lib/mongodb.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabaseConnection: () => (/* binding */ closeDatabaseConnection),\n/* harmony export */   connectToDatabase: () => (/* binding */ connectToDatabase),\n/* harmony export */   createTranscriptChunks: () => (/* binding */ createTranscriptChunks),\n/* harmony export */   createVideoJob: () => (/* binding */ createVideoJob),\n/* harmony export */   getCachedProactiveAnalysis: () => (/* binding */ getCachedProactiveAnalysis),\n/* harmony export */   getCachedQAResponse: () => (/* binding */ getCachedQAResponse),\n/* harmony export */   getCollections: () => (/* binding */ getCollections),\n/* harmony export */   getTranscriptChunks: () => (/* binding */ getTranscriptChunks),\n/* harmony export */   getTranscriptChunksByVideoId: () => (/* binding */ getTranscriptChunksByVideoId),\n/* harmony export */   getUserTranscriptChunks: () => (/* binding */ getUserTranscriptChunks),\n/* harmony export */   getVideoJob: () => (/* binding */ getVideoJob),\n/* harmony export */   saveQAResponse: () => (/* binding */ saveQAResponse),\n/* harmony export */   updateTranscriptChunkEmbeddings: () => (/* binding */ updateTranscriptChunkEmbeddings),\n/* harmony export */   updateVideoJob: () => (/* binding */ updateVideoJob),\n/* harmony export */   verifyTranscriptOwnership: () => (/* binding */ verifyTranscriptOwnership),\n/* harmony export */   verifyTranscriptVideoId: () => (/* binding */ verifyTranscriptVideoId)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _env__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./env */ \"(rsc)/./src/lib/env.ts\");\n\n\n// MongoDB connection state\nlet client = null;\nlet db = null;\n// Collection references with proper typing\nlet videoJobsCollection = null;\nlet transcriptChunksCollection = null;\nlet cachedVideoQACollection = null;\n/**\r\n * Connects to the MongoDB database\r\n * @throws Error if connection fails or required environment variables are missing\r\n */ async function connectToDatabase() {\n    if (db && client) {\n        return {\n            db,\n            client\n        };\n    }\n    try {\n        // Get MongoDB URI from environment\n        const uri = (0,_env__WEBPACK_IMPORTED_MODULE_1__.isTestEnvironment)() ? process.env.MONGODB_URI : (0,_env__WEBPACK_IMPORTED_MODULE_1__.getEnvVar)(\"MONGODB_URI\");\n        if (!uri) {\n            throw new Error(\"MONGODB_URI is not set\");\n        }\n        // Connect to MongoDB\n        client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(uri);\n        await client.connect();\n        // Get database name from environment or use default\n        const dbName = (0,_env__WEBPACK_IMPORTED_MODULE_1__.getOptionalEnvVar)(\"MONGODB_DB_NAME\");\n        db = client.db(dbName);\n        // Initialize collections with proper typing\n        videoJobsCollection = db.collection(\"videoJobs\");\n        transcriptChunksCollection = db.collection(\"transcriptChunks\");\n        cachedVideoQACollection = db.collection(\"cachedQAResponses\");\n        // Create indexes\n        await videoJobsCollection.createIndex({\n            jobId: 1\n        }, {\n            unique: true\n        });\n        await videoJobsCollection.createIndex({\n            \"processingMetadata.videoId\": 1\n        });\n        await transcriptChunksCollection.createIndex({\n            jobId: 1\n        });\n        await transcriptChunksCollection.createIndex({\n            \"metadata.videoId\": 1\n        });\n        return {\n            db,\n            client\n        };\n    } catch (error) {\n        console.error(\"Failed to connect to MongoDB:\", error);\n        throw error;\n    }\n}\n// Export a function to get specific collections, ensuring DB connection\nasync function getCollections() {\n    if (!db || !client) {\n        await connectToDatabase();\n    }\n    // Return collections with proper typing\n    return {\n        videoJobsCollection: videoJobsCollection || undefined,\n        transcriptChunksCollection: transcriptChunksCollection || undefined,\n        cachedVideoQACollection: cachedVideoQACollection || undefined\n    };\n}\n// --- Video Job Functions ---\nasync function createVideoJob(jobData) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const newJob = {\n        ...jobData,\n        status: jobData.status || \"pending\",\n        createdAt: new Date(),\n        updatedAt: new Date()\n    };\n    const result = await videoJobsCollection.insertOne(newJob);\n    if (!result.insertedId) {\n        throw new Error(\"Failed to create video job.\");\n    }\n    return {\n        ...newJob,\n        _id: result.insertedId\n    };\n}\nasync function getVideoJob(jobId) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    return videoJobsCollection.findOne({\n        jobId\n    });\n}\nasync function updateVideoJob(jobId, updates) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const result = await videoJobsCollection.updateOne({\n        jobId\n    }, {\n        $set: {\n            ...updates,\n            updatedAt: new Date()\n        }\n    });\n    return result.modifiedCount > 0;\n}\n// --- Transcript Chunk Functions ---\nasync function createTranscriptChunks(chunksData) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    if (chunksData.length === 0) return;\n    const chunksToInsert = chunksData.map((chunk)=>({\n            ...chunk,\n            createdAt: new Date()\n        }));\n    try {\n        // First, delete any existing chunks for this job and user\n        if (chunksToInsert.length > 0) {\n            await transcriptChunksCollection.deleteMany({\n                jobId: chunksToInsert[0].jobId,\n                userId: chunksToInsert[0].userId\n            });\n        }\n        // Then insert the new chunks\n        const result = await transcriptChunksCollection.insertMany(chunksToInsert);\n        console.log(`Successfully inserted ${result.insertedCount} transcript chunks`);\n    } catch (error) {\n        console.error(\"Error in createTranscriptChunks:\", error);\n        throw new Error(`Failed to create transcript chunks: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n}\nasync function getTranscriptChunks(jobId) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    return transcriptChunksCollection.find({\n        jobId\n    }).sort({\n        startTimestamp: 1\n    }).toArray(); // Sort by start time\n}\nasync function updateTranscriptChunkEmbeddings(jobId, chunkId, embedding) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    const result = await transcriptChunksCollection.updateOne({\n        jobId,\n        chunkId\n    }, {\n        $set: {\n            embedding\n        }\n    });\n    return result.modifiedCount > 0;\n}\n// Add a new function to get user-specific transcript chunks\nasync function getUserTranscriptChunks(jobId, userId) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    return transcriptChunksCollection.find({\n        jobId,\n        userId\n    }).sort({\n        startTimestamp: 1\n    }).toArray();\n}\n// Add a function to verify transcript ownership\nasync function verifyTranscriptOwnership(jobId, userId) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const job = await videoJobsCollection.findOne({\n        jobId,\n        userId\n    });\n    return !!job;\n}\n// Add type-safe transcript retrieval function\nasync function getTranscriptChunksByVideoId(videoId, userId) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    return transcriptChunksCollection.find({\n        \"metadata.videoId\": videoId,\n        userId\n    }).toArray();\n}\n// Add function to verify transcript-videoId match\nasync function verifyTranscriptVideoId(jobId, videoId) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const job = await videoJobsCollection.findOne({\n        jobId,\n        \"processingMetadata.videoId\": videoId\n    });\n    return !!job;\n}\n// --- Q&A Cache Functions ---\nasync function getCachedQAResponse(jobId, normalizedQuestionText, modelUsed) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    // console.log(`CACHE_LOOKUP: jobId=${jobId}, question='${normalizedQuestionText}', model='${modelUsed}'`); // Debug\n    const response = await cachedVideoQACollection.findOne({\n        jobId,\n        questionTextNormalized: normalizedQuestionText,\n        modelUsed,\n        cacheType: \"user_question\"\n    });\n    // if (response) console.log(\"CACHE_HIT\"); else console.log(\"CACHE_MISS\"); // Debug\n    return response;\n}\nasync function getCachedProactiveAnalysis(jobId, analysisType, modelUsed) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    return cachedVideoQACollection.findOne({\n        jobId,\n        analysisType,\n        modelUsed,\n        cacheType: \"proactive_analysis\"\n    });\n}\nasync function saveQAResponse(jobId, questionOrAnalysisType, modelUsed, responseText, cacheType = \"user_question\" // Default to user_question\n) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    const now = new Date();\n    let filter;\n    let updateData;\n    if (cacheType === \"user_question\") {\n        filter = {\n            jobId,\n            questionTextNormalized: questionOrAnalysisType,\n            modelUsed,\n            cacheType\n        };\n        updateData = {\n            $set: {\n                responseText,\n                updatedAt: now\n            },\n            $setOnInsert: {\n                jobId,\n                questionTextNormalized: questionOrAnalysisType,\n                modelUsed,\n                cacheType,\n                createdAt: now\n            }\n        };\n    } else {\n        filter = {\n            jobId,\n            analysisType: questionOrAnalysisType,\n            modelUsed,\n            cacheType\n        };\n        updateData = {\n            $set: {\n                responseText,\n                updatedAt: now\n            },\n            $setOnInsert: {\n                jobId,\n                analysisType: questionOrAnalysisType,\n                modelUsed,\n                cacheType,\n                createdAt: now\n            }\n        };\n    }\n    try {\n        // console.log(`CACHE_SAVE: jobId=${jobId}, key='${questionOrAnalysisType}', model='${modelUsed}', type='${cacheType}'`); // Debug\n        await cachedVideoQACollection.updateOne(filter, updateData, {\n            upsert: true\n        });\n    // console.log(\"CACHE_SAVE successful\"); // Debug\n    } catch (error) {\n        console.error(\"Error saving Q&A response to cache:\", error);\n    // Decide if this error should be propagated or just logged\n    // For async background saves, logging might be sufficient.\n    }\n}\n// Optional: Function to clear MongoDB client connection (e.g., for graceful shutdown)\nasync function closeDatabaseConnection() {\n    if (client) {\n        await client.close();\n        client = null;\n        db = null;\n        console.log(\"MongoDB connection closed.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mongodb.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/openai.ts":
/*!***************************!*\
  !*** ./src/lib/openai.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OpenAIService: () => (/* binding */ OpenAIService),\n/* harmony export */   openAIService: () => (/* binding */ openAIService)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n// Environment variable check\nif (!process.env.OPENAI_API_KEY) {\n    console.warn(\"Warning: OPENAI_API_KEY environment variable is not set. OpenAIService will fail if instantiated and used.\");\n}\nclass OpenAIService {\n    constructor(model = \"gpt-3.5-turbo\"){\n        if (!process.env.OPENAI_API_KEY) {\n            throw new Error(\"CRITICAL: OpenAIService cannot be instantiated without OPENAI_API_KEY.\");\n        }\n        this.openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            apiKey: process.env.OPENAI_API_KEY\n        });\n        this.model = model;\n    }\n    async generateAnswer(context, question) {\n        console.log(\"OpenAI: Generating answer for question:\", question.substring(0, 50) + \"...\");\n        const contextString = context.map((c)=>`[${c.startTimestamp}s - ${c.endTimestamp}s] ${c.text}`).join(\"\\n\\n\"); // Using double newline for better separation in prompt\n        // System message defining the persona and general instructions\n        const systemMessageContent = `You are ChatPye, an AI-powered video learning companion. Your primary goal is to provide intelligent, insightful, and helpful answers based on the provided transcript of a video.\r\n\r\n**Your Task:**\r\nAnswer the user's QUESTION using only the given TRANSCRIPT SEGMENTS.\r\n\r\n**Key Instructions:**\r\n1.  **Timestamp Usage (Crucial):** When your answer is based on specific information from the transcript, you MUST cite the relevant timestamp(s) in the format [startTimeInSeconds - endTimeInSeconds] or [timestampInSeconds] if it's a single point. Integrate these timestamps naturally into your response. For example: \"The speaker mentions a key concept at [123s - 128s].\"\r\n2.  **Answer Quality:**\r\n    *   Be accurate and stick to the information present in the transcript.\r\n    *   Provide comprehensive yet concise answers.\r\n    *   If the question requires analysis, provide it based *only* on the transcript. Do not infer outside information.\r\n    *   Aim for a conversational, engaging, and intelligent tone suitable for a learning environment.\r\n3.  **Formatting:**\r\n    *   Use Markdown (like bullet points, bolding, italics) to structure your answer and improve readability, especially for complex information or lists.\r\n4.  **Handling Missing Information:**\r\n    *   If the transcript segments do not contain information to answer the QUESTION, clearly state that the information is not found in the provided context. Do not try to answer from external knowledge.`;\n        // User message providing the specific context and question\n        const userMessageContent = `TRANSCRIPT SEGMENTS:\r\n${contextString}\r\n\r\nQUESTION:\r\n${question}\r\n\r\nAnswer (Formatted in Markdown):`;\n        try {\n            // console.log(\"OpenAI: Calling chat.completions.create.\"); // Debug\n            const completion = await this.openai.chat.completions.create({\n                model: this.model,\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemMessageContent\n                    },\n                    {\n                        role: \"user\",\n                        content: userMessageContent\n                    }\n                ]\n            });\n            const textResponse = completion.choices[0]?.message?.content;\n            if (!textResponse) {\n                console.error(\"OpenAI API returned no text response:\", completion);\n                throw new Error(\"No text response from OpenAI API.\");\n            }\n            // console.log(\"OpenAI: Response received.\"); // Debug\n            return textResponse.trim();\n        } catch (error) {\n            console.error(\"Error generating answer from OpenAI:\", JSON.stringify(error, null, 2));\n            throw new Error(`Failed to generate answer from OpenAI: ${error.message || \"Unknown error\"}`);\n        }\n    }\n}\n// Create a singleton instance\nconst openAIService = new OpenAIService(); // Uses default \"gpt-3.5-turbo\"\n // If you want to use a different model by default, e.g., \"gpt-4\":\n // export const openAIService = new OpenAIService(\"gpt-4\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/openai.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/formdata-node","vendor-chunks/ms","vendor-chunks/openai","vendor-chunks/@anthropic-ai","vendor-chunks/form-data-encoder","vendor-chunks/node-fetch","vendor-chunks/agentkeepalive","vendor-chunks/@google","vendor-chunks/web-streams-polyfill","vendor-chunks/humanize-ms","vendor-chunks/event-target-shim","vendor-chunks/abort-controller"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fchat%2Froute&page=%2Fapi%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fchat%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=standalone&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();