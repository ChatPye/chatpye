"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/video/process/route";
exports.ids = ["app/api/video/process/route"];
exports.modules = {

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo%2Fprocess%2Froute&page=%2Fapi%2Fvideo%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo%2Fprocess%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo%2Fprocess%2Froute&page=%2Fapi%2Fvideo%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo%2Fprocess%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Deborah_Documents_Cursor_Projects_chatpye_src_app_api_video_process_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/video/process/route.ts */ \"(rsc)/./src/app/api/video/process/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/video/process/route\",\n        pathname: \"/api/video/process\",\n        filename: \"route\",\n        bundlePath: \"app/api/video/process/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Deborah\\\\Documents\\\\Cursor Projects\\\\chatpye\\\\src\\\\app\\\\api\\\\video\\\\process\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Deborah_Documents_Cursor_Projects_chatpye_src_app_api_video_process_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/video/process/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ2aWRlbyUyRnByb2Nlc3MlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnZpZGVvJTJGcHJvY2VzcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnZpZGVvJTJGcHJvY2VzcyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNEZWJvcmFoJTVDRG9jdW1lbnRzJTVDQ3Vyc29yJTIwUHJvamVjdHMlNUNjaGF0cHllJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNEZWJvcmFoJTVDRG9jdW1lbnRzJTVDQ3Vyc29yJTIwUHJvamVjdHMlNUNjaGF0cHllJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2dEO0FBQzdIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdHB5ZS8/MzYxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxEZWJvcmFoXFxcXERvY3VtZW50c1xcXFxDdXJzb3IgUHJvamVjdHNcXFxcY2hhdHB5ZVxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFx2aWRlb1xcXFxwcm9jZXNzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS92aWRlby9wcm9jZXNzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdmlkZW8vcHJvY2Vzc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdmlkZW8vcHJvY2Vzcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXERlYm9yYWhcXFxcRG9jdW1lbnRzXFxcXEN1cnNvciBQcm9qZWN0c1xcXFxjaGF0cHllXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHZpZGVvXFxcXHByb2Nlc3NcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvdmlkZW8vcHJvY2Vzcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo%2Fprocess%2Froute&page=%2Fapi%2Fvideo%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo%2Fprocess%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/video/process/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/video/process/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var _lib_mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/mongodb */ \"(rsc)/./src/lib/mongodb.ts\");\n/* harmony import */ var _lib_youtube__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/youtube */ \"(rsc)/./src/lib/youtube.ts\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _lib_embeddings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/embeddings */ \"(rsc)/./src/lib/embeddings.ts\");\n\n\n\n\n\n\n// Initialize Google AI\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_3__.GoogleGenerativeAI(process.env.GOOGLE_AI_KEY || \"\");\n// Process chunks in batches to avoid memory issues\nasync function processChunksInBatches(chunks, jobId, batchSize = 5) {\n    const totalChunks = chunks.length;\n    for(let i = 0; i < chunks.length; i += batchSize){\n        const batch = chunks.slice(i, i + batchSize);\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n            progress: `Processing chunks ${i + 1}-${Math.min(i + batchSize, totalChunks)} of ${totalChunks}...`\n        });\n        // Process batch in parallel\n        await Promise.all(batch.map(async (chunk)=>{\n            try {\n                const embedding = await (0,_lib_embeddings__WEBPACK_IMPORTED_MODULE_4__.generateEmbedding)(chunk.textContent);\n                await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateTranscriptChunkEmbeddings)(jobId, chunk.chunkId, embedding);\n            } catch (error) {\n                console.error(`Error processing chunk ${chunk.chunkId}:`, error);\n            // Continue with other chunks even if one fails\n            }\n        }));\n    }\n}\nasync function processVideo(jobId, youtubeUrl) {\n    try {\n        // Update job status to processing\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n            status: \"processing\",\n            progress: \"Checking video availability...\"\n        });\n        // Extract video ID\n        const videoId = (0,_lib_youtube__WEBPACK_IMPORTED_MODULE_2__.extractVideoId)(youtubeUrl);\n        if (!videoId) {\n            throw new Error(\"Invalid YouTube URL\");\n        }\n        // Check video details first\n        try {\n            const videoDetails = await (0,_lib_youtube__WEBPACK_IMPORTED_MODULE_2__.getVideoDetails)(videoId);\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                progress: `Processing video: ${videoDetails.title || \"Untitled\"}...`\n            });\n        } catch (error) {\n            console.error(\"Error fetching video details:\", error);\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                status: \"failed\",\n                transcriptStatus: \"error\",\n                progress: \"Could not verify video details. Please check if the video is available and public.\"\n            });\n            return;\n        }\n        // Update status to fetching transcript\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n            progress: \"Fetching transcript...\"\n        });\n        // Fetch transcript\n        const transcript = await (0,_lib_youtube__WEBPACK_IMPORTED_MODULE_2__.getYouTubeTranscript)(youtubeUrl);\n        if (!transcript || transcript.length === 0) {\n            // Instead of failing, mark as processed without transcript\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                status: \"completed\",\n                transcriptStatus: \"not_found\",\n                progress: \"Video processed without transcript. You can still chat about the video using Gemini.\"\n            });\n            return;\n        }\n        // Update status to processing transcript\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n            progress: \"Processing transcript...\"\n        });\n        // Create transcript chunks with a maximum size\n        const MAX_CHUNK_SIZE = 1000; // characters\n        const chunks = [];\n        let currentChunk = {\n            text: \"\",\n            start: 0,\n            duration: 0\n        };\n        for (const segment of transcript){\n            if (currentChunk.text.length + segment.text.length > MAX_CHUNK_SIZE) {\n                // Save current chunk if it has content\n                if (currentChunk.text) {\n                    chunks.push({\n                        jobId,\n                        chunkId: `${jobId}-${chunks.length}`,\n                        textContent: currentChunk.text.trim(),\n                        startTimestamp: currentChunk.start.toString(),\n                        endTimestamp: (currentChunk.start + currentChunk.duration).toString(),\n                        embedding: []\n                    });\n                }\n                // Start new chunk\n                currentChunk = {\n                    text: segment.text,\n                    start: segment.start,\n                    duration: segment.duration\n                };\n            } else {\n                // Add to current chunk\n                currentChunk.text += \" \" + segment.text;\n                currentChunk.duration += segment.duration;\n            }\n        }\n        // Add the last chunk if it has content\n        if (currentChunk.text) {\n            chunks.push({\n                jobId,\n                chunkId: `${jobId}-${chunks.length}`,\n                textContent: currentChunk.text.trim(),\n                startTimestamp: currentChunk.start.toString(),\n                endTimestamp: (currentChunk.start + currentChunk.duration).toString(),\n                embedding: []\n            });\n        }\n        // Only process if we have valid chunks\n        if (chunks.length > 0) {\n            // Store transcript chunks\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                progress: \"Storing transcript chunks...\"\n            });\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.createTranscriptChunks)(chunks);\n            // Process chunks in batches\n            await processChunksInBatches(chunks, jobId);\n            // Update job status\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                status: \"completed\",\n                transcriptStatus: \"found\",\n                progress: \"Processing complete\"\n            });\n        } else {\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                status: \"failed\",\n                transcriptStatus: \"not_found\",\n                progress: \"No valid transcript chunks found\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error processing video:\", error);\n        let errorMessage = \"Error during processing\";\n        if (error instanceof Error) {\n            if (error.message.includes(\"captions disabled\")) {\n                errorMessage = \"This video has captions disabled. Please try a different video with captions enabled.\";\n            } else if (error.message.includes(\"private\")) {\n                errorMessage = \"This video is private. Please try a public video.\";\n            } else if (error.message.includes(\"restricted\")) {\n                errorMessage = \"This video is restricted. Please try a different video.\";\n            } else if (error.message.includes(\"not found\")) {\n                errorMessage = \"Video not found. Please check the URL and try again.\";\n            } else {\n                errorMessage = error.message;\n            }\n        }\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n            status: \"failed\",\n            transcriptStatus: \"error\",\n            progress: errorMessage\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const { youtubeUrl } = await request.json();\n        if (!youtubeUrl) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"YouTube URL is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Generate a unique job ID\n        const jobId = (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n        // Create initial job record\n        const job = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.createVideoJob)({\n            jobId,\n            youtubeUrl,\n            status: \"pending\",\n            transcriptStatus: \"processing\",\n            progress: \"Starting processing...\"\n        });\n        // Start processing in the background\n        processVideo(jobId, youtubeUrl).catch((error)=>{\n            console.error(\"Background processing error:\", error);\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            status: \"success\",\n            message: \"Video processing started\",\n            jobId\n        });\n    } catch (error) {\n        console.error(\"Error in POST endpoint:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to process video\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS92aWRlby9wcm9jZXNzL3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBMkM7QUFDUDtBQUNvRjtBQUNsQztBQUMzQjtBQUNOO0FBRXJELHVCQUF1QjtBQUN2QixNQUFNWSxRQUFRLElBQUlGLHFFQUFrQkEsQ0FBQ0csUUFBUUMsR0FBRyxDQUFDQyxhQUFhLElBQUk7QUFFbEUsbURBQW1EO0FBQ25ELGVBQWVDLHVCQUF1QkMsTUFBYSxFQUFFQyxLQUFhLEVBQUVDLFlBQVksQ0FBQztJQUMvRSxNQUFNQyxjQUFjSCxPQUFPSSxNQUFNO0lBQ2pDLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJTCxPQUFPSSxNQUFNLEVBQUVDLEtBQUtILFVBQVc7UUFDakQsTUFBTUksUUFBUU4sT0FBT08sS0FBSyxDQUFDRixHQUFHQSxJQUFJSDtRQUNsQyxNQUFNZiw0REFBY0EsQ0FBQ2MsT0FBTztZQUMxQk8sVUFBVSxDQUFDLGtCQUFrQixFQUFFSCxJQUFJLEVBQUUsQ0FBQyxFQUFFSSxLQUFLQyxHQUFHLENBQUNMLElBQUlILFdBQVdDLGFBQWEsSUFBSSxFQUFFQSxZQUFZLEdBQUcsQ0FBQztRQUNyRztRQUVBLDRCQUE0QjtRQUM1QixNQUFNUSxRQUFRQyxHQUFHLENBQUNOLE1BQU1PLEdBQUcsQ0FBQyxPQUFPQztZQUNqQyxJQUFJO2dCQUNGLE1BQU1DLFlBQVksTUFBTXJCLGtFQUFpQkEsQ0FBQ29CLE1BQU1FLFdBQVc7Z0JBQzNELE1BQU0zQiw2RUFBK0JBLENBQUNZLE9BQU9hLE1BQU1HLE9BQU8sRUFBRUY7WUFDOUQsRUFBRSxPQUFPRyxPQUFPO2dCQUNkQyxRQUFRRCxLQUFLLENBQUMsQ0FBQyx1QkFBdUIsRUFBRUosTUFBTUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFQztZQUMxRCwrQ0FBK0M7WUFDakQ7UUFDRjtJQUNGO0FBQ0Y7QUFFQSxlQUFlRSxhQUFhbkIsS0FBYSxFQUFFb0IsVUFBa0I7SUFDM0QsSUFBSTtR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QUNGLE1BQU0sRUFBRXZCLFVBQVUsRUFBRSxHQUFHLE1BQU11QixRQUFRQyxJQUFJO1FBRXpDLElBQUksQ0FBQ3hCLFlBQVk7WUFDZixPQUFPdEMsa0ZBQVlBLENBQUM4RCxJQUFJLENBQ3RCO2dCQUFFM0IsT0FBTztZQUEwQixHQUNuQztnQkFBRUksUUFBUTtZQUFJO1FBRWxCO1FBRUEsMkJBQTJCO1FBQzNCLE1BQU1yQixRQUFRaEIsZ0RBQU1BO1FBRXBCLDRCQUE0QjtRQUM1QixNQUFNNkQsTUFBTSxNQUFNNUQsNERBQWNBLENBQUM7WUFDL0JlO1lBQ0FvQjtZQUNBQyxRQUFRO1lBQ1JLLGtCQUFrQjtZQUNsQm5CLFVBQVU7UUFDWjtRQUVBLHFDQUFxQztRQUNyQ1ksYUFBYW5CLE9BQU9vQixZQUFZMEIsS0FBSyxDQUFDN0IsQ0FBQUE7WUFDcENDLFFBQVFELEtBQUssQ0FBQyxnQ0FBZ0NBO1FBQ2hEO1FBRUEsT0FBT25DLGtGQUFZQSxDQUFDOEQsSUFBSSxDQUFDO1lBQ3ZCdkIsUUFBUTtZQUNSbUIsU0FBUztZQUNUeEM7UUFDRjtJQUNGLEVBQUUsT0FBT2lCLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLDJCQUEyQkE7UUFDekMsT0FBT25DLGtGQUFZQSxDQUFDOEQsSUFBSSxDQUN0QjtZQUNFM0IsT0FBTztZQUNQOEIsU0FBUzlCLGlCQUFpQk0sUUFBUU4sTUFBTXVCLE9BQU8sR0FBRztRQUNwRCxHQUNBO1lBQUVuQixRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRweWUvLi9zcmMvYXBwL2FwaS92aWRlby9wcm9jZXNzL3JvdXRlLnRzPzVkMTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xyXG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcclxuaW1wb3J0IHsgY3JlYXRlVmlkZW9Kb2IsIHVwZGF0ZVZpZGVvSm9iLCBjcmVhdGVUcmFuc2NyaXB0Q2h1bmtzLCB1cGRhdGVUcmFuc2NyaXB0Q2h1bmtFbWJlZGRpbmdzIH0gZnJvbSAnQC9saWIvbW9uZ29kYic7XHJcbmltcG9ydCB7IGdldFlvdVR1YmVUcmFuc2NyaXB0LCBleHRyYWN0VmlkZW9JZCwgZ2V0VmlkZW9EZXRhaWxzIH0gZnJvbSAnQC9saWIveW91dHViZSc7XHJcbmltcG9ydCB7IEdvb2dsZUdlbmVyYXRpdmVBSSB9IGZyb20gJ0Bnb29nbGUvZ2VuZXJhdGl2ZS1haSc7XHJcbmltcG9ydCB7IGdlbmVyYXRlRW1iZWRkaW5nIH0gZnJvbSAnQC9saWIvZW1iZWRkaW5ncyc7XHJcblxyXG4vLyBJbml0aWFsaXplIEdvb2dsZSBBSVxyXG5jb25zdCBnZW5BSSA9IG5ldyBHb29nbGVHZW5lcmF0aXZlQUkocHJvY2Vzcy5lbnYuR09PR0xFX0FJX0tFWSB8fCAnJyk7XHJcblxyXG4vLyBQcm9jZXNzIGNodW5rcyBpbiBiYXRjaGVzIHRvIGF2b2lkIG1lbW9yeSBpc3N1ZXNcclxuYXN5bmMgZnVuY3Rpb24gcHJvY2Vzc0NodW5rc0luQmF0Y2hlcyhjaHVua3M6IGFueVtdLCBqb2JJZDogc3RyaW5nLCBiYXRjaFNpemUgPSA1KSB7XHJcbiAgY29uc3QgdG90YWxDaHVua3MgPSBjaHVua3MubGVuZ3RoO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2h1bmtzLmxlbmd0aDsgaSArPSBiYXRjaFNpemUpIHtcclxuICAgIGNvbnN0IGJhdGNoID0gY2h1bmtzLnNsaWNlKGksIGkgKyBiYXRjaFNpemUpO1xyXG4gICAgYXdhaXQgdXBkYXRlVmlkZW9Kb2Ioam9iSWQsIHsgXHJcbiAgICAgIHByb2dyZXNzOiBgUHJvY2Vzc2luZyBjaHVua3MgJHtpICsgMX0tJHtNYXRoLm1pbihpICsgYmF0Y2hTaXplLCB0b3RhbENodW5rcyl9IG9mICR7dG90YWxDaHVua3N9Li4uYCBcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFByb2Nlc3MgYmF0Y2ggaW4gcGFyYWxsZWxcclxuICAgIGF3YWl0IFByb21pc2UuYWxsKGJhdGNoLm1hcChhc3luYyAoY2h1bmspID0+IHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBlbWJlZGRpbmcgPSBhd2FpdCBnZW5lcmF0ZUVtYmVkZGluZyhjaHVuay50ZXh0Q29udGVudCk7XHJcbiAgICAgICAgYXdhaXQgdXBkYXRlVHJhbnNjcmlwdENodW5rRW1iZWRkaW5ncyhqb2JJZCwgY2h1bmsuY2h1bmtJZCwgZW1iZWRkaW5nKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwcm9jZXNzaW5nIGNodW5rICR7Y2h1bmsuY2h1bmtJZH06YCwgZXJyb3IpO1xyXG4gICAgICAgIC8vIENvbnRpbnVlIHdpdGggb3RoZXIgY2h1bmtzIGV2ZW4gaWYgb25lIGZhaWxzXHJcbiAgICAgIH1cclxuICAgIH0pKTtcclxuICB9XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHByb2Nlc3NWaWRlbyhqb2JJZDogc3RyaW5nLCB5b3V0dWJlVXJsOiBzdHJpbmcpIHtcclxuICB0cnkge1xyXG4gICAgLy8gVXBkYXRlIGpvYiBzdGF0dXMgdG8gcHJvY2Vzc2luZ1xyXG4gICAgYXdhaXQgdXBkYXRlVmlkZW9Kb2Ioam9iSWQsIHsgc3RhdHVzOiAncHJvY2Vzc2luZycsIHByb2dyZXNzOiAnQ2hlY2tpbmcgdmlkZW8gYXZhaWxhYmlsaXR5Li4uJyB9KTtcclxuXHJcbiAgICAvLyBFeHRyYWN0IHZpZGVvIElEXHJcbiAgICBjb25zdCB2aWRlb0lkID0gZXh0cmFjdFZpZGVvSWQoeW91dHViZVVybCk7XHJcbiAgICBpZiAoIXZpZGVvSWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIFlvdVR1YmUgVVJMJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgdmlkZW8gZGV0YWlscyBmaXJzdFxyXG4gICAgdHJ5IHtcclxuICAgICAgY29uc3QgdmlkZW9EZXRhaWxzID0gYXdhaXQgZ2V0VmlkZW9EZXRhaWxzKHZpZGVvSWQpO1xyXG4gICAgICBhd2FpdCB1cGRhdGVWaWRlb0pvYihqb2JJZCwgeyBcclxuICAgICAgICBwcm9ncmVzczogYFByb2Nlc3NpbmcgdmlkZW86ICR7dmlkZW9EZXRhaWxzLnRpdGxlIHx8ICdVbnRpdGxlZCd9Li4uYCBcclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB2aWRlbyBkZXRhaWxzOicsIGVycm9yKTtcclxuICAgICAgYXdhaXQgdXBkYXRlVmlkZW9Kb2Ioam9iSWQsIHsgXHJcbiAgICAgICAgc3RhdHVzOiAnZmFpbGVkJyxcclxuICAgICAgICB0cmFuc2NyaXB0U3RhdHVzOiAnZXJyb3InLFxyXG4gICAgICAgIHByb2dyZXNzOiAnQ291bGQgbm90IHZlcmlmeSB2aWRlbyBkZXRhaWxzLiBQbGVhc2UgY2hlY2sgaWYgdGhlIHZpZGVvIGlzIGF2YWlsYWJsZSBhbmQgcHVibGljLidcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgc3RhdHVzIHRvIGZldGNoaW5nIHRyYW5zY3JpcHRcclxuICAgIGF3YWl0IHVwZGF0ZVZpZGVvSm9iKGpvYklkLCB7IHByb2dyZXNzOiAnRmV0Y2hpbmcgdHJhbnNjcmlwdC4uLicgfSk7XHJcblxyXG4gICAgLy8gRmV0Y2ggdHJhbnNjcmlwdFxyXG4gICAgY29uc3QgdHJhbnNjcmlwdCA9IGF3YWl0IGdldFlvdVR1YmVUcmFuc2NyaXB0KHlvdXR1YmVVcmwpO1xyXG4gICAgXHJcbiAgICBpZiAoIXRyYW5zY3JpcHQgfHwgdHJhbnNjcmlwdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgLy8gSW5zdGVhZCBvZiBmYWlsaW5nLCBtYXJrIGFzIHByb2Nlc3NlZCB3aXRob3V0IHRyYW5zY3JpcHRcclxuICAgICAgYXdhaXQgdXBkYXRlVmlkZW9Kb2Ioam9iSWQsIHsgXHJcbiAgICAgICAgc3RhdHVzOiAnY29tcGxldGVkJyxcclxuICAgICAgICB0cmFuc2NyaXB0U3RhdHVzOiAnbm90X2ZvdW5kJyxcclxuICAgICAgICBwcm9ncmVzczogJ1ZpZGVvIHByb2Nlc3NlZCB3aXRob3V0IHRyYW5zY3JpcHQuIFlvdSBjYW4gc3RpbGwgY2hhdCBhYm91dCB0aGUgdmlkZW8gdXNpbmcgR2VtaW5pLidcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAvLyBVcGRhdGUgc3RhdHVzIHRvIHByb2Nlc3NpbmcgdHJhbnNjcmlwdFxyXG4gICAgYXdhaXQgdXBkYXRlVmlkZW9Kb2Ioam9iSWQsIHsgcHJvZ3Jlc3M6ICdQcm9jZXNzaW5nIHRyYW5zY3JpcHQuLi4nIH0pO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0cmFuc2NyaXB0IGNodW5rcyB3aXRoIGEgbWF4aW11bSBzaXplXHJcbiAgICBjb25zdCBNQVhfQ0hVTktfU0laRSA9IDEwMDA7IC8vIGNoYXJhY3RlcnNcclxuICAgIGNvbnN0IGNodW5rcyA9IFtdO1xyXG4gICAgbGV0IGN1cnJlbnRDaHVuayA9IHtcclxuICAgICAgdGV4dDogJycsXHJcbiAgICAgIHN0YXJ0OiAwLFxyXG4gICAgICBkdXJhdGlvbjogMFxyXG4gICAgfTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHNlZ21lbnQgb2YgdHJhbnNjcmlwdCkge1xyXG4gICAgICBpZiAoY3VycmVudENodW5rLnRleHQubGVuZ3RoICsgc2VnbWVudC50ZXh0Lmxlbmd0aCA+IE1BWF9DSFVOS19TSVpFKSB7XHJcbiAgICAgICAgLy8gU2F2ZSBjdXJyZW50IGNodW5rIGlmIGl0IGhhcyBjb250ZW50XHJcbiAgICAgICAgaWYgKGN1cnJlbnRDaHVuay50ZXh0KSB7XHJcbiAgICAgICAgICBjaHVua3MucHVzaCh7XHJcbiAgICAgICAgICAgIGpvYklkLFxyXG4gICAgICAgICAgICBjaHVua0lkOiBgJHtqb2JJZH0tJHtjaHVua3MubGVuZ3RofWAsXHJcbiAgICAgICAgICAgIHRleHRDb250ZW50OiBjdXJyZW50Q2h1bmsudGV4dC50cmltKCksXHJcbiAgICAgICAgICAgIHN0YXJ0VGltZXN0YW1wOiBjdXJyZW50Q2h1bmsuc3RhcnQudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgZW5kVGltZXN0YW1wOiAoY3VycmVudENodW5rLnN0YXJ0ICsgY3VycmVudENodW5rLmR1cmF0aW9uKS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICBlbWJlZGRpbmc6IFtdXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU3RhcnQgbmV3IGNodW5rXHJcbiAgICAgICAgY3VycmVudENodW5rID0ge1xyXG4gICAgICAgICAgdGV4dDogc2VnbWVudC50ZXh0LFxyXG4gICAgICAgICAgc3RhcnQ6IHNlZ21lbnQuc3RhcnQsXHJcbiAgICAgICAgICBkdXJhdGlvbjogc2VnbWVudC5kdXJhdGlvblxyXG4gICAgICAgIH07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gQWRkIHRvIGN1cnJlbnQgY2h1bmtcclxuICAgICAgICBjdXJyZW50Q2h1bmsudGV4dCArPSAnICcgKyBzZWdtZW50LnRleHQ7XHJcbiAgICAgICAgY3VycmVudENodW5rLmR1cmF0aW9uICs9IHNlZ21lbnQuZHVyYXRpb247XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBBZGQgdGhlIGxhc3QgY2h1bmsgaWYgaXQgaGFzIGNvbnRlbnRcclxuICAgIGlmIChjdXJyZW50Q2h1bmsudGV4dCkge1xyXG4gICAgICBjaHVua3MucHVzaCh7XHJcbiAgICAgICAgam9iSWQsXHJcbiAgICAgICAgY2h1bmtJZDogYCR7am9iSWR9LSR7Y2h1bmtzLmxlbmd0aH1gLFxyXG4gICAgICAgIHRleHRDb250ZW50OiBjdXJyZW50Q2h1bmsudGV4dC50cmltKCksXHJcbiAgICAgICAgc3RhcnRUaW1lc3RhbXA6IGN1cnJlbnRDaHVuay5zdGFydC50b1N0cmluZygpLFxyXG4gICAgICAgIGVuZFRpbWVzdGFtcDogKGN1cnJlbnRDaHVuay5zdGFydCArIGN1cnJlbnRDaHVuay5kdXJhdGlvbikudG9TdHJpbmcoKSxcclxuICAgICAgICBlbWJlZGRpbmc6IFtdXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIE9ubHkgcHJvY2VzcyBpZiB3ZSBoYXZlIHZhbGlkIGNodW5rc1xyXG4gICAgaWYgKGNodW5rcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIC8vIFN0b3JlIHRyYW5zY3JpcHQgY2h1bmtzXHJcbiAgICAgIGF3YWl0IHVwZGF0ZVZpZGVvSm9iKGpvYklkLCB7IHByb2dyZXNzOiAnU3RvcmluZyB0cmFuc2NyaXB0IGNodW5rcy4uLicgfSk7XHJcbiAgICAgIGF3YWl0IGNyZWF0ZVRyYW5zY3JpcHRDaHVua3MoY2h1bmtzKTtcclxuXHJcbiAgICAgIC8vIFByb2Nlc3MgY2h1bmtzIGluIGJhdGNoZXNcclxuICAgICAgYXdhaXQgcHJvY2Vzc0NodW5rc0luQmF0Y2hlcyhjaHVua3MsIGpvYklkKTtcclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBqb2Igc3RhdHVzXHJcbiAgICAgIGF3YWl0IHVwZGF0ZVZpZGVvSm9iKGpvYklkLCB7XHJcbiAgICAgICAgc3RhdHVzOiAnY29tcGxldGVkJyxcclxuICAgICAgICB0cmFuc2NyaXB0U3RhdHVzOiAnZm91bmQnLFxyXG4gICAgICAgIHByb2dyZXNzOiAnUHJvY2Vzc2luZyBjb21wbGV0ZSdcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhd2FpdCB1cGRhdGVWaWRlb0pvYihqb2JJZCwge1xyXG4gICAgICAgIHN0YXR1czogJ2ZhaWxlZCcsXHJcbiAgICAgICAgdHJhbnNjcmlwdFN0YXR1czogJ25vdF9mb3VuZCcsXHJcbiAgICAgICAgcHJvZ3Jlc3M6ICdObyB2YWxpZCB0cmFuc2NyaXB0IGNodW5rcyBmb3VuZCdcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3NpbmcgdmlkZW86JywgZXJyb3IpO1xyXG4gICAgbGV0IGVycm9yTWVzc2FnZSA9ICdFcnJvciBkdXJpbmcgcHJvY2Vzc2luZyc7XHJcbiAgICBcclxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdjYXB0aW9ucyBkaXNhYmxlZCcpKSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gJ1RoaXMgdmlkZW8gaGFzIGNhcHRpb25zIGRpc2FibGVkLiBQbGVhc2UgdHJ5IGEgZGlmZmVyZW50IHZpZGVvIHdpdGggY2FwdGlvbnMgZW5hYmxlZC4nO1xyXG4gICAgICB9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ3ByaXZhdGUnKSkge1xyXG4gICAgICAgIGVycm9yTWVzc2FnZSA9ICdUaGlzIHZpZGVvIGlzIHByaXZhdGUuIFBsZWFzZSB0cnkgYSBwdWJsaWMgdmlkZW8uJztcclxuICAgICAgfSBlbHNlIGlmIChlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdyZXN0cmljdGVkJykpIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSAnVGhpcyB2aWRlbyBpcyByZXN0cmljdGVkLiBQbGVhc2UgdHJ5IGEgZGlmZmVyZW50IHZpZGVvLic7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnbm90IGZvdW5kJykpIHtcclxuICAgICAgICBlcnJvck1lc3NhZ2UgPSAnVmlkZW8gbm90IGZvdW5kLiBQbGVhc2UgY2hlY2sgdGhlIFVSTCBhbmQgdHJ5IGFnYWluLic7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGF3YWl0IHVwZGF0ZVZpZGVvSm9iKGpvYklkLCB7XHJcbiAgICAgIHN0YXR1czogJ2ZhaWxlZCcsXHJcbiAgICAgIHRyYW5zY3JpcHRTdGF0dXM6ICdlcnJvcicsXHJcbiAgICAgIHByb2dyZXNzOiBlcnJvck1lc3NhZ2VcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogUmVxdWVzdCkge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCB7IHlvdXR1YmVVcmwgfSA9IGF3YWl0IHJlcXVlc3QuanNvbigpO1xyXG4gICAgXHJcbiAgICBpZiAoIXlvdXR1YmVVcmwpIHtcclxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxyXG4gICAgICAgIHsgZXJyb3I6ICdZb3VUdWJlIFVSTCBpcyByZXF1aXJlZCcgfSxcclxuICAgICAgICB7IHN0YXR1czogNDAwIH1cclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBqb2IgSURcclxuICAgIGNvbnN0IGpvYklkID0gdXVpZHY0KCk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGluaXRpYWwgam9iIHJlY29yZFxyXG4gICAgY29uc3Qgam9iID0gYXdhaXQgY3JlYXRlVmlkZW9Kb2Ioe1xyXG4gICAgICBqb2JJZCxcclxuICAgICAgeW91dHViZVVybCxcclxuICAgICAgc3RhdHVzOiAncGVuZGluZycsXHJcbiAgICAgIHRyYW5zY3JpcHRTdGF0dXM6ICdwcm9jZXNzaW5nJyxcclxuICAgICAgcHJvZ3Jlc3M6ICdTdGFydGluZyBwcm9jZXNzaW5nLi4uJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gU3RhcnQgcHJvY2Vzc2luZyBpbiB0aGUgYmFja2dyb3VuZFxyXG4gICAgcHJvY2Vzc1ZpZGVvKGpvYklkLCB5b3V0dWJlVXJsKS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0JhY2tncm91bmQgcHJvY2Vzc2luZyBlcnJvcjonLCBlcnJvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xyXG4gICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcclxuICAgICAgbWVzc2FnZTogJ1ZpZGVvIHByb2Nlc3Npbmcgc3RhcnRlZCcsXHJcbiAgICAgIGpvYklkXHJcbiAgICB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gUE9TVCBlbmRwb2ludDonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXHJcbiAgICAgIHsgXHJcbiAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gcHJvY2VzcyB2aWRlbycsXHJcbiAgICAgICAgZGV0YWlsczogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcclxuICAgICAgfSxcclxuICAgICAgeyBzdGF0dXM6IDUwMCB9XHJcbiAgICApO1xyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwidjQiLCJ1dWlkdjQiLCJjcmVhdGVWaWRlb0pvYiIsInVwZGF0ZVZpZGVvSm9iIiwiY3JlYXRlVHJhbnNjcmlwdENodW5rcyIsInVwZGF0ZVRyYW5zY3JpcHRDaHVua0VtYmVkZGluZ3MiLCJnZXRZb3VUdWJlVHJhbnNjcmlwdCIsImV4dHJhY3RWaWRlb0lkIiwiZ2V0VmlkZW9EZXRhaWxzIiwiR29vZ2xlR2VuZXJhdGl2ZUFJIiwiZ2VuZXJhdGVFbWJlZGRpbmciLCJnZW5BSSIsInByb2Nlc3MiLCJlbnYiLCJHT09HTEVfQUlfS0VZIiwicHJvY2Vzc0NodW5rc0luQmF0Y2hlcyIsImNodW5rcyIsImpvYklkIiwiYmF0Y2hTaXplIiwidG90YWxDaHVua3MiLCJsZW5ndGgiLCJpIiwiYmF0Y2giLCJzbGljZSIsInByb2dyZXNzIiwiTWF0aCIsIm1pbiIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJjaHVuayIsImVtYmVkZGluZyIsInRleHRDb250ZW50IiwiY2h1bmtJZCIsImVycm9yIiwiY29uc29sZSIsInByb2Nlc3NWaWRlbyIsInlvdXR1YmVVcmwiLCJzdGF0dXMiLCJ2aWRlb0lkIiwiRXJyb3IiLCJ2aWRlb0RldGFpbHMiLCJ0aXRsZSIsInRyYW5zY3JpcHRTdGF0dXMiLCJ0cmFuc2NyaXB0IiwiTUFYX0NIVU5LX1NJWkUiLCJjdXJyZW50Q2h1bmsiLCJ0ZXh0Iiwic3RhcnQiLCJkdXJhdGlvbiIsInNlZ21lbnQiLCJwdXNoIiwidHJpbSIsInN0YXJ0VGltZXN0YW1wIiwidG9TdHJpbmciLCJlbmRUaW1lc3RhbXAiLCJlcnJvck1lc3NhZ2UiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJQT1NUIiwicmVxdWVzdCIsImpzb24iLCJqb2IiLCJjYXRjaCIsImRldGFpbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/video/process/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/embeddings.ts":
/*!*******************************!*\
  !*** ./src/lib/embeddings.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findRelevantChunks: () => (/* binding */ findRelevantChunks),\n/* harmony export */   generateEmbedding: () => (/* binding */ generateEmbedding)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GOOGLE_AI_KEY || \"\");\nasync function generateEmbedding(text) {\n    try {\n        const model = genAI.getGenerativeModel({\n            model: \"embedding-001\"\n        });\n        const result = await model.embedContent(text);\n        const embedding = result.embedding.values;\n        return embedding;\n    } catch (error) {\n        console.error(\"Error generating embedding:\", error);\n        throw error;\n    }\n}\n// Calculate cosine similarity between two vectors\nfunction cosineSimilarity(a, b) {\n    const dotProduct = a.reduce((sum, val, i)=>sum + val * b[i], 0);\n    const magnitudeA = Math.sqrt(a.reduce((sum, val)=>sum + val * val, 0));\n    const magnitudeB = Math.sqrt(b.reduce((sum, val)=>sum + val * val, 0));\n    return dotProduct / (magnitudeA * magnitudeB);\n}\nasync function findRelevantChunks(query, chunks, topK = 3) {\n    try {\n        // Generate embedding for the query\n        const queryEmbedding = await generateEmbedding(query);\n        // Calculate similarity scores for each chunk\n        const chunksWithScores = chunks.map((chunk)=>({\n                chunk,\n                score: cosineSimilarity(queryEmbedding, chunk.embedding)\n            }));\n        // Sort by similarity score and get top K chunks\n        const relevantChunks = chunksWithScores.sort((a, b)=>b.score - a.score).slice(0, topK).map((item)=>item.chunk);\n        return relevantChunks;\n    } catch (error) {\n        console.error(\"Error finding relevant chunks:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2VtYmVkZGluZ3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBRzNELE1BQU1DLFFBQVEsSUFBSUQscUVBQWtCQSxDQUFDRSxRQUFRQyxHQUFHLENBQUNDLGFBQWEsSUFBSTtBQUUzRCxlQUFlQyxrQkFBa0JDLElBQVk7SUFDbEQsSUFBSTtRQUNGLE1BQU1DLFFBQVFOLE1BQU1PLGtCQUFrQixDQUFDO1lBQUVELE9BQU87UUFBZ0I7UUFDaEUsTUFBTUUsU0FBUyxNQUFNRixNQUFNRyxZQUFZLENBQUNKO1FBQ3hDLE1BQU1LLFlBQVlGLE9BQU9FLFNBQVMsQ0FBQ0MsTUFBTTtRQUN6QyxPQUFPRDtJQUNULEVBQUUsT0FBT0UsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxNQUFNQTtJQUNSO0FBQ0Y7QUFFQSxrREFBa0Q7QUFDbEQsU0FBU0UsaUJBQWlCQyxDQUFXLEVBQUVDLENBQVc7SUFDaEQsTUFBTUMsYUFBYUYsRUFBRUcsTUFBTSxDQUFDLENBQUNDLEtBQUtDLEtBQUtDLElBQU1GLE1BQU1DLE1BQU1KLENBQUMsQ0FBQ0ssRUFBRSxFQUFFO0lBQy9ELE1BQU1DLGFBQWFDLEtBQUtDLElBQUksQ0FBQ1QsRUFBRUcsTUFBTSxDQUFDLENBQUNDLEtBQUtDLE1BQVFELE1BQU1DLE1BQU1BLEtBQUs7SUFDckUsTUFBTUssYUFBYUYsS0FBS0MsSUFBSSxDQUFDUixFQUFFRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsTUFBTUEsS0FBSztJQUNyRSxPQUFPSCxhQUFjSyxDQUFBQSxhQUFhRyxVQUFTO0FBQzdDO0FBRU8sZUFBZUMsbUJBQ3BCQyxLQUFhLEVBQ2JDLE1BQXlCLEVBQ3pCQyxPQUFlLENBQUM7SUFFaEIsSUFBSTtRQUNGLG1DQUFtQztRQUNuQyxNQUFNQyxpQkFBaUIsTUFBTTFCLGtCQUFrQnVCO1FBRS9DLDZDQUE2QztRQUM3QyxNQUFNSSxtQkFBbUJILE9BQU9JLEdBQUcsQ0FBQ0MsQ0FBQUEsUUFBVTtnQkFDNUNBO2dCQUNBQyxPQUFPcEIsaUJBQWlCZ0IsZ0JBQWdCRyxNQUFNdkIsU0FBUztZQUN6RDtRQUVBLGdEQUFnRDtRQUNoRCxNQUFNeUIsaUJBQWlCSixpQkFDcEJLLElBQUksQ0FBQyxDQUFDckIsR0FBR0MsSUFBTUEsRUFBRWtCLEtBQUssR0FBR25CLEVBQUVtQixLQUFLLEVBQ2hDRyxLQUFLLENBQUMsR0FBR1IsTUFDVEcsR0FBRyxDQUFDTSxDQUFBQSxPQUFRQSxLQUFLTCxLQUFLO1FBRXpCLE9BQU9FO0lBQ1QsRUFBRSxPQUFPdkIsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxNQUFNQTtJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0cHllLy4vc3JjL2xpYi9lbWJlZGRpbmdzLnRzP2JjZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJIH0gZnJvbSAnQGdvb2dsZS9nZW5lcmF0aXZlLWFpJztcclxuaW1wb3J0IHsgVHJhbnNjcmlwdENodW5rIH0gZnJvbSAnLi9tb25nb2RiJztcclxuXHJcbmNvbnN0IGdlbkFJID0gbmV3IEdvb2dsZUdlbmVyYXRpdmVBSShwcm9jZXNzLmVudi5HT09HTEVfQUlfS0VZIHx8ICcnKTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUVtYmVkZGluZyh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcltdPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IG1vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZW1iZWRkaW5nLTAwMVwiIH0pO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9kZWwuZW1iZWRDb250ZW50KHRleHQpO1xyXG4gICAgY29uc3QgZW1iZWRkaW5nID0gcmVzdWx0LmVtYmVkZGluZy52YWx1ZXM7XHJcbiAgICByZXR1cm4gZW1iZWRkaW5nO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIGVtYmVkZGluZzonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbi8vIENhbGN1bGF0ZSBjb3NpbmUgc2ltaWxhcml0eSBiZXR3ZWVuIHR3byB2ZWN0b3JzXHJcbmZ1bmN0aW9uIGNvc2luZVNpbWlsYXJpdHkoYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogbnVtYmVyIHtcclxuICBjb25zdCBkb3RQcm9kdWN0ID0gYS5yZWR1Y2UoKHN1bSwgdmFsLCBpKSA9PiBzdW0gKyB2YWwgKiBiW2ldLCAwKTtcclxuICBjb25zdCBtYWduaXR1ZGVBID0gTWF0aC5zcXJ0KGEucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsICogdmFsLCAwKSk7XHJcbiAgY29uc3QgbWFnbml0dWRlQiA9IE1hdGguc3FydChiLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCAqIHZhbCwgMCkpO1xyXG4gIHJldHVybiBkb3RQcm9kdWN0IC8gKG1hZ25pdHVkZUEgKiBtYWduaXR1ZGVCKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRSZWxldmFudENodW5rcyhcclxuICBxdWVyeTogc3RyaW5nLFxyXG4gIGNodW5rczogVHJhbnNjcmlwdENodW5rW10sXHJcbiAgdG9wSzogbnVtYmVyID0gM1xyXG4pOiBQcm9taXNlPFRyYW5zY3JpcHRDaHVua1tdPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEdlbmVyYXRlIGVtYmVkZGluZyBmb3IgdGhlIHF1ZXJ5XHJcbiAgICBjb25zdCBxdWVyeUVtYmVkZGluZyA9IGF3YWl0IGdlbmVyYXRlRW1iZWRkaW5nKHF1ZXJ5KTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgc2ltaWxhcml0eSBzY29yZXMgZm9yIGVhY2ggY2h1bmtcclxuICAgIGNvbnN0IGNodW5rc1dpdGhTY29yZXMgPSBjaHVua3MubWFwKGNodW5rID0+ICh7XHJcbiAgICAgIGNodW5rLFxyXG4gICAgICBzY29yZTogY29zaW5lU2ltaWxhcml0eShxdWVyeUVtYmVkZGluZywgY2h1bmsuZW1iZWRkaW5nKVxyXG4gICAgfSkpO1xyXG5cclxuICAgIC8vIFNvcnQgYnkgc2ltaWxhcml0eSBzY29yZSBhbmQgZ2V0IHRvcCBLIGNodW5rc1xyXG4gICAgY29uc3QgcmVsZXZhbnRDaHVua3MgPSBjaHVua3NXaXRoU2NvcmVzXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnNjb3JlIC0gYS5zY29yZSlcclxuICAgICAgLnNsaWNlKDAsIHRvcEspXHJcbiAgICAgIC5tYXAoaXRlbSA9PiBpdGVtLmNodW5rKTtcclxuXHJcbiAgICByZXR1cm4gcmVsZXZhbnRDaHVua3M7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZpbmRpbmcgcmVsZXZhbnQgY2h1bmtzOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiR29vZ2xlR2VuZXJhdGl2ZUFJIiwiZ2VuQUkiLCJwcm9jZXNzIiwiZW52IiwiR09PR0xFX0FJX0tFWSIsImdlbmVyYXRlRW1iZWRkaW5nIiwidGV4dCIsIm1vZGVsIiwiZ2V0R2VuZXJhdGl2ZU1vZGVsIiwicmVzdWx0IiwiZW1iZWRDb250ZW50IiwiZW1iZWRkaW5nIiwidmFsdWVzIiwiZXJyb3IiLCJjb25zb2xlIiwiY29zaW5lU2ltaWxhcml0eSIsImEiLCJiIiwiZG90UHJvZHVjdCIsInJlZHVjZSIsInN1bSIsInZhbCIsImkiLCJtYWduaXR1ZGVBIiwiTWF0aCIsInNxcnQiLCJtYWduaXR1ZGVCIiwiZmluZFJlbGV2YW50Q2h1bmtzIiwicXVlcnkiLCJjaHVua3MiLCJ0b3BLIiwicXVlcnlFbWJlZGRpbmciLCJjaHVua3NXaXRoU2NvcmVzIiwibWFwIiwiY2h1bmsiLCJzY29yZSIsInJlbGV2YW50Q2h1bmtzIiwic29ydCIsInNsaWNlIiwiaXRlbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/embeddings.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mongodb.ts":
/*!****************************!*\
  !*** ./src/lib/mongodb.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabaseConnection: () => (/* binding */ closeDatabaseConnection),\n/* harmony export */   connectToDatabase: () => (/* binding */ connectToDatabase),\n/* harmony export */   createTranscriptChunks: () => (/* binding */ createTranscriptChunks),\n/* harmony export */   createVideoJob: () => (/* binding */ createVideoJob),\n/* harmony export */   getCachedProactiveAnalysis: () => (/* binding */ getCachedProactiveAnalysis),\n/* harmony export */   getCachedQAResponse: () => (/* binding */ getCachedQAResponse),\n/* harmony export */   getCollections: () => (/* binding */ getCollections),\n/* harmony export */   getTranscriptChunks: () => (/* binding */ getTranscriptChunks),\n/* harmony export */   getVideoJob: () => (/* binding */ getVideoJob),\n/* harmony export */   saveQAResponse: () => (/* binding */ saveQAResponse),\n/* harmony export */   updateTranscriptChunkEmbeddings: () => (/* binding */ updateTranscriptChunkEmbeddings),\n/* harmony export */   updateVideoJob: () => (/* binding */ updateVideoJob)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst MONGODB_URI = process.env.MONGODB_URI;\nconst MONGODB_DB_NAME = process.env.MONGODB_DB_NAME || \"chatpye_db\"; // Default DB name\nif (!MONGODB_URI) {\n    throw new Error(\"Please define the MONGODB_URI environment variable in .env.local\");\n}\nlet client = null;\nlet db = null;\nconst collections = {};\nasync function connectToDatabase() {\n    if (db && client) {\n        // TODO: Verify client connection state if possible, e.g. client.isConnected()\n        // For serverless, creating new connections per request or short-lived connections might be okay.\n        // For long-running servers, maintaining a persistent connection is better.\n        // This simple check assumes client remains connected.\n        return db;\n    }\n    if (!MONGODB_URI) {\n        throw new Error(\"MongoDB URI is not defined.\");\n    }\n    client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(MONGODB_URI, {\n        serverApi: mongodb__WEBPACK_IMPORTED_MODULE_0__.ServerApiVersion.v1,\n        tls: true,\n        tlsAllowInvalidCertificates: true,\n        tlsAllowInvalidHostnames: true,\n        maxPoolSize: 50,\n        minPoolSize: 10,\n        maxIdleTimeMS: 60000,\n        connectTimeoutMS: 30000,\n        socketTimeoutMS: 45000,\n        retryWrites: true,\n        retryReads: true,\n        directConnection: false\n    });\n    try {\n        await client.connect();\n        db = client.db(MONGODB_DB_NAME);\n        console.log(\"Successfully connected to MongoDB.\");\n        // Initialize collections\n        collections.videoJobsCollection = db.collection(\"videoJobs\");\n        collections.transcriptChunksCollection = db.collection(\"transcriptChunks\");\n        collections.cachedVideoQACollection = db.collection(\"cachedVideoQA\");\n        // Create Indexes (idempotent - only creates if they don't exist)\n        await collections.videoJobsCollection.createIndex({\n            jobId: 1\n        }, {\n            unique: true\n        });\n        await collections.transcriptChunksCollection.createIndex({\n            jobId: 1,\n            chunkId: 1\n        }, {\n            unique: true\n        });\n        await collections.transcriptChunksCollection.createIndex({\n            jobId: 1\n        }); // For fetching all chunks for a job\n        await collections.cachedVideoQACollection.createIndex({\n            jobId: 1,\n            questionTextNormalized: 1,\n            modelUsed: 1,\n            cacheType: 1\n        }, {\n            name: \"user_question_cache_idx\"\n        });\n        await collections.cachedVideoQACollection.createIndex({\n            jobId: 1,\n            analysisType: 1,\n            modelUsed: 1,\n            cacheType: 1\n        }, {\n            name: \"proactive_analysis_cache_idx\"\n        });\n        return db;\n    } catch (error) {\n        console.error(\"Failed to connect to MongoDB:\", error);\n        client = null; // Reset client on failure\n        db = null; // Reset db on failure\n        // Provide more specific error messages\n        if (error instanceof Error) {\n            if (error.message.includes(\"ECONNREFUSED\")) {\n                throw new Error(\"Could not connect to MongoDB server. Please check if the server is running and accessible.\");\n            } else if (error.message.includes(\"Authentication failed\")) {\n                throw new Error(\"MongoDB authentication failed. Please check your credentials.\");\n            } else if (error.message.includes(\"Invalid URI\")) {\n                throw new Error(\"Invalid MongoDB URI. Please check your connection string.\");\n            } else if (error.message.includes(\"TLS\")) {\n                throw new Error(\"TLS connection failed. Please check your SSL/TLS configuration.\");\n            }\n        }\n        throw new Error(`MongoDB connection error: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n    }\n}\n// Export a function to get specific collections, ensuring DB connection\nasync function getCollections() {\n    if (!db || !client) {\n        await connectToDatabase();\n    }\n    if (!collections.videoJobsCollection || !collections.transcriptChunksCollection || !collections.cachedVideoQACollection) {\n        // This might happen if connectToDatabase was called but collections weren't set (shouldn't occur with current logic)\n        // Or if db connection was lost and re-established without re-setting collections object.\n        // For simplicity, re-run connectToDatabase which also sets collections.\n        await connectToDatabase();\n    }\n    return collections;\n}\n// --- Video Job Functions ---\nasync function createVideoJob(jobData) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const newJob = {\n        ...jobData,\n        status: jobData.status || \"pending\",\n        createdAt: new Date(),\n        updatedAt: new Date()\n    };\n    const result = await videoJobsCollection.insertOne(newJob);\n    if (!result.insertedId) {\n        throw new Error(\"Failed to create video job.\");\n    }\n    return {\n        ...newJob,\n        _id: result.insertedId\n    };\n}\nasync function getVideoJob(jobId) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    return videoJobsCollection.findOne({\n        jobId\n    });\n}\nasync function updateVideoJob(jobId, updates) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const result = await videoJobsCollection.updateOne({\n        jobId\n    }, {\n        $set: {\n            ...updates,\n            updatedAt: new Date()\n        }\n    });\n    return result.modifiedCount > 0;\n}\n// --- Transcript Chunk Functions ---\nasync function createTranscriptChunks(chunksData) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    if (chunksData.length === 0) return;\n    const chunksToInsert = chunksData.map((chunk)=>({\n            ...chunk,\n            createdAt: new Date()\n        }));\n    await transcriptChunksCollection.insertMany(chunksToInsert);\n}\nasync function getTranscriptChunks(jobId) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    return transcriptChunksCollection.find({\n        jobId\n    }).sort({\n        startTimestamp: 1\n    }).toArray(); // Sort by start time\n}\nasync function updateTranscriptChunkEmbeddings(jobId, chunkId, embedding) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    const result = await transcriptChunksCollection.updateOne({\n        jobId,\n        chunkId\n    }, {\n        $set: {\n            embedding\n        }\n    });\n    return result.modifiedCount > 0;\n}\n// --- Q&A Cache Functions ---\nasync function getCachedQAResponse(jobId, normalizedQuestionText, modelUsed) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    // console.log(`CACHE_LOOKUP: jobId=${jobId}, question='${normalizedQuestionText}', model='${modelUsed}'`); // Debug\n    const response = await cachedVideoQACollection.findOne({\n        jobId,\n        questionTextNormalized: normalizedQuestionText,\n        modelUsed,\n        cacheType: \"user_question\"\n    });\n    // if (response) console.log(\"CACHE_HIT\"); else console.log(\"CACHE_MISS\"); // Debug\n    return response;\n}\nasync function getCachedProactiveAnalysis(jobId, analysisType, modelUsed) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    return cachedVideoQACollection.findOne({\n        jobId,\n        analysisType,\n        modelUsed,\n        cacheType: \"proactive_analysis\"\n    });\n}\nasync function saveQAResponse(jobId, questionOrAnalysisType, modelUsed, responseText, cacheType = \"user_question\" // Default to user_question\n) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    const now = new Date();\n    let filter;\n    let updateData;\n    if (cacheType === \"user_question\") {\n        filter = {\n            jobId,\n            questionTextNormalized: questionOrAnalysisType,\n            modelUsed,\n            cacheType\n        };\n        updateData = {\n            $set: {\n                responseText,\n                updatedAt: now\n            },\n            $setOnInsert: {\n                jobId,\n                questionTextNormalized: questionOrAnalysisType,\n                modelUsed,\n                cacheType,\n                createdAt: now\n            }\n        };\n    } else {\n        filter = {\n            jobId,\n            analysisType: questionOrAnalysisType,\n            modelUsed,\n            cacheType\n        };\n        updateData = {\n            $set: {\n                responseText,\n                updatedAt: now\n            },\n            $setOnInsert: {\n                jobId,\n                analysisType: questionOrAnalysisType,\n                modelUsed,\n                cacheType,\n                createdAt: now\n            }\n        };\n    }\n    try {\n        // console.log(`CACHE_SAVE: jobId=${jobId}, key='${questionOrAnalysisType}', model='${modelUsed}', type='${cacheType}'`); // Debug\n        await cachedVideoQACollection.updateOne(filter, updateData, {\n            upsert: true\n        });\n    // console.log(\"CACHE_SAVE successful\"); // Debug\n    } catch (error) {\n        console.error(\"Error saving Q&A response to cache:\", error);\n    // Decide if this error should be propagated or just logged\n    // For async background saves, logging might be sufficient.\n    }\n}\n// Optional: Function to clear MongoDB client connection (e.g., for graceful shutdown)\nasync function closeDatabaseConnection() {\n    if (client) {\n        await client.close();\n        client = null;\n        db = null;\n        console.log(\"MongoDB connection closed.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mongodb.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/youtube.ts":
/*!****************************!*\
  !*** ./src/lib/youtube.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractVideoId: () => (/* binding */ extractVideoId),\n/* harmony export */   getVideoDetails: () => (/* binding */ getVideoDetails),\n/* harmony export */   getYouTubeTranscript: () => (/* binding */ getYouTubeTranscript),\n/* harmony export */   isValidYouTubeUrl: () => (/* binding */ isValidYouTubeUrl)\n/* harmony export */ });\n/* harmony import */ var youtube_transcript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! youtube-transcript */ \"(rsc)/./node_modules/youtube-transcript/dist/youtube-transcript.esm.js\");\n\nfunction isValidYouTubeUrl(url) {\n    const patterns = [\n        /^(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=)([a-zA-Z0-9_-]{11})(?:&[^&\\n]*)?$/,\n        /^(?:https?:\\/\\/)?(?:www\\.)?(?:youtu\\.be\\/)([a-zA-Z0-9_-]{11})(?:\\?[^&\\n]*)?$/,\n        /^(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/embed\\/([a-zA-Z0-9_-]{11})/,\n        /^(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/v\\/([a-zA-Z0-9_-]{11})/\n    ];\n    return patterns.some((pattern)=>pattern.test(url));\n}\nfunction extractVideoId(url) {\n    const patterns = [\n        /(?:youtube\\.com\\/watch\\?v=)([^&\\n?#]+)/,\n        /(?:youtu\\.be\\/)([^&\\n?#]+)/,\n        /youtube\\.com\\/embed\\/([^&\\n?#]+)/,\n        /youtube\\.com\\/v\\/([^&\\n?#]+)/\n    ];\n    for (const pattern of patterns){\n        const match = url.match(pattern);\n        if (match && match[1]) {\n            return match[1];\n        }\n    }\n    return null;\n}\nasync function getVideoDetails(videoId) {\n    try {\n        const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${process.env.YOUTUBE_API_KEY}`);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch video details\");\n        }\n        const data = await response.json();\n        if (!data.items?.[0]) {\n            throw new Error(\"Video not found\");\n        }\n        const video = data.items[0];\n        return {\n            title: video.snippet?.title,\n            description: video.snippet?.description,\n            channelTitle: video.snippet?.channelTitle,\n            publishedAt: video.snippet?.publishedAt\n        };\n    } catch (error) {\n        console.error(\"Error fetching video details:\", error);\n        throw error;\n    }\n}\nasync function getYouTubeTranscript(videoUrl) {\n    try {\n        // Extract video ID from URL\n        const videoId = extractVideoId(videoUrl);\n        if (!videoId) {\n            throw new Error(\"Invalid YouTube URL\");\n        }\n        // First check if captions are available\n        const captionsResponse = await fetch(`https://www.googleapis.com/youtube/v3/captions?part=snippet&videoId=${videoId}&key=${process.env.YOUTUBE_API_KEY}`);\n        if (!captionsResponse.ok) {\n            const error = await captionsResponse.json();\n            if (error.error?.code === 403) {\n                throw new Error(\"This video has captions disabled or restricted. Please try a different video with captions enabled.\");\n            }\n            throw new Error(\"Failed to check video captions availability.\");\n        }\n        // Try to fetch transcript using youtube-transcript as fallback\n        try {\n            const transcript = await youtube_transcript__WEBPACK_IMPORTED_MODULE_0__.YoutubeTranscript.fetchTranscript(videoId, {\n                lang: \"en\"\n            });\n            if (!transcript || transcript.length === 0) {\n                console.error(\"No transcript found for video:\", videoId);\n                return null;\n            }\n            // Transform to our format\n            return transcript.map((segment)=>({\n                    text: segment.text,\n                    start: segment.offset,\n                    duration: segment.duration\n                }));\n        } catch (transcriptError) {\n            console.error(\"Error fetching transcript with youtube-transcript:\", transcriptError);\n            // If youtube-transcript fails, try to fetch captions directly\n            const captionsData = await captionsResponse.json();\n            if (!captionsData.items || captionsData.items.length === 0) {\n                throw new Error(\"No captions found for this video. Please try a different video with captions enabled.\");\n            }\n            // Get the first available caption track\n            const captionId = captionsData.items[0].id;\n            const captionResponse = await fetch(`https://www.googleapis.com/youtube/v3/captions/${captionId}?key=${process.env.YOUTUBE_API_KEY}`, {\n                headers: {\n                    \"Authorization\": `Bearer ${process.env.YOUTUBE_API_KEY}`,\n                    \"Accept\": \"application/json\"\n                }\n            });\n            if (!captionResponse.ok) {\n                throw new Error(\"Failed to fetch video captions. Please try a different video.\");\n            }\n            const captionData = await captionResponse.json();\n            // Parse the caption data and transform it to our format\n            // This is a simplified example - you'll need to parse the actual caption format\n            return captionData.items.map((item)=>({\n                    text: item.text,\n                    start: item.start,\n                    duration: item.duration\n                }));\n        }\n    } catch (error) {\n        console.error(\"Error fetching YouTube transcript:\", error);\n        if (error instanceof Error) {\n            if (error.message.includes(\"Could not get the transcript\")) {\n                throw new Error(\"This video does not have captions available. Please try a different video with captions enabled.\");\n            } else if (error.message.includes(\"Transcript is disabled\")) {\n                throw new Error(\"This video has captions disabled. Please try a different video with captions enabled.\");\n            } else if (error.message.includes(\"Video is private\")) {\n                throw new Error(\"This video is private. Please try a public video.\");\n            } else if (error.message.includes(\"Video is restricted\")) {\n                throw new Error(\"This video is restricted. Please try a different video.\");\n            }\n        }\n        throw new Error(\"Failed to fetch transcript. Please try a different video.\");\n    }\n}\nfunction formatTimestamp(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return [\n        hours.toString().padStart(2, \"0\"),\n        minutes.toString().padStart(2, \"0\"),\n        remainingSeconds.toString().padStart(2, \"0\")\n    ].join(\":\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLHFCQUFxQjtnQkFDckQsTUFBTSxJQUFJbkMsTUFBTTtZQUNsQixPQUFPLElBQUlVLE1BQU13QixPQUFPLENBQUNDLFFBQVEsQ0FBQyx3QkFBd0I7Z0JBQ3hELE1BQU0sSUFBSW5DLE1BQU07WUFDbEI7UUFDRjtRQUNBLE1BQU0sSUFBSUEsTUFBTTtJQUNsQjtBQUNGO0FBRUEsU0FBU29DLGdCQUFnQkMsT0FBZTtJQUN0QyxNQUFNQyxRQUFRQyxLQUFLQyxLQUFLLENBQUNILFVBQVU7SUFDbkMsTUFBTUksVUFBVUYsS0FBS0MsS0FBSyxDQUFDLFVBQVcsT0FBUTtJQUM5QyxNQUFNRSxtQkFBbUJILEtBQUtDLEtBQUssQ0FBQ0gsVUFBVTtJQUU5QyxPQUFPO1FBQ0xDLE1BQU1LLFFBQVEsR0FBR0MsUUFBUSxDQUFDLEdBQUc7UUFDN0JILFFBQVFFLFFBQVEsR0FBR0MsUUFBUSxDQUFDLEdBQUc7UUFDL0JGLGlCQUFpQkMsUUFBUSxHQUFHQyxRQUFRLENBQUMsR0FBRztLQUN6QyxDQUFDQyxJQUFJLENBQUM7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2NoYXRweWUvLi9zcmMvbGliL3lvdXR1YmUudHM/ZjY4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBZb3V0dWJlVHJhbnNjcmlwdCB9IGZyb20gJ3lvdXR1YmUtdHJhbnNjcmlwdCc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFlvdVR1YmVVcmwodXJsOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICBjb25zdCBwYXR0ZXJucyA9IFtcclxuICAgIC9eKD86aHR0cHM/OlxcL1xcLyk/KD86d3d3XFwuKT8oPzp5b3V0dWJlXFwuY29tXFwvd2F0Y2hcXD92PSkoW2EtekEtWjAtOV8tXXsxMX0pKD86JlteJlxcbl0qKT8kLyxcclxuICAgIC9eKD86aHR0cHM/OlxcL1xcLyk/KD86d3d3XFwuKT8oPzp5b3V0dVxcLmJlXFwvKShbYS16QS1aMC05Xy1dezExfSkoPzpcXD9bXiZcXG5dKik/JC8sXHJcbiAgICAvXig/Omh0dHBzPzpcXC9cXC8pPyg/Ond3d1xcLik/eW91dHViZVxcLmNvbVxcL2VtYmVkXFwvKFthLXpBLVowLTlfLV17MTF9KS8sXHJcbiAgICAvXig/Omh0dHBzPzpcXC9cXC8pPyg/Ond3d1xcLik/eW91dHViZVxcLmNvbVxcL3ZcXC8oW2EtekEtWjAtOV8tXXsxMX0pL1xyXG4gIF1cclxuICByZXR1cm4gcGF0dGVybnMuc29tZShwYXR0ZXJuID0+IHBhdHRlcm4udGVzdCh1cmwpKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXh0cmFjdFZpZGVvSWQodXJsOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcclxuICBjb25zdCBwYXR0ZXJucyA9IFtcclxuICAgIC8oPzp5b3V0dWJlXFwuY29tXFwvd2F0Y2hcXD92PSkoW14mXFxuPyNdKykvLFxyXG4gICAgLyg/OnlvdXR1XFwuYmVcXC8pKFteJlxcbj8jXSspLyxcclxuICAgIC95b3V0dWJlXFwuY29tXFwvZW1iZWRcXC8oW14mXFxuPyNdKykvLFxyXG4gICAgL3lvdXR1YmVcXC5jb21cXC92XFwvKFteJlxcbj8jXSspL1xyXG4gIF1cclxuICBcclxuICBmb3IgKGNvbnN0IHBhdHRlcm4gb2YgcGF0dGVybnMpIHtcclxuICAgIGNvbnN0IG1hdGNoID0gdXJsLm1hdGNoKHBhdHRlcm4pXHJcbiAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcclxuICAgICAgcmV0dXJuIG1hdGNoWzFdXHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBudWxsXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRWaWRlb0RldGFpbHModmlkZW9JZDogc3RyaW5nKSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgIGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS95b3V0dWJlL3YzL3ZpZGVvcz9wYXJ0PXNuaXBwZXQmaWQ9JHt2aWRlb0lkfSZrZXk9JHtwcm9jZXNzLmVudi5ZT1VUVUJFX0FQSV9LRVl9YFxyXG4gICAgKVxyXG5cclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHZpZGVvIGRldGFpbHNcIilcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcblxyXG4gICAgaWYgKCFkYXRhLml0ZW1zPy5bMF0pIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVmlkZW8gbm90IGZvdW5kXCIpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdmlkZW8gPSBkYXRhLml0ZW1zWzBdXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aXRsZTogdmlkZW8uc25pcHBldD8udGl0bGUsXHJcbiAgICAgIGRlc2NyaXB0aW9uOiB2aWRlby5zbmlwcGV0Py5kZXNjcmlwdGlvbixcclxuICAgICAgY2hhbm5lbFRpdGxlOiB2aWRlby5zbmlwcGV0Py5jaGFubmVsVGl0bGUsXHJcbiAgICAgIHB1Ymxpc2hlZEF0OiB2aWRlby5zbmlwcGV0Py5wdWJsaXNoZWRBdCxcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGZldGNoaW5nIHZpZGVvIGRldGFpbHM6XCIsIGVycm9yKVxyXG4gICAgdGhyb3cgZXJyb3JcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNjcmlwdFNlZ21lbnQge1xyXG4gIHRleHQ6IHN0cmluZztcclxuICBzdGFydDogbnVtYmVyO1xyXG4gIGR1cmF0aW9uOiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRZb3VUdWJlVHJhbnNjcmlwdCh2aWRlb1VybDogc3RyaW5nKTogUHJvbWlzZTxUcmFuc2NyaXB0U2VnbWVudFtdIHwgbnVsbD4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBFeHRyYWN0IHZpZGVvIElEIGZyb20gVVJMXHJcbiAgICBjb25zdCB2aWRlb0lkID0gZXh0cmFjdFZpZGVvSWQodmlkZW9VcmwpO1xyXG4gICAgaWYgKCF2aWRlb0lkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBZb3VUdWJlIFVSTCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZpcnN0IGNoZWNrIGlmIGNhcHRpb25zIGFyZSBhdmFpbGFibGVcclxuICAgIGNvbnN0IGNhcHRpb25zUmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcclxuICAgICAgYGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3lvdXR1YmUvdjMvY2FwdGlvbnM/cGFydD1zbmlwcGV0JnZpZGVvSWQ9JHt2aWRlb0lkfSZrZXk9JHtwcm9jZXNzLmVudi5ZT1VUVUJFX0FQSV9LRVl9YFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoIWNhcHRpb25zUmVzcG9uc2Uub2spIHtcclxuICAgICAgY29uc3QgZXJyb3IgPSBhd2FpdCBjYXB0aW9uc1Jlc3BvbnNlLmpzb24oKTtcclxuICAgICAgaWYgKGVycm9yLmVycm9yPy5jb2RlID09PSA0MDMpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgdmlkZW8gaGFzIGNhcHRpb25zIGRpc2FibGVkIG9yIHJlc3RyaWN0ZWQuIFBsZWFzZSB0cnkgYSBkaWZmZXJlbnQgdmlkZW8gd2l0aCBjYXB0aW9ucyBlbmFibGVkLicpO1xyXG4gICAgICB9XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNoZWNrIHZpZGVvIGNhcHRpb25zIGF2YWlsYWJpbGl0eS4nKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUcnkgdG8gZmV0Y2ggdHJhbnNjcmlwdCB1c2luZyB5b3V0dWJlLXRyYW5zY3JpcHQgYXMgZmFsbGJhY2tcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHRyYW5zY3JpcHQgPSBhd2FpdCBZb3V0dWJlVHJhbnNjcmlwdC5mZXRjaFRyYW5zY3JpcHQodmlkZW9JZCwge1xyXG4gICAgICAgIGxhbmc6ICdlbidcclxuICAgICAgfSk7XHJcbiAgICAgIFxyXG4gICAgICBpZiAoIXRyYW5zY3JpcHQgfHwgdHJhbnNjcmlwdC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdObyB0cmFuc2NyaXB0IGZvdW5kIGZvciB2aWRlbzonLCB2aWRlb0lkKTtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgLy8gVHJhbnNmb3JtIHRvIG91ciBmb3JtYXRcclxuICAgICAgcmV0dXJuIHRyYW5zY3JpcHQubWFwKHNlZ21lbnQgPT4gKHtcclxuICAgICAgICB0ZXh0OiBzZWdtZW50LnRleHQsXHJcbiAgICAgICAgc3RhcnQ6IHNlZ21lbnQub2Zmc2V0LFxyXG4gICAgICAgIGR1cmF0aW9uOiBzZWdtZW50LmR1cmF0aW9uXHJcbiAgICAgIH0pKTtcclxuICAgIH0gY2F0Y2ggKHRyYW5zY3JpcHRFcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyB0cmFuc2NyaXB0IHdpdGggeW91dHViZS10cmFuc2NyaXB0OicsIHRyYW5zY3JpcHRFcnJvcik7XHJcbiAgICAgIFxyXG4gICAgICAvLyBJZiB5b3V0dWJlLXRyYW5zY3JpcHQgZmFpbHMsIHRyeSB0byBmZXRjaCBjYXB0aW9ucyBkaXJlY3RseVxyXG4gICAgICBjb25zdCBjYXB0aW9uc0RhdGEgPSBhd2FpdCBjYXB0aW9uc1Jlc3BvbnNlLmpzb24oKTtcclxuICAgICAgaWYgKCFjYXB0aW9uc0RhdGEuaXRlbXMgfHwgY2FwdGlvbnNEYXRhLml0ZW1zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY2FwdGlvbnMgZm91bmQgZm9yIHRoaXMgdmlkZW8uIFBsZWFzZSB0cnkgYSBkaWZmZXJlbnQgdmlkZW8gd2l0aCBjYXB0aW9ucyBlbmFibGVkLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBHZXQgdGhlIGZpcnN0IGF2YWlsYWJsZSBjYXB0aW9uIHRyYWNrXHJcbiAgICAgIGNvbnN0IGNhcHRpb25JZCA9IGNhcHRpb25zRGF0YS5pdGVtc1swXS5pZDtcclxuICAgICAgY29uc3QgY2FwdGlvblJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgICAgYGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL3lvdXR1YmUvdjMvY2FwdGlvbnMvJHtjYXB0aW9uSWR9P2tleT0ke3Byb2Nlc3MuZW52LllPVVRVQkVfQVBJX0tFWX1gLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7cHJvY2Vzcy5lbnYuWU9VVFVCRV9BUElfS0VZfWAsXHJcbiAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbidcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICk7XHJcblxyXG4gICAgICBpZiAoIWNhcHRpb25SZXNwb25zZS5vaykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZldGNoIHZpZGVvIGNhcHRpb25zLiBQbGVhc2UgdHJ5IGEgZGlmZmVyZW50IHZpZGVvLicpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBjYXB0aW9uRGF0YSA9IGF3YWl0IGNhcHRpb25SZXNwb25zZS5qc29uKCk7XHJcbiAgICAgIC8vIFBhcnNlIHRoZSBjYXB0aW9uIGRhdGEgYW5kIHRyYW5zZm9ybSBpdCB0byBvdXIgZm9ybWF0XHJcbiAgICAgIC8vIFRoaXMgaXMgYSBzaW1wbGlmaWVkIGV4YW1wbGUgLSB5b3UnbGwgbmVlZCB0byBwYXJzZSB0aGUgYWN0dWFsIGNhcHRpb24gZm9ybWF0XHJcbiAgICAgIHJldHVybiBjYXB0aW9uRGF0YS5pdGVtcy5tYXAoKGl0ZW06IGFueSkgPT4gKHtcclxuICAgICAgICB0ZXh0OiBpdGVtLnRleHQsXHJcbiAgICAgICAgc3RhcnQ6IGl0ZW0uc3RhcnQsXHJcbiAgICAgICAgZHVyYXRpb246IGl0ZW0uZHVyYXRpb25cclxuICAgICAgfSkpO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBmZXRjaGluZyBZb3VUdWJlIHRyYW5zY3JpcHQ6JywgZXJyb3IpO1xyXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ0NvdWxkIG5vdCBnZXQgdGhlIHRyYW5zY3JpcHQnKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyB2aWRlbyBkb2VzIG5vdCBoYXZlIGNhcHRpb25zIGF2YWlsYWJsZS4gUGxlYXNlIHRyeSBhIGRpZmZlcmVudCB2aWRlbyB3aXRoIGNhcHRpb25zIGVuYWJsZWQuJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnVHJhbnNjcmlwdCBpcyBkaXNhYmxlZCcpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIHZpZGVvIGhhcyBjYXB0aW9ucyBkaXNhYmxlZC4gUGxlYXNlIHRyeSBhIGRpZmZlcmVudCB2aWRlbyB3aXRoIGNhcHRpb25zIGVuYWJsZWQuJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnVmlkZW8gaXMgcHJpdmF0ZScpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIHZpZGVvIGlzIHByaXZhdGUuIFBsZWFzZSB0cnkgYSBwdWJsaWMgdmlkZW8uJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnVmlkZW8gaXMgcmVzdHJpY3RlZCcpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIHZpZGVvIGlzIHJlc3RyaWN0ZWQuIFBsZWFzZSB0cnkgYSBkaWZmZXJlbnQgdmlkZW8uJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZldGNoIHRyYW5zY3JpcHQuIFBsZWFzZSB0cnkgYSBkaWZmZXJlbnQgdmlkZW8uJyk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmb3JtYXRUaW1lc3RhbXAoc2Vjb25kczogbnVtYmVyKTogc3RyaW5nIHtcclxuICBjb25zdCBob3VycyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDM2MDApO1xyXG4gIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKChzZWNvbmRzICUgMzYwMCkgLyA2MCk7XHJcbiAgY29uc3QgcmVtYWluaW5nU2Vjb25kcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAlIDYwKTtcclxuXHJcbiAgcmV0dXJuIFtcclxuICAgIGhvdXJzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKSxcclxuICAgIG1pbnV0ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpLFxyXG4gICAgcmVtYWluaW5nU2Vjb25kcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJylcclxuICBdLmpvaW4oJzonKTtcclxufSAiXSwibmFtZXMiOlsiWW91dHViZVRyYW5zY3JpcHQiLCJpc1ZhbGlkWW91VHViZVVybCIsInVybCIsInBhdHRlcm5zIiwic29tZSIsInBhdHRlcm4iLCJ0ZXN0IiwiZXh0cmFjdFZpZGVvSWQiLCJtYXRjaCIsImdldFZpZGVvRGV0YWlscyIsInZpZGVvSWQiLCJyZXNwb25zZSIsImZldGNoIiwicHJvY2VzcyIsImVudiIsIllPVVRVQkVfQVBJX0tFWSIsIm9rIiwiRXJyb3IiLCJkYXRhIiwianNvbiIsIml0ZW1zIiwidmlkZW8iLCJ0aXRsZSIsInNuaXBwZXQiLCJkZXNjcmlwdGlvbiIsImNoYW5uZWxUaXRsZSIsInB1Ymxpc2hlZEF0IiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0WW91VHViZVRyYW5zY3JpcHQiLCJ2aWRlb1VybCIsImNhcHRpb25zUmVzcG9uc2UiLCJjb2RlIiwidHJhbnNjcmlwdCIsImZldGNoVHJhbnNjcmlwdCIsImxhbmciLCJsZW5ndGgiLCJtYXAiLCJzZWdtZW50IiwidGV4dCIsInN0YXJ0Iiwib2Zmc2V0IiwiZHVyYXRpb24iLCJ0cmFuc2NyaXB0RXJyb3IiLCJjYXB0aW9uc0RhdGEiLCJjYXB0aW9uSWQiLCJpZCIsImNhcHRpb25SZXNwb25zZSIsImhlYWRlcnMiLCJjYXB0aW9uRGF0YSIsIml0ZW0iLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJmb3JtYXRUaW1lc3RhbXAiLCJzZWNvbmRzIiwiaG91cnMiLCJNYXRoIiwiZmxvb3IiLCJtaW51dGVzIiwicmVtYWluaW5nU2Vjb25kcyIsInRvU3RyaW5nIiwicGFkU3RhcnQiLCJqb2luIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/youtube.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@google","vendor-chunks/youtube-transcript","vendor-chunks/uuid"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo%2Fprocess%2Froute&page=%2Fapi%2Fvideo%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo%2Fprocess%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();