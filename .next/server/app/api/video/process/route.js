"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/video/process/route";
exports.ids = ["app/api/video/process/route"];
exports.modules = {

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo%2Fprocess%2Froute&page=%2Fapi%2Fvideo%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo%2Fprocess%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo%2Fprocess%2Froute&page=%2Fapi%2Fvideo%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo%2Fprocess%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Deborah_Documents_Cursor_Projects_chatpye_src_app_api_video_process_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/video/process/route.ts */ \"(rsc)/./src/app/api/video/process/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/video/process/route\",\n        pathname: \"/api/video/process\",\n        filename: \"route\",\n        bundlePath: \"app/api/video/process/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Deborah\\\\Documents\\\\Cursor Projects\\\\chatpye\\\\src\\\\app\\\\api\\\\video\\\\process\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Deborah_Documents_Cursor_Projects_chatpye_src_app_api_video_process_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/video/process/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ2aWRlbyUyRnByb2Nlc3MlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnZpZGVvJTJGcHJvY2VzcyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnZpZGVvJTJGcHJvY2VzcyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNEZWJvcmFoJTVDRG9jdW1lbnRzJTVDQ3Vyc29yJTIwUHJvamVjdHMlNUNjaGF0cHllJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNEZWJvcmFoJTVDRG9jdW1lbnRzJTVDQ3Vyc29yJTIwUHJvamVjdHMlNUNjaGF0cHllJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQ2dEO0FBQzdIO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdHB5ZS8/MzYxYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxVc2Vyc1xcXFxEZWJvcmFoXFxcXERvY3VtZW50c1xcXFxDdXJzb3IgUHJvamVjdHNcXFxcY2hhdHB5ZVxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFx2aWRlb1xcXFxwcm9jZXNzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS92aWRlby9wcm9jZXNzL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdmlkZW8vcHJvY2Vzc1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdmlkZW8vcHJvY2Vzcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXERlYm9yYWhcXFxcRG9jdW1lbnRzXFxcXEN1cnNvciBQcm9qZWN0c1xcXFxjaGF0cHllXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXHZpZGVvXFxcXHByb2Nlc3NcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0IH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvdmlkZW8vcHJvY2Vzcy9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo%2Fprocess%2Froute&page=%2Fapi%2Fvideo%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo%2Fprocess%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/video/process/route.ts":
/*!********************************************!*\
  !*** ./src/app/api/video/process/route.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm/v4.js\");\n/* harmony import */ var _lib_mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/mongodb */ \"(rsc)/./src/lib/mongodb.ts\");\n/* harmony import */ var _lib_youtube__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/youtube */ \"(rsc)/./src/lib/youtube.ts\");\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _lib_embeddings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/lib/embeddings */ \"(rsc)/./src/lib/embeddings.ts\");\n\n\n\n\n\n\n// Initialize Google AI\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_3__.GoogleGenerativeAI(process.env.GOOGLE_AI_KEY || \"\");\n// Process chunks in batches to avoid memory issues\nasync function processChunksInBatches(chunks, jobId, batchSize = 5) {\n    const totalChunks = chunks.length;\n    for(let i = 0; i < chunks.length; i += batchSize){\n        const batch = chunks.slice(i, i + batchSize);\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n            progress: `Processing chunks ${i + 1}-${Math.min(i + batchSize, totalChunks)} of ${totalChunks}...`\n        });\n        // Process batch in parallel\n        await Promise.all(batch.map(async (chunk)=>{\n            try {\n                const embedding = await (0,_lib_embeddings__WEBPACK_IMPORTED_MODULE_4__.generateEmbedding)(chunk.textContent);\n                await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateTranscriptChunkEmbeddings)(jobId, chunk.chunkId, embedding);\n            } catch (error) {\n                console.error(`Error processing chunk ${chunk.chunkId}:`, error);\n            // Continue with other chunks even if one fails\n            }\n        }));\n    }\n}\nasync function processVideo(jobId, youtubeUrl) {\n    try {\n        // Update job status to processing\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n            status: \"processing\",\n            progress: \"Fetching transcript...\"\n        });\n        // Fetch transcript\n        const transcript = await (0,_lib_youtube__WEBPACK_IMPORTED_MODULE_2__.getYouTubeTranscript)(youtubeUrl);\n        if (!transcript || transcript.length === 0) {\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                status: \"failed\",\n                transcriptStatus: \"not_found\",\n                progress: \"No transcript found\"\n            });\n            return;\n        }\n        // Create transcript chunks with a maximum size\n        const MAX_CHUNK_SIZE = 1000; // characters\n        const chunks = [];\n        let currentChunk = {\n            text: \"\",\n            start: 0,\n            duration: 0\n        };\n        for (const segment of transcript){\n            if (currentChunk.text.length + segment.text.length > MAX_CHUNK_SIZE) {\n                // Save current chunk if it has content\n                if (currentChunk.text) {\n                    chunks.push({\n                        jobId,\n                        chunkId: `${jobId}-${chunks.length}`,\n                        textContent: currentChunk.text.trim(),\n                        startTimestamp: currentChunk.start.toString(),\n                        endTimestamp: (currentChunk.start + currentChunk.duration).toString(),\n                        embedding: []\n                    });\n                }\n                // Start new chunk\n                currentChunk = {\n                    text: segment.text,\n                    start: segment.start,\n                    duration: segment.duration\n                };\n            } else {\n                // Add to current chunk\n                currentChunk.text += \" \" + segment.text;\n                currentChunk.duration += segment.duration;\n            }\n        }\n        // Add the last chunk if it has content\n        if (currentChunk.text) {\n            chunks.push({\n                jobId,\n                chunkId: `${jobId}-${chunks.length}`,\n                textContent: currentChunk.text.trim(),\n                startTimestamp: currentChunk.start.toString(),\n                endTimestamp: (currentChunk.start + currentChunk.duration).toString(),\n                embedding: []\n            });\n        }\n        // Only process if we have valid chunks\n        if (chunks.length > 0) {\n            // Store transcript chunks\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                progress: \"Storing transcript chunks...\"\n            });\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.createTranscriptChunks)(chunks);\n            // Process chunks in batches\n            await processChunksInBatches(chunks, jobId);\n            // Update job status\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                status: \"completed\",\n                transcriptStatus: \"found\",\n                progress: \"Processing complete\"\n            });\n        } else {\n            await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n                status: \"failed\",\n                transcriptStatus: \"not_found\",\n                progress: \"No valid transcript chunks found\"\n            });\n        }\n    } catch (error) {\n        console.error(\"Error processing video:\", error);\n        await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.updateVideoJob)(jobId, {\n            status: \"failed\",\n            transcriptStatus: \"error\",\n            progress: error instanceof Error ? error.message : \"Error during processing\"\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const { youtubeUrl } = await request.json();\n        if (!youtubeUrl) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                error: \"YouTube URL is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Generate a unique job ID\n        const jobId = (0,uuid__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n        // Create initial job record\n        const job = await (0,_lib_mongodb__WEBPACK_IMPORTED_MODULE_1__.createVideoJob)({\n            jobId,\n            youtubeUrl,\n            status: \"pending\",\n            transcriptStatus: \"processing\",\n            progress: \"Starting processing...\"\n        });\n        // Start processing in the background\n        processVideo(jobId, youtubeUrl).catch((error)=>{\n            console.error(\"Background processing error:\", error);\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            status: \"success\",\n            message: \"Video processing started\",\n            jobId\n        });\n    } catch (error) {\n        console.error(\"Error in POST endpoint:\", error);\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            error: \"Failed to process video\",\n            details: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/video/process/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/embeddings.ts":
/*!*******************************!*\
  !*** ./src/lib/embeddings.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findRelevantChunks: () => (/* binding */ findRelevantChunks),\n/* harmony export */   generateEmbedding: () => (/* binding */ generateEmbedding)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(process.env.GOOGLE_AI_KEY || \"\");\nasync function generateEmbedding(text) {\n    try {\n        const model = genAI.getGenerativeModel({\n            model: \"embedding-001\"\n        });\n        const result = await model.embedContent(text);\n        const embedding = result.embedding.values;\n        return embedding;\n    } catch (error) {\n        console.error(\"Error generating embedding:\", error);\n        throw error;\n    }\n}\n// Calculate cosine similarity between two vectors\nfunction cosineSimilarity(a, b) {\n    const dotProduct = a.reduce((sum, val, i)=>sum + val * b[i], 0);\n    const magnitudeA = Math.sqrt(a.reduce((sum, val)=>sum + val * val, 0));\n    const magnitudeB = Math.sqrt(b.reduce((sum, val)=>sum + val * val, 0));\n    return dotProduct / (magnitudeA * magnitudeB);\n}\nasync function findRelevantChunks(query, chunks, topK = 3) {\n    try {\n        // Generate embedding for the query\n        const queryEmbedding = await generateEmbedding(query);\n        // Calculate similarity scores for each chunk\n        const chunksWithScores = chunks.map((chunk)=>({\n                chunk,\n                score: cosineSimilarity(queryEmbedding, chunk.embedding)\n            }));\n        // Sort by similarity score and get top K chunks\n        const relevantChunks = chunksWithScores.sort((a, b)=>b.score - a.score).slice(0, topK).map((item)=>item.chunk);\n        return relevantChunks;\n    } catch (error) {\n        console.error(\"Error finding relevant chunks:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2VtYmVkZGluZ3MudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQTJEO0FBRzNELE1BQU1DLFFBQVEsSUFBSUQscUVBQWtCQSxDQUFDRSxRQUFRQyxHQUFHLENBQUNDLGFBQWEsSUFBSTtBQUUzRCxlQUFlQyxrQkFBa0JDLElBQVk7SUFDbEQsSUFBSTtRQUNGLE1BQU1DLFFBQVFOLE1BQU1PLGtCQUFrQixDQUFDO1lBQUVELE9BQU87UUFBZ0I7UUFDaEUsTUFBTUUsU0FBUyxNQUFNRixNQUFNRyxZQUFZLENBQUNKO1FBQ3hDLE1BQU1LLFlBQVlGLE9BQU9FLFNBQVMsQ0FBQ0MsTUFBTTtRQUN6QyxPQUFPRDtJQUNULEVBQUUsT0FBT0UsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtRQUM3QyxNQUFNQTtJQUNSO0FBQ0Y7QUFFQSxrREFBa0Q7QUFDbEQsU0FBU0UsaUJBQWlCQyxDQUFXLEVBQUVDLENBQVc7SUFDaEQsTUFBTUMsYUFBYUYsRUFBRUcsTUFBTSxDQUFDLENBQUNDLEtBQUtDLEtBQUtDLElBQU1GLE1BQU1DLE1BQU1KLENBQUMsQ0FBQ0ssRUFBRSxFQUFFO0lBQy9ELE1BQU1DLGFBQWFDLEtBQUtDLElBQUksQ0FBQ1QsRUFBRUcsTUFBTSxDQUFDLENBQUNDLEtBQUtDLE1BQVFELE1BQU1DLE1BQU1BLEtBQUs7SUFDckUsTUFBTUssYUFBYUYsS0FBS0MsSUFBSSxDQUFDUixFQUFFRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsTUFBTUEsS0FBSztJQUNyRSxPQUFPSCxhQUFjSyxDQUFBQSxhQUFhRyxVQUFTO0FBQzdDO0FBRU8sZUFBZUMsbUJBQ3BCQyxLQUFhLEVBQ2JDLE1BQXlCLEVBQ3pCQyxPQUFlLENBQUM7SUFFaEIsSUFBSTtRQUNGLG1DQUFtQztRQUNuQyxNQUFNQyxpQkFBaUIsTUFBTTFCLGtCQUFrQnVCO1FBRS9DLDZDQUE2QztRQUM3QyxNQUFNSSxtQkFBbUJILE9BQU9JLEdBQUcsQ0FBQ0MsQ0FBQUEsUUFBVTtnQkFDNUNBO2dCQUNBQyxPQUFPcEIsaUJBQWlCZ0IsZ0JBQWdCRyxNQUFNdkIsU0FBUztZQUN6RDtRQUVBLGdEQUFnRDtRQUNoRCxNQUFNeUIsaUJBQWlCSixpQkFDcEJLLElBQUksQ0FBQyxDQUFDckIsR0FBR0MsSUFBTUEsRUFBRWtCLEtBQUssR0FBR25CLEVBQUVtQixLQUFLLEVBQ2hDRyxLQUFLLENBQUMsR0FBR1IsTUFDVEcsR0FBRyxDQUFDTSxDQUFBQSxPQUFRQSxLQUFLTCxLQUFLO1FBRXpCLE9BQU9FO0lBQ1QsRUFBRSxPQUFPdkIsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsa0NBQWtDQTtRQUNoRCxNQUFNQTtJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0cHllLy4vc3JjL2xpYi9lbWJlZGRpbmdzLnRzP2JjZmEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR29vZ2xlR2VuZXJhdGl2ZUFJIH0gZnJvbSAnQGdvb2dsZS9nZW5lcmF0aXZlLWFpJztcclxuaW1wb3J0IHsgVHJhbnNjcmlwdENodW5rIH0gZnJvbSAnLi9tb25nb2RiJztcclxuXHJcbmNvbnN0IGdlbkFJID0gbmV3IEdvb2dsZUdlbmVyYXRpdmVBSShwcm9jZXNzLmVudi5HT09HTEVfQUlfS0VZIHx8ICcnKTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUVtYmVkZGluZyh0ZXh0OiBzdHJpbmcpOiBQcm9taXNlPG51bWJlcltdPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IG1vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZW1iZWRkaW5nLTAwMVwiIH0pO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW9kZWwuZW1iZWRDb250ZW50KHRleHQpO1xyXG4gICAgY29uc3QgZW1iZWRkaW5nID0gcmVzdWx0LmVtYmVkZGluZy52YWx1ZXM7XHJcbiAgICByZXR1cm4gZW1iZWRkaW5nO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZW5lcmF0aW5nIGVtYmVkZGluZzonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbi8vIENhbGN1bGF0ZSBjb3NpbmUgc2ltaWxhcml0eSBiZXR3ZWVuIHR3byB2ZWN0b3JzXHJcbmZ1bmN0aW9uIGNvc2luZVNpbWlsYXJpdHkoYTogbnVtYmVyW10sIGI6IG51bWJlcltdKTogbnVtYmVyIHtcclxuICBjb25zdCBkb3RQcm9kdWN0ID0gYS5yZWR1Y2UoKHN1bSwgdmFsLCBpKSA9PiBzdW0gKyB2YWwgKiBiW2ldLCAwKTtcclxuICBjb25zdCBtYWduaXR1ZGVBID0gTWF0aC5zcXJ0KGEucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsICogdmFsLCAwKSk7XHJcbiAgY29uc3QgbWFnbml0dWRlQiA9IE1hdGguc3FydChiLnJlZHVjZSgoc3VtLCB2YWwpID0+IHN1bSArIHZhbCAqIHZhbCwgMCkpO1xyXG4gIHJldHVybiBkb3RQcm9kdWN0IC8gKG1hZ25pdHVkZUEgKiBtYWduaXR1ZGVCKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRSZWxldmFudENodW5rcyhcclxuICBxdWVyeTogc3RyaW5nLFxyXG4gIGNodW5rczogVHJhbnNjcmlwdENodW5rW10sXHJcbiAgdG9wSzogbnVtYmVyID0gM1xyXG4pOiBQcm9taXNlPFRyYW5zY3JpcHRDaHVua1tdPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEdlbmVyYXRlIGVtYmVkZGluZyBmb3IgdGhlIHF1ZXJ5XHJcbiAgICBjb25zdCBxdWVyeUVtYmVkZGluZyA9IGF3YWl0IGdlbmVyYXRlRW1iZWRkaW5nKHF1ZXJ5KTtcclxuXHJcbiAgICAvLyBDYWxjdWxhdGUgc2ltaWxhcml0eSBzY29yZXMgZm9yIGVhY2ggY2h1bmtcclxuICAgIGNvbnN0IGNodW5rc1dpdGhTY29yZXMgPSBjaHVua3MubWFwKGNodW5rID0+ICh7XHJcbiAgICAgIGNodW5rLFxyXG4gICAgICBzY29yZTogY29zaW5lU2ltaWxhcml0eShxdWVyeUVtYmVkZGluZywgY2h1bmsuZW1iZWRkaW5nKVxyXG4gICAgfSkpO1xyXG5cclxuICAgIC8vIFNvcnQgYnkgc2ltaWxhcml0eSBzY29yZSBhbmQgZ2V0IHRvcCBLIGNodW5rc1xyXG4gICAgY29uc3QgcmVsZXZhbnRDaHVua3MgPSBjaHVua3NXaXRoU2NvcmVzXHJcbiAgICAgIC5zb3J0KChhLCBiKSA9PiBiLnNjb3JlIC0gYS5zY29yZSlcclxuICAgICAgLnNsaWNlKDAsIHRvcEspXHJcbiAgICAgIC5tYXAoaXRlbSA9PiBpdGVtLmNodW5rKTtcclxuXHJcbiAgICByZXR1cm4gcmVsZXZhbnRDaHVua3M7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZpbmRpbmcgcmVsZXZhbnQgY2h1bmtzOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiR29vZ2xlR2VuZXJhdGl2ZUFJIiwiZ2VuQUkiLCJwcm9jZXNzIiwiZW52IiwiR09PR0xFX0FJX0tFWSIsImdlbmVyYXRlRW1iZWRkaW5nIiwidGV4dCIsIm1vZGVsIiwiZ2V0R2VuZXJhdGl2ZU1vZGVsIiwicmVzdWx0IiwiZW1iZWRDb250ZW50IiwiZW1iZWRkaW5nIiwidmFsdWVzIiwiZXJyb3IiLCJjb25zb2xlIiwiY29zaW5lU2ltaWxhcml0eSIsImEiLCJiIiwiZG90UHJvZHVjdCIsInJlZHVjZSIsInN1bSIsInZhbCIsImkiLCJtYWduaXR1ZGVBIiwiTWF0aCIsInNxcnQiLCJtYWduaXR1ZGVCIiwiZmluZFJlbGV2YW50Q2h1bmtzIiwicXVlcnkiLCJjaHVua3MiLCJ0b3BLIiwicXVlcnlFbWJlZGRpbmciLCJjaHVua3NXaXRoU2NvcmVzIiwibWFwIiwiY2h1bmsiLCJzY29yZSIsInJlbGV2YW50Q2h1bmtzIiwic29ydCIsInNsaWNlIiwiaXRlbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/embeddings.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mongodb.ts":
/*!****************************!*\
  !*** ./src/lib/mongodb.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   closeDatabaseConnection: () => (/* binding */ closeDatabaseConnection),\n/* harmony export */   createTranscriptChunks: () => (/* binding */ createTranscriptChunks),\n/* harmony export */   createVideoJob: () => (/* binding */ createVideoJob),\n/* harmony export */   getCachedProactiveAnalysis: () => (/* binding */ getCachedProactiveAnalysis),\n/* harmony export */   getCachedQAResponse: () => (/* binding */ getCachedQAResponse),\n/* harmony export */   getCollections: () => (/* binding */ getCollections),\n/* harmony export */   getTranscriptChunks: () => (/* binding */ getTranscriptChunks),\n/* harmony export */   getVideoJob: () => (/* binding */ getVideoJob),\n/* harmony export */   saveQAResponse: () => (/* binding */ saveQAResponse),\n/* harmony export */   updateTranscriptChunkEmbeddings: () => (/* binding */ updateTranscriptChunkEmbeddings),\n/* harmony export */   updateVideoJob: () => (/* binding */ updateVideoJob)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nconst MONGODB_URI = process.env.MONGODB_URI;\nconst MONGODB_DB_NAME = process.env.MONGODB_DB_NAME || \"chatpye_db\"; // Default DB name\nif (!MONGODB_URI) {\n    throw new Error(\"Please define the MONGODB_URI environment variable in .env.local\");\n}\nlet client = null;\nlet db = null;\nconst collections = {};\nasync function connectToDatabase() {\n    if (db && client) {\n        // TODO: Verify client connection state if possible, e.g. client.isConnected()\n        // For serverless, creating new connections per request or short-lived connections might be okay.\n        // For long-running servers, maintaining a persistent connection is better.\n        // This simple check assumes client remains connected.\n        return db;\n    }\n    if (!MONGODB_URI) {\n        throw new Error(\"MongoDB URI is not defined.\");\n    }\n    client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(MONGODB_URI, {\n        serverApi: mongodb__WEBPACK_IMPORTED_MODULE_0__.ServerApiVersion.v1\n    });\n    try {\n        await client.connect();\n        db = client.db(MONGODB_DB_NAME);\n        console.log(\"Successfully connected to MongoDB.\");\n        // Initialize collections\n        collections.videoJobsCollection = db.collection(\"videoJobs\");\n        collections.transcriptChunksCollection = db.collection(\"transcriptChunks\");\n        collections.cachedVideoQACollection = db.collection(\"cachedVideoQA\");\n        // Create Indexes (idempotent - only creates if they don't exist)\n        await collections.videoJobsCollection.createIndex({\n            jobId: 1\n        }, {\n            unique: true\n        });\n        await collections.transcriptChunksCollection.createIndex({\n            jobId: 1,\n            chunkId: 1\n        }, {\n            unique: true\n        });\n        await collections.transcriptChunksCollection.createIndex({\n            jobId: 1\n        }); // For fetching all chunks for a job\n        // Index for Q&A cache\n        await collections.cachedVideoQACollection.createIndex({\n            jobId: 1,\n            questionTextNormalized: 1,\n            modelUsed: 1,\n            cacheType: 1\n        }, {\n            name: \"user_question_cache_idx\"\n        });\n        await collections.cachedVideoQACollection.createIndex({\n            jobId: 1,\n            analysisType: 1,\n            modelUsed: 1,\n            cacheType: 1\n        }, {\n            name: \"proactive_analysis_cache_idx\"\n        });\n        return db;\n    } catch (error) {\n        console.error(\"Failed to connect to MongoDB:\", error);\n        // If connection fails, subsequent calls to getDb will also fail until successful.\n        // Consider how to handle this in your application lifecycle.\n        // For now, rethrow to make it clear connection failed.\n        throw error;\n    }\n}\n// Export a function to get specific collections, ensuring DB connection\nasync function getCollections() {\n    if (!db || !client) {\n        await connectToDatabase();\n    }\n    if (!collections.videoJobsCollection || !collections.transcriptChunksCollection || !collections.cachedVideoQACollection) {\n        // This might happen if connectToDatabase was called but collections weren't set (shouldn't occur with current logic)\n        // Or if db connection was lost and re-established without re-setting collections object.\n        // For simplicity, re-run connectToDatabase which also sets collections.\n        await connectToDatabase();\n    }\n    return collections;\n}\n// --- Video Job Functions ---\nasync function createVideoJob(jobData) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const newJob = {\n        ...jobData,\n        status: jobData.status || \"pending\",\n        createdAt: new Date(),\n        updatedAt: new Date()\n    };\n    const result = await videoJobsCollection.insertOne(newJob);\n    if (!result.insertedId) {\n        throw new Error(\"Failed to create video job.\");\n    }\n    return {\n        ...newJob,\n        _id: result.insertedId\n    };\n}\nasync function getVideoJob(jobId) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    return videoJobsCollection.findOne({\n        jobId\n    });\n}\nasync function updateVideoJob(jobId, updates) {\n    const { videoJobsCollection } = await getCollections();\n    if (!videoJobsCollection) throw new Error(\"videoJobsCollection not initialized\");\n    const result = await videoJobsCollection.updateOne({\n        jobId\n    }, {\n        $set: {\n            ...updates,\n            updatedAt: new Date()\n        }\n    });\n    return result.modifiedCount > 0;\n}\n// --- Transcript Chunk Functions ---\nasync function createTranscriptChunks(chunksData) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    if (chunksData.length === 0) return;\n    const chunksToInsert = chunksData.map((chunk)=>({\n            ...chunk,\n            createdAt: new Date()\n        }));\n    await transcriptChunksCollection.insertMany(chunksToInsert);\n}\nasync function getTranscriptChunks(jobId) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    return transcriptChunksCollection.find({\n        jobId\n    }).sort({\n        startTimestamp: 1\n    }).toArray(); // Sort by start time\n}\nasync function updateTranscriptChunkEmbeddings(jobId, chunkId, embedding) {\n    const { transcriptChunksCollection } = await getCollections();\n    if (!transcriptChunksCollection) throw new Error(\"transcriptChunksCollection not initialized\");\n    const result = await transcriptChunksCollection.updateOne({\n        jobId,\n        chunkId\n    }, {\n        $set: {\n            embedding\n        }\n    });\n    return result.modifiedCount > 0;\n}\n// --- Q&A Cache Functions ---\nasync function getCachedQAResponse(jobId, normalizedQuestionText, modelUsed) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    // console.log(`CACHE_LOOKUP: jobId=${jobId}, question='${normalizedQuestionText}', model='${modelUsed}'`); // Debug\n    const response = await cachedVideoQACollection.findOne({\n        jobId,\n        questionTextNormalized: normalizedQuestionText,\n        modelUsed,\n        cacheType: \"user_question\"\n    });\n    // if (response) console.log(\"CACHE_HIT\"); else console.log(\"CACHE_MISS\"); // Debug\n    return response;\n}\nasync function getCachedProactiveAnalysis(jobId, analysisType, modelUsed) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    return cachedVideoQACollection.findOne({\n        jobId,\n        analysisType,\n        modelUsed,\n        cacheType: \"proactive_analysis\"\n    });\n}\nasync function saveQAResponse(jobId, questionOrAnalysisType, modelUsed, responseText, cacheType = \"user_question\" // Default to user_question\n) {\n    const { cachedVideoQACollection } = await getCollections();\n    if (!cachedVideoQACollection) throw new Error(\"cachedVideoQACollection not initialized\");\n    const now = new Date();\n    let filter;\n    let updateData;\n    if (cacheType === \"user_question\") {\n        filter = {\n            jobId,\n            questionTextNormalized: questionOrAnalysisType,\n            modelUsed,\n            cacheType\n        };\n        updateData = {\n            $set: {\n                responseText,\n                updatedAt: now\n            },\n            $setOnInsert: {\n                jobId,\n                questionTextNormalized: questionOrAnalysisType,\n                modelUsed,\n                cacheType,\n                createdAt: now\n            }\n        };\n    } else {\n        filter = {\n            jobId,\n            analysisType: questionOrAnalysisType,\n            modelUsed,\n            cacheType\n        };\n        updateData = {\n            $set: {\n                responseText,\n                updatedAt: now\n            },\n            $setOnInsert: {\n                jobId,\n                analysisType: questionOrAnalysisType,\n                modelUsed,\n                cacheType,\n                createdAt: now\n            }\n        };\n    }\n    try {\n        // console.log(`CACHE_SAVE: jobId=${jobId}, key='${questionOrAnalysisType}', model='${modelUsed}', type='${cacheType}'`); // Debug\n        await cachedVideoQACollection.updateOne(filter, updateData, {\n            upsert: true\n        });\n    // console.log(\"CACHE_SAVE successful\"); // Debug\n    } catch (error) {\n        console.error(\"Error saving Q&A response to cache:\", error);\n    // Decide if this error should be propagated or just logged\n    // For async background saves, logging might be sufficient.\n    }\n}\n// Optional: Function to clear MongoDB client connection (e.g., for graceful shutdown)\nasync function closeDatabaseConnection() {\n    if (client) {\n        await client.close();\n        client = null;\n        db = null;\n        console.log(\"MongoDB connection closed.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFNQSxPQUFPcUUsS0FBSztRQUNsQnJFLFNBQVM7UUFDVEMsS0FBSztRQUNMTSxRQUFRQyxHQUFHLENBQUM7SUFDZDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2hhdHB5ZS8uL3NyYy9saWIvbW9uZ29kYi50cz81M2MyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbGxlY3Rpb24sIERiLCBNb25nb0NsaWVudCwgU2VydmVyQXBpVmVyc2lvbiwgT2JqZWN0SWQgfSBmcm9tICdtb25nb2RiJztcclxuXHJcbi8vIERlZmluZSBpbnRlcmZhY2VzIGZvciB5b3VyIGRhdGEgc3RydWN0dXJlc1xyXG5leHBvcnQgaW50ZXJmYWNlIFZpZGVvSm9iIHtcclxuICBfaWQ/OiBPYmplY3RJZDtcclxuICBqb2JJZDogc3RyaW5nO1xyXG4gIHlvdXR1YmVVcmw6IHN0cmluZztcclxuICBzdGF0dXM6ICdwZW5kaW5nJyB8ICdwcm9jZXNzaW5nJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCc7XHJcbiAgdHJhbnNjcmlwdFN0YXR1cz86ICdwcm9jZXNzaW5nJyB8ICdmb3VuZCcgfCAnbm90X2ZvdW5kJyB8ICdmYWlsZWQnIHwgJ2Vycm9yJztcclxuICBwcm9ncmVzcz86IHN0cmluZzsgLy8gT3B0aW9uYWwgcHJvZ3Jlc3MgbWVzc2FnZVxyXG4gIGNyZWF0ZWRBdD86IERhdGU7XHJcbiAgdXBkYXRlZEF0PzogRGF0ZTtcclxuICAvLyBZb3UgbWlnaHQgYWRkIG1vcmUgZmllbGRzIGxpa2UgdmlkZW9UaXRsZSwgZHVyYXRpb24sIGV0Yy5cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUcmFuc2NyaXB0Q2h1bmsge1xyXG4gIF9pZD86IE9iamVjdElkO1xyXG4gIGpvYklkOiBzdHJpbmc7XHJcbiAgY2h1bmtJZDogc3RyaW5nOyAvLyBlLmcuLCBqb2JJZC1jaHVua0luZGV4XHJcbiAgdGV4dENvbnRlbnQ6IHN0cmluZztcclxuICBzdGFydFRpbWVzdGFtcDogc3RyaW5nOyAvLyBTdG9yZSBhcyBzdHJpbmcsIGNvbnNpc3RlbnQgd2l0aCBjdXJyZW50IFJBRyB1c2VcclxuICBlbmRUaW1lc3RhbXA6IHN0cmluZzsgICAvLyBTdG9yZSBhcyBzdHJpbmdcclxuICBlbWJlZGRpbmc/OiBudW1iZXJbXTsgLy8gQXJyYXkgb2YgbnVtYmVycyBmb3IgdGhlIGVtYmVkZGluZ1xyXG4gIGNyZWF0ZWRBdD86IERhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ2FjaGVkUUFSZXNwb25zZSB7XHJcbiAgX2lkPzogT2JqZWN0SWQ7XHJcbiAgam9iSWQ6IHN0cmluZzsgLy8gUmVmZXJlbmNlcyB0aGUgVmlkZW9Kb2Iuam9iSWQgKGlkZW50aWZpZXMgdGhlIHZpZGVvKVxyXG4gIGNhY2hlVHlwZTogJ3VzZXJfcXVlc3Rpb24nIHwgJ3Byb2FjdGl2ZV9hbmFseXNpcyc7XHJcbiAgcXVlc3Rpb25UZXh0Tm9ybWFsaXplZD86IHN0cmluZzsgLy8gRm9yIHVzZXJfcXVlc3Rpb24gdHlwZVxyXG4gIGFuYWx5c2lzVHlwZT86IHN0cmluZzsgLy8gRm9yIHByb2FjdGl2ZV9hbmFseXNpcyB0eXBlIChlLmcuLCBcInByb2FjdGl2ZV9zdW1tYXJ5X3RvcGljc190YWtlYXdheXNcIilcclxuICByZXNwb25zZVRleHQ6IHN0cmluZztcclxuICBtb2RlbFVzZWQ6IHN0cmluZzsgLy8gZS5nLiwgXCJnZW1pbmktMS41LXByby1kaXJlY3QteW91dHViZVwiXHJcbiAgY3JlYXRlZEF0OiBEYXRlO1xyXG4gIHVwZGF0ZWRBdDogRGF0ZTsgLy8gVG8ga25vdyB3aGVuIGl0IHdhcyBsYXN0IHVwZGF0ZWQgKGZvciB1cHNlcnQpXHJcbiAgLy8gc291cmNlTGFuZ3VhZ2U/OiBzdHJpbmc7IC8vIEZ1dHVyZSB1c2VcclxuICAvLyBzdHJ1Y3R1cmVkUmVzcG9uc2VEYXRhPzogYW55OyAvLyBGdXR1cmUgdXNlIGZvciBzdHJ1Y3R1cmVkIHByb2FjdGl2ZSBhbmFseXNpc1xyXG59XHJcblxyXG5jb25zdCBNT05HT0RCX1VSSSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJO1xyXG5jb25zdCBNT05HT0RCX0RCX05BTUUgPSBwcm9jZXNzLmVudi5NT05HT0RCX0RCX05BTUUgfHwgJ2NoYXRweWVfZGInOyAvLyBEZWZhdWx0IERCIG5hbWVcclxuXHJcbmlmICghTU9OR09EQl9VUkkpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ1BsZWFzZSBkZWZpbmUgdGhlIE1PTkdPREJfVVJJIGVudmlyb25tZW50IHZhcmlhYmxlIGluIC5lbnYubG9jYWwnKTtcclxufVxyXG5cclxubGV0IGNsaWVudDogTW9uZ29DbGllbnQgfCBudWxsID0gbnVsbDtcclxubGV0IGRiOiBEYiB8IG51bGwgPSBudWxsO1xyXG5cclxuaW50ZXJmYWNlIENvbGxlY3Rpb25zIHtcclxuICB2aWRlb0pvYnNDb2xsZWN0aW9uPzogQ29sbGVjdGlvbjxWaWRlb0pvYj47XHJcbiAgdHJhbnNjcmlwdENodW5rc0NvbGxlY3Rpb24/OiBDb2xsZWN0aW9uPFRyYW5zY3JpcHRDaHVuaz47XHJcbiAgY2FjaGVkVmlkZW9RQUNvbGxlY3Rpb24/OiBDb2xsZWN0aW9uPENhY2hlZFFBUmVzcG9uc2U+O1xyXG59XHJcblxyXG5jb25zdCBjb2xsZWN0aW9uczogQ29sbGVjdGlvbnMgPSB7fTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3RUb0RhdGFiYXNlKCk6IFByb21pc2U8RGI+IHtcclxuICBpZiAoZGIgJiYgY2xpZW50KSB7XHJcbiAgICAvLyBUT0RPOiBWZXJpZnkgY2xpZW50IGNvbm5lY3Rpb24gc3RhdGUgaWYgcG9zc2libGUsIGUuZy4gY2xpZW50LmlzQ29ubmVjdGVkKClcclxuICAgIC8vIEZvciBzZXJ2ZXJsZXNzLCBjcmVhdGluZyBuZXcgY29ubmVjdGlvbnMgcGVyIHJlcXVlc3Qgb3Igc2hvcnQtbGl2ZWQgY29ubmVjdGlvbnMgbWlnaHQgYmUgb2theS5cclxuICAgIC8vIEZvciBsb25nLXJ1bm5pbmcgc2VydmVycywgbWFpbnRhaW5pbmcgYSBwZXJzaXN0ZW50IGNvbm5lY3Rpb24gaXMgYmV0dGVyLlxyXG4gICAgLy8gVGhpcyBzaW1wbGUgY2hlY2sgYXNzdW1lcyBjbGllbnQgcmVtYWlucyBjb25uZWN0ZWQuXHJcbiAgICByZXR1cm4gZGI7XHJcbiAgfVxyXG5cclxuICBpZiAoIU1PTkdPREJfVVJJKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01vbmdvREIgVVJJIGlzIG5vdCBkZWZpbmVkLicpO1xyXG4gIH1cclxuXHJcbiAgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KE1PTkdPREJfVVJJLCB7XHJcbiAgICBzZXJ2ZXJBcGk6IFNlcnZlckFwaVZlcnNpb24udjEsIC8vIE9yIHlvdXIgc3BlY2lmaWMgc2VydmVyIEFQSSB2ZXJzaW9uXHJcbiAgICAvLyBDb25zaWRlciBhZGRpbmcgY29ubmVjdGlvbiBwb29sIG9wdGlvbnMsIHRpbWVvdXRzLCBldGMuXHJcbiAgICAvLyB1c2VOZXdVcmxQYXJzZXI6IHRydWUsIC8vIERlcHJlY2F0ZWRcclxuICAgIC8vIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSwgLy8gRGVwcmVjYXRlZFxyXG4gIH0pO1xyXG5cclxuICB0cnkge1xyXG4gICAgYXdhaXQgY2xpZW50LmNvbm5lY3QoKTtcclxuICAgIGRiID0gY2xpZW50LmRiKE1PTkdPREJfREJfTkFNRSk7XHJcbiAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGNvbm5lY3RlZCB0byBNb25nb0RCLicpO1xyXG5cclxuICAgIC8vIEluaXRpYWxpemUgY29sbGVjdGlvbnNcclxuICAgIGNvbGxlY3Rpb25zLnZpZGVvSm9ic0NvbGxlY3Rpb24gPSBkYi5jb2xsZWN0aW9uPFZpZGVvSm9iPigndmlkZW9Kb2JzJyk7XHJcbiAgICBjb2xsZWN0aW9ucy50cmFuc2NyaXB0Q2h1bmtzQ29sbGVjdGlvbiA9IGRiLmNvbGxlY3Rpb248VHJhbnNjcmlwdENodW5rPigndHJhbnNjcmlwdENodW5rcycpO1xyXG4gICAgY29sbGVjdGlvbnMuY2FjaGVkVmlkZW9RQUNvbGxlY3Rpb24gPSBkYi5jb2xsZWN0aW9uPENhY2hlZFFBUmVzcG9uc2U+KCdjYWNoZWRWaWRlb1FBJyk7XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZSBJbmRleGVzIChpZGVtcG90ZW50IC0gb25seSBjcmVhdGVzIGlmIHRoZXkgZG9uJ3QgZXhpc3QpXHJcbiAgICBhd2FpdCBjb2xsZWN0aW9ucy52aWRlb0pvYnNDb2xsZWN0aW9uLmNyZWF0ZUluZGV4KHsgam9iSWQ6IDEgfSwgeyB1bmlxdWU6IHRydWUgfSk7XHJcbiAgICBhd2FpdCBjb2xsZWN0aW9ucy50cmFuc2NyaXB0Q2h1bmtzQ29sbGVjdGlvbi5jcmVhdGVJbmRleCh7IGpvYklkOiAxLCBjaHVua0lkOiAxIH0sIHsgdW5pcXVlOiB0cnVlIH0pO1xyXG4gICAgYXdhaXQgY29sbGVjdGlvbnMudHJhbnNjcmlwdENodW5rc0NvbGxlY3Rpb24uY3JlYXRlSW5kZXgoeyBqb2JJZDogMSB9KTsgLy8gRm9yIGZldGNoaW5nIGFsbCBjaHVua3MgZm9yIGEgam9iXHJcbiAgICAvLyBJbmRleCBmb3IgUSZBIGNhY2hlXHJcbiAgICBhd2FpdCBjb2xsZWN0aW9ucy5jYWNoZWRWaWRlb1FBQ29sbGVjdGlvbi5jcmVhdGVJbmRleChcclxuICAgICAgICB7IGpvYklkOiAxLCBxdWVzdGlvblRleHROb3JtYWxpemVkOiAxLCBtb2RlbFVzZWQ6IDEsIGNhY2hlVHlwZTogMSB9LFxyXG4gICAgICAgIHsgbmFtZTogXCJ1c2VyX3F1ZXN0aW9uX2NhY2hlX2lkeFwiIH1cclxuICAgICk7XHJcbiAgICBhd2FpdCBjb2xsZWN0aW9ucy5jYWNoZWRWaWRlb1FBQ29sbGVjdGlvbi5jcmVhdGVJbmRleChcclxuICAgICAgICB7IGpvYklkOiAxLCBhbmFseXNpc1R5cGU6IDEsIG1vZGVsVXNlZDogMSwgY2FjaGVUeXBlOiAxIH0sXHJcbiAgICAgICAgeyBuYW1lOiBcInByb2FjdGl2ZV9hbmFseXNpc19jYWNoZV9pZHhcIiB9XHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiBkYjtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNvbm5lY3QgdG8gTW9uZ29EQjonLCBlcnJvcik7XHJcbiAgICAvLyBJZiBjb25uZWN0aW9uIGZhaWxzLCBzdWJzZXF1ZW50IGNhbGxzIHRvIGdldERiIHdpbGwgYWxzbyBmYWlsIHVudGlsIHN1Y2Nlc3NmdWwuXHJcbiAgICAvLyBDb25zaWRlciBob3cgdG8gaGFuZGxlIHRoaXMgaW4geW91ciBhcHBsaWNhdGlvbiBsaWZlY3ljbGUuXHJcbiAgICAvLyBGb3Igbm93LCByZXRocm93IHRvIG1ha2UgaXQgY2xlYXIgY29ubmVjdGlvbiBmYWlsZWQuXHJcbiAgICB0aHJvdyBlcnJvcjsgXHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvcnQgYSBmdW5jdGlvbiB0byBnZXQgc3BlY2lmaWMgY29sbGVjdGlvbnMsIGVuc3VyaW5nIERCIGNvbm5lY3Rpb25cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbGxlY3Rpb25zKCk6IFByb21pc2U8Q29sbGVjdGlvbnM+IHtcclxuICBpZiAoIWRiIHx8ICFjbGllbnQpIHsgLy8gT3IgYWRkIG1vcmUgcm9idXN0IGNvbm5lY3Rpb24gY2hlY2tcclxuICAgIGF3YWl0IGNvbm5lY3RUb0RhdGFiYXNlKCk7XHJcbiAgfVxyXG4gIGlmICghY29sbGVjdGlvbnMudmlkZW9Kb2JzQ29sbGVjdGlvbiB8fCAhY29sbGVjdGlvbnMudHJhbnNjcmlwdENodW5rc0NvbGxlY3Rpb24gfHwgIWNvbGxlY3Rpb25zLmNhY2hlZFZpZGVvUUFDb2xsZWN0aW9uKSB7XHJcbiAgICAvLyBUaGlzIG1pZ2h0IGhhcHBlbiBpZiBjb25uZWN0VG9EYXRhYmFzZSB3YXMgY2FsbGVkIGJ1dCBjb2xsZWN0aW9ucyB3ZXJlbid0IHNldCAoc2hvdWxkbid0IG9jY3VyIHdpdGggY3VycmVudCBsb2dpYylcclxuICAgIC8vIE9yIGlmIGRiIGNvbm5lY3Rpb24gd2FzIGxvc3QgYW5kIHJlLWVzdGFibGlzaGVkIHdpdGhvdXQgcmUtc2V0dGluZyBjb2xsZWN0aW9ucyBvYmplY3QuXHJcbiAgICAvLyBGb3Igc2ltcGxpY2l0eSwgcmUtcnVuIGNvbm5lY3RUb0RhdGFiYXNlIHdoaWNoIGFsc28gc2V0cyBjb2xsZWN0aW9ucy5cclxuICAgIGF3YWl0IGNvbm5lY3RUb0RhdGFiYXNlKCk7XHJcbiAgfVxyXG4gIHJldHVybiBjb2xsZWN0aW9ucztcclxufVxyXG5cclxuLy8gLS0tIFZpZGVvIEpvYiBGdW5jdGlvbnMgLS0tXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVWaWRlb0pvYihqb2JEYXRhOiBPbWl0PFZpZGVvSm9iLCAnX2lkJyB8ICdjcmVhdGVkQXQnIHwgJ3VwZGF0ZWRBdCc+KTogUHJvbWlzZTxWaWRlb0pvYj4ge1xyXG4gIGNvbnN0IHsgdmlkZW9Kb2JzQ29sbGVjdGlvbiB9ID0gYXdhaXQgZ2V0Q29sbGVjdGlvbnMoKTtcclxuICBpZiAoIXZpZGVvSm9ic0NvbGxlY3Rpb24pIHRocm93IG5ldyBFcnJvcihcInZpZGVvSm9ic0NvbGxlY3Rpb24gbm90IGluaXRpYWxpemVkXCIpO1xyXG5cclxuICBjb25zdCBuZXdKb2I6IFZpZGVvSm9iID0ge1xyXG4gICAgLi4uam9iRGF0YSxcclxuICAgIHN0YXR1czogam9iRGF0YS5zdGF0dXMgfHwgJ3BlbmRpbmcnLFxyXG4gICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gIH07XHJcbiAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdmlkZW9Kb2JzQ29sbGVjdGlvbi5pbnNlcnRPbmUobmV3Sm9iKTtcclxuICBpZiAoIXJlc3VsdC5pbnNlcnRlZElkKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBjcmVhdGUgdmlkZW8gam9iLicpO1xyXG4gIH1cclxuICByZXR1cm4geyAuLi5uZXdKb2IsIF9pZDogcmVzdWx0Lmluc2VydGVkSWQgfTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFZpZGVvSm9iKGpvYklkOiBzdHJpbmcpOiBQcm9taXNlPFZpZGVvSm9iIHwgbnVsbD4ge1xyXG4gIGNvbnN0IHsgdmlkZW9Kb2JzQ29sbGVjdGlvbiB9ID0gYXdhaXQgZ2V0Q29sbGVjdGlvbnMoKTtcclxuICBpZiAoIXZpZGVvSm9ic0NvbGxlY3Rpb24pIHRocm93IG5ldyBFcnJvcihcInZpZGVvSm9ic0NvbGxlY3Rpb24gbm90IGluaXRpYWxpemVkXCIpO1xyXG4gIHJldHVybiB2aWRlb0pvYnNDb2xsZWN0aW9uLmZpbmRPbmUoeyBqb2JJZCB9KTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVZpZGVvSm9iKGpvYklkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8VmlkZW9Kb2I+KTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgY29uc3QgeyB2aWRlb0pvYnNDb2xsZWN0aW9uIH0gPSBhd2FpdCBnZXRDb2xsZWN0aW9ucygpO1xyXG4gIGlmICghdmlkZW9Kb2JzQ29sbGVjdGlvbikgdGhyb3cgbmV3IEVycm9yKFwidmlkZW9Kb2JzQ29sbGVjdGlvbiBub3QgaW5pdGlhbGl6ZWRcIik7XHJcblxyXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHZpZGVvSm9ic0NvbGxlY3Rpb24udXBkYXRlT25lKFxyXG4gICAgeyBqb2JJZCB9LFxyXG4gICAgeyAkc2V0OiB7IC4uLnVwZGF0ZXMsIHVwZGF0ZWRBdDogbmV3IERhdGUoKSB9IH1cclxuICApO1xyXG4gIHJldHVybiByZXN1bHQubW9kaWZpZWRDb3VudCA+IDA7XHJcbn1cclxuXHJcbi8vIC0tLSBUcmFuc2NyaXB0IENodW5rIEZ1bmN0aW9ucyAtLS1cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZVRyYW5zY3JpcHRDaHVua3MoY2h1bmtzRGF0YTogVHJhbnNjcmlwdENodW5rW10pOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCB7IHRyYW5zY3JpcHRDaHVua3NDb2xsZWN0aW9uIH0gPSBhd2FpdCBnZXRDb2xsZWN0aW9ucygpO1xyXG4gIGlmICghdHJhbnNjcmlwdENodW5rc0NvbGxlY3Rpb24pIHRocm93IG5ldyBFcnJvcihcInRyYW5zY3JpcHRDaHVua3NDb2xsZWN0aW9uIG5vdCBpbml0aWFsaXplZFwiKTtcclxuICBpZiAoY2h1bmtzRGF0YS5sZW5ndGggPT09IDApIHJldHVybjtcclxuXHJcbiAgY29uc3QgY2h1bmtzVG9JbnNlcnQgPSBjaHVua3NEYXRhLm1hcChjaHVuayA9PiAoe1xyXG4gICAgICAuLi5jaHVuayxcclxuICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpXHJcbiAgfSkpO1xyXG4gIGF3YWl0IHRyYW5zY3JpcHRDaHVua3NDb2xsZWN0aW9uLmluc2VydE1hbnkoY2h1bmtzVG9JbnNlcnQpO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VHJhbnNjcmlwdENodW5rcyhqb2JJZDogc3RyaW5nKTogUHJvbWlzZTxUcmFuc2NyaXB0Q2h1bmtbXT4ge1xyXG4gIGNvbnN0IHsgdHJhbnNjcmlwdENodW5rc0NvbGxlY3Rpb24gfSA9IGF3YWl0IGdldENvbGxlY3Rpb25zKCk7XHJcbiAgaWYgKCF0cmFuc2NyaXB0Q2h1bmtzQ29sbGVjdGlvbikgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNjcmlwdENodW5rc0NvbGxlY3Rpb24gbm90IGluaXRpYWxpemVkXCIpO1xyXG4gIHJldHVybiB0cmFuc2NyaXB0Q2h1bmtzQ29sbGVjdGlvbi5maW5kKHsgam9iSWQgfSkuc29ydCh7IHN0YXJ0VGltZXN0YW1wOiAxIH0pLnRvQXJyYXkoKTsgLy8gU29ydCBieSBzdGFydCB0aW1lXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB1cGRhdGVUcmFuc2NyaXB0Q2h1bmtFbWJlZGRpbmdzKGpvYklkOiBzdHJpbmcsIGNodW5rSWQ6IHN0cmluZywgZW1iZWRkaW5nOiBudW1iZXJbXSk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgY29uc3QgeyB0cmFuc2NyaXB0Q2h1bmtzQ29sbGVjdGlvbiB9ID0gYXdhaXQgZ2V0Q29sbGVjdGlvbnMoKTtcclxuICAgIGlmICghdHJhbnNjcmlwdENodW5rc0NvbGxlY3Rpb24pIHRocm93IG5ldyBFcnJvcihcInRyYW5zY3JpcHRDaHVua3NDb2xsZWN0aW9uIG5vdCBpbml0aWFsaXplZFwiKTtcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0cmFuc2NyaXB0Q2h1bmtzQ29sbGVjdGlvbi51cGRhdGVPbmUoXHJcbiAgICAgICAgeyBqb2JJZCwgY2h1bmtJZCB9LFxyXG4gICAgICAgIHsgJHNldDogeyBlbWJlZGRpbmcgfSB9XHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHJlc3VsdC5tb2RpZmllZENvdW50ID4gMDtcclxufVxyXG5cclxuLy8gLS0tIFEmQSBDYWNoZSBGdW5jdGlvbnMgLS0tXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDYWNoZWRRQVJlc3BvbnNlKFxyXG4gIGpvYklkOiBzdHJpbmcsIFxyXG4gIG5vcm1hbGl6ZWRRdWVzdGlvblRleHQ6IHN0cmluZywgXHJcbiAgbW9kZWxVc2VkOiBzdHJpbmdcclxuKTogUHJvbWlzZTxDYWNoZWRRQVJlc3BvbnNlIHwgbnVsbD4ge1xyXG4gIGNvbnN0IHsgY2FjaGVkVmlkZW9RQUNvbGxlY3Rpb24gfSA9IGF3YWl0IGdldENvbGxlY3Rpb25zKCk7XHJcbiAgaWYgKCFjYWNoZWRWaWRlb1FBQ29sbGVjdGlvbikgdGhyb3cgbmV3IEVycm9yKFwiY2FjaGVkVmlkZW9RQUNvbGxlY3Rpb24gbm90IGluaXRpYWxpemVkXCIpO1xyXG4gIFxyXG4gIC8vIGNvbnNvbGUubG9nKGBDQUNIRV9MT09LVVA6IGpvYklkPSR7am9iSWR9LCBxdWVzdGlvbj0nJHtub3JtYWxpemVkUXVlc3Rpb25UZXh0fScsIG1vZGVsPScke21vZGVsVXNlZH0nYCk7IC8vIERlYnVnXHJcbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjYWNoZWRWaWRlb1FBQ29sbGVjdGlvbi5maW5kT25lKHtcclxuICAgIGpvYklkLFxyXG4gICAgcXVlc3Rpb25UZXh0Tm9ybWFsaXplZDogbm9ybWFsaXplZFF1ZXN0aW9uVGV4dCwgLy8gRW5zdXJlIHRoaXMgbWF0Y2hlcyB0aGUgZmllbGQgbmFtZSB1c2VkIGluIHNhdmVRQVJlc3BvbnNlXHJcbiAgICBtb2RlbFVzZWQsXHJcbiAgICBjYWNoZVR5cGU6ICd1c2VyX3F1ZXN0aW9uJ1xyXG4gIH0pO1xyXG4gIC8vIGlmIChyZXNwb25zZSkgY29uc29sZS5sb2coXCJDQUNIRV9ISVRcIik7IGVsc2UgY29uc29sZS5sb2coXCJDQUNIRV9NSVNTXCIpOyAvLyBEZWJ1Z1xyXG4gIHJldHVybiByZXNwb25zZTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENhY2hlZFByb2FjdGl2ZUFuYWx5c2lzKFxyXG4gIGpvYklkOiBzdHJpbmcsXHJcbiAgYW5hbHlzaXNUeXBlOiBzdHJpbmcsXHJcbiAgbW9kZWxVc2VkOiBzdHJpbmdcclxuKTogUHJvbWlzZTxDYWNoZWRRQVJlc3BvbnNlIHwgbnVsbD4ge1xyXG4gIGNvbnN0IHsgY2FjaGVkVmlkZW9RQUNvbGxlY3Rpb24gfSA9IGF3YWl0IGdldENvbGxlY3Rpb25zKCk7XHJcbiAgaWYgKCFjYWNoZWRWaWRlb1FBQ29sbGVjdGlvbikgdGhyb3cgbmV3IEVycm9yKFwiY2FjaGVkVmlkZW9RQUNvbGxlY3Rpb24gbm90IGluaXRpYWxpemVkXCIpO1xyXG4gIHJldHVybiBjYWNoZWRWaWRlb1FBQ29sbGVjdGlvbi5maW5kT25lKHtcclxuICAgIGpvYklkLFxyXG4gICAgYW5hbHlzaXNUeXBlLFxyXG4gICAgbW9kZWxVc2VkLFxyXG4gICAgY2FjaGVUeXBlOiAncHJvYWN0aXZlX2FuYWx5c2lzJ1xyXG4gIH0pO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZVFBUmVzcG9uc2UoXHJcbiAgam9iSWQ6IHN0cmluZywgXHJcbiAgcXVlc3Rpb25PckFuYWx5c2lzVHlwZTogc3RyaW5nLCAvLyBGb3IgdXNlcl9xdWVzdGlvbiwgdGhpcyBpcyBub3JtYWxpemVkUXVlc3Rpb25UZXh0OyBmb3IgcHJvYWN0aXZlLCBpdCdzIGFuYWx5c2lzVHlwZVxyXG4gIG1vZGVsVXNlZDogc3RyaW5nLCBcclxuICByZXNwb25zZVRleHQ6IHN0cmluZyxcclxuICBjYWNoZVR5cGU6ICd1c2VyX3F1ZXN0aW9uJyB8ICdwcm9hY3RpdmVfYW5hbHlzaXMnID0gJ3VzZXJfcXVlc3Rpb24nIC8vIERlZmF1bHQgdG8gdXNlcl9xdWVzdGlvblxyXG4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICBjb25zdCB7IGNhY2hlZFZpZGVvUUFDb2xsZWN0aW9uIH0gPSBhd2FpdCBnZXRDb2xsZWN0aW9ucygpO1xyXG4gIGlmICghY2FjaGVkVmlkZW9RQUNvbGxlY3Rpb24pIHRocm93IG5ldyBFcnJvcihcImNhY2hlZFZpZGVvUUFDb2xsZWN0aW9uIG5vdCBpbml0aWFsaXplZFwiKTtcclxuXHJcbiAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcclxuICBsZXQgZmlsdGVyOiBhbnk7XHJcbiAgbGV0IHVwZGF0ZURhdGE6IGFueTtcclxuXHJcbiAgaWYgKGNhY2hlVHlwZSA9PT0gJ3VzZXJfcXVlc3Rpb24nKSB7XHJcbiAgICBmaWx0ZXIgPSB7IGpvYklkLCBxdWVzdGlvblRleHROb3JtYWxpemVkOiBxdWVzdGlvbk9yQW5hbHlzaXNUeXBlLCBtb2RlbFVzZWQsIGNhY2hlVHlwZSB9O1xyXG4gICAgdXBkYXRlRGF0YSA9IHtcclxuICAgICAgJHNldDogeyByZXNwb25zZVRleHQsIHVwZGF0ZWRBdDogbm93IH0sXHJcbiAgICAgICRzZXRPbkluc2VydDogeyBqb2JJZCwgcXVlc3Rpb25UZXh0Tm9ybWFsaXplZDogcXVlc3Rpb25PckFuYWx5c2lzVHlwZSwgbW9kZWxVc2VkLCBjYWNoZVR5cGUsIGNyZWF0ZWRBdDogbm93IH1cclxuICAgIH07XHJcbiAgfSBlbHNlIHsgLy8gcHJvYWN0aXZlX2FuYWx5c2lzXHJcbiAgICBmaWx0ZXIgPSB7IGpvYklkLCBhbmFseXNpc1R5cGU6IHF1ZXN0aW9uT3JBbmFseXNpc1R5cGUsIG1vZGVsVXNlZCwgY2FjaGVUeXBlIH07XHJcbiAgICB1cGRhdGVEYXRhID0ge1xyXG4gICAgICAkc2V0OiB7IHJlc3BvbnNlVGV4dCwgdXBkYXRlZEF0OiBub3cgfSxcclxuICAgICAgJHNldE9uSW5zZXJ0OiB7IGpvYklkLCBhbmFseXNpc1R5cGU6IHF1ZXN0aW9uT3JBbmFseXNpc1R5cGUsIG1vZGVsVXNlZCwgY2FjaGVUeXBlLCBjcmVhdGVkQXQ6IG5vdyB9XHJcbiAgICB9O1xyXG4gIH1cclxuICBcclxuICB0cnkge1xyXG4gICAgLy8gY29uc29sZS5sb2coYENBQ0hFX1NBVkU6IGpvYklkPSR7am9iSWR9LCBrZXk9JyR7cXVlc3Rpb25PckFuYWx5c2lzVHlwZX0nLCBtb2RlbD0nJHttb2RlbFVzZWR9JywgdHlwZT0nJHtjYWNoZVR5cGV9J2ApOyAvLyBEZWJ1Z1xyXG4gICAgYXdhaXQgY2FjaGVkVmlkZW9RQUNvbGxlY3Rpb24udXBkYXRlT25lKGZpbHRlciwgdXBkYXRlRGF0YSwgeyB1cHNlcnQ6IHRydWUgfSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIkNBQ0hFX1NBVkUgc3VjY2Vzc2Z1bFwiKTsgLy8gRGVidWdcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBRJkEgcmVzcG9uc2UgdG8gY2FjaGU6XCIsIGVycm9yKTtcclxuICAgIC8vIERlY2lkZSBpZiB0aGlzIGVycm9yIHNob3VsZCBiZSBwcm9wYWdhdGVkIG9yIGp1c3QgbG9nZ2VkXHJcbiAgICAvLyBGb3IgYXN5bmMgYmFja2dyb3VuZCBzYXZlcywgbG9nZ2luZyBtaWdodCBiZSBzdWZmaWNpZW50LlxyXG4gIH1cclxufVxyXG5cclxuLy8gT3B0aW9uYWw6IEZ1bmN0aW9uIHRvIGNsZWFyIE1vbmdvREIgY2xpZW50IGNvbm5lY3Rpb24gKGUuZy4sIGZvciBncmFjZWZ1bCBzaHV0ZG93bilcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3NlRGF0YWJhc2VDb25uZWN0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gIGlmIChjbGllbnQpIHtcclxuICAgIGF3YWl0IGNsaWVudC5jbG9zZSgpO1xyXG4gICAgY2xpZW50ID0gbnVsbDtcclxuICAgIGRiID0gbnVsbDtcclxuICAgIGNvbnNvbGUubG9nKCdNb25nb0RCIGNvbm5lY3Rpb24gY2xvc2VkLicpO1xyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiTW9uZ29DbGllbnQiLCJTZXJ2ZXJBcGlWZXJzaW9uIiwiTU9OR09EQl9VUkkiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9EQl9OQU1FIiwiRXJyb3IiLCJjbGllbnQiLCJkYiIsImNvbGxlY3Rpb25zIiwiY29ubmVjdFRvRGF0YWJhc2UiLCJzZXJ2ZXJBcGkiLCJ2MSIsImNvbm5lY3QiLCJjb25zb2xlIiwibG9nIiwidmlkZW9Kb2JzQ29sbGVjdGlvbiIsImNvbGxlY3Rpb24iLCJ0cmFuc2NyaXB0Q2h1bmtzQ29sbGVjdGlvbiIsImNhY2hlZFZpZGVvUUFDb2xsZWN0aW9uIiwiY3JlYXRlSW5kZXgiLCJqb2JJZCIsInVuaXF1ZSIsImNodW5rSWQiLCJxdWVzdGlvblRleHROb3JtYWxpemVkIiwibW9kZWxVc2VkIiwiY2FjaGVUeXBlIiwibmFtZSIsImFuYWx5c2lzVHlwZSIsImVycm9yIiwiZ2V0Q29sbGVjdGlvbnMiLCJjcmVhdGVWaWRlb0pvYiIsImpvYkRhdGEiLCJuZXdKb2IiLCJzdGF0dXMiLCJjcmVhdGVkQXQiLCJEYXRlIiwidXBkYXRlZEF0IiwicmVzdWx0IiwiaW5zZXJ0T25lIiwiaW5zZXJ0ZWRJZCIsIl9pZCIsImdldFZpZGVvSm9iIiwiZmluZE9uZSIsInVwZGF0ZVZpZGVvSm9iIiwidXBkYXRlcyIsInVwZGF0ZU9uZSIsIiRzZXQiLCJtb2RpZmllZENvdW50IiwiY3JlYXRlVHJhbnNjcmlwdENodW5rcyIsImNodW5rc0RhdGEiLCJsZW5ndGgiLCJjaHVua3NUb0luc2VydCIsIm1hcCIsImNodW5rIiwiaW5zZXJ0TWFueSIsImdldFRyYW5zY3JpcHRDaHVua3MiLCJmaW5kIiwic29ydCIsInN0YXJ0VGltZXN0YW1wIiwidG9BcnJheSIsInVwZGF0ZVRyYW5zY3JpcHRDaHVua0VtYmVkZGluZ3MiLCJlbWJlZGRpbmciLCJnZXRDYWNoZWRRQVJlc3BvbnNlIiwibm9ybWFsaXplZFF1ZXN0aW9uVGV4dCIsInJlc3BvbnNlIiwiZ2V0Q2FjaGVkUHJvYWN0aXZlQW5hbHlzaXMiLCJzYXZlUUFSZXNwb25zZSIsInF1ZXN0aW9uT3JBbmFseXNpc1R5cGUiLCJyZXNwb25zZVRleHQiLCJub3ciLCJmaWx0ZXIiLCJ1cGRhdGVEYXRhIiwiJHNldE9uSW5zZXJ0IiwidXBzZXJ0IiwiY2xvc2VEYXRhYmFzZUNvbm5lY3Rpb24iLCJjbG9zZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mongodb.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/youtube.ts":
/*!****************************!*\
  !*** ./src/lib/youtube.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extractVideoId: () => (/* binding */ extractVideoId),\n/* harmony export */   getVideoDetails: () => (/* binding */ getVideoDetails),\n/* harmony export */   getYouTubeTranscript: () => (/* binding */ getYouTubeTranscript),\n/* harmony export */   isValidYouTubeUrl: () => (/* binding */ isValidYouTubeUrl)\n/* harmony export */ });\n/* harmony import */ var youtube_transcript__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! youtube-transcript */ \"(rsc)/./node_modules/youtube-transcript/dist/youtube-transcript.esm.js\");\n\nfunction isValidYouTubeUrl(url) {\n    const patterns = [\n        /^(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com\\/watch\\?v=)([a-zA-Z0-9_-]{11})(?:&[^&\\n]*)?$/,\n        /^(?:https?:\\/\\/)?(?:www\\.)?(?:youtu\\.be\\/)([a-zA-Z0-9_-]{11})(?:\\?[^&\\n]*)?$/,\n        /^(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/embed\\/([a-zA-Z0-9_-]{11})/,\n        /^(?:https?:\\/\\/)?(?:www\\.)?youtube\\.com\\/v\\/([a-zA-Z0-9_-]{11})/\n    ];\n    return patterns.some((pattern)=>pattern.test(url));\n}\nfunction extractVideoId(url) {\n    const patterns = [\n        /(?:youtube\\.com\\/watch\\?v=)([^&\\n?#]+)/,\n        /(?:youtu\\.be\\/)([^&\\n?#]+)/,\n        /youtube\\.com\\/embed\\/([^&\\n?#]+)/,\n        /youtube\\.com\\/v\\/([^&\\n?#]+)/\n    ];\n    for (const pattern of patterns){\n        const match = url.match(pattern);\n        if (match && match[1]) {\n            return match[1];\n        }\n    }\n    return null;\n}\nasync function getVideoDetails(videoId) {\n    try {\n        const response = await fetch(`https://www.googleapis.com/youtube/v3/videos?part=snippet&id=${videoId}&key=${process.env.YOUTUBE_API_KEY}`);\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch video details\");\n        }\n        const data = await response.json();\n        if (!data.items?.[0]) {\n            throw new Error(\"Video not found\");\n        }\n        const video = data.items[0];\n        return {\n            title: video.snippet?.title,\n            description: video.snippet?.description,\n            channelTitle: video.snippet?.channelTitle,\n            publishedAt: video.snippet?.publishedAt\n        };\n    } catch (error) {\n        console.error(\"Error fetching video details:\", error);\n        throw error;\n    }\n}\nasync function getYouTubeTranscript(videoUrl) {\n    try {\n        // Extract video ID from URL\n        const videoId = extractVideoId(videoUrl);\n        if (!videoId) {\n            throw new Error(\"Invalid YouTube URL\");\n        }\n        // Fetch transcript\n        const transcript = await youtube_transcript__WEBPACK_IMPORTED_MODULE_0__.YoutubeTranscript.fetchTranscript(videoId);\n        // Transform to our format\n        return transcript.map((segment)=>({\n                text: segment.text,\n                start: segment.offset,\n                duration: segment.duration\n            }));\n    } catch (error) {\n        console.error(\"Error fetching YouTube transcript:\", error);\n        return null;\n    }\n}\nfunction formatTimestamp(seconds) {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor(seconds % 3600 / 60);\n    const remainingSeconds = Math.floor(seconds % 60);\n    return [\n        hours.toString().padStart(2, \"0\"),\n        minutes.toString().padStart(2, \"0\"),\n        remainingSeconds.toString().padStart(2, \"0\")\n    ].join(\":\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL3lvdXR1YmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBdUQ7QUFFaEQsU0FBU0Msa0JBQWtCQyxHQUFXO0lBQzNDLE1BQU1DLFdBQVc7UUFDZjtRQUNBO1FBQ0E7UUFDQTtLQUNEO0lBQ0QsT0FBT0EsU0FBU0MsSUFBSSxDQUFDQyxDQUFBQSxVQUFXQSxRQUFRQyxJQUFJLENBQUNKO0FBQy9DO0FBRU8sU0FBU0ssZUFBZUwsR0FBVztJQUN4QyxNQUFNQyxXQUFXO1FBQ2Y7UUFDQTtRQUNBO1FBQ0E7S0FDRDtJQUVELEtBQUssTUFBTUUsV0FBV0YsU0FBVTtRQUM5QixNQUFNSyxRQUFRTixJQUFJTSxLQUFLLENBQUNIO1FBQ3hCLElBQUlHLFNBQVNBLEtBQUssQ0FBQyxFQUFFLEVBQUU7WUFDckIsT0FBT0EsS0FBSyxDQUFDLEVBQUU7UUFDakI7SUFDRjtJQUVBLE9BQU87QUFDVDtBQUVPLGVBQWVDLGdCQUFnQkMsT0FBZTtJQUNuRCxJQUFJO1FBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUNyQixDQUFDLDZEQUE2RCxFQUFFRixRQUFRLEtBQUssRUFBRUcsUUFBUUMsR0FBRyxDQUFDQyxlQUFlLENBQUMsQ0FBQztRQUc5RyxJQUFJLENBQUNKLFNBQVNLLEVBQUUsRUFBRTtZQUNoQixNQUFNLElBQUlDLE1BQU07UUFDbEI7UUFFQSxNQUFNQyxPQUFPLE1BQU1QLFNBQVNRLElBQUk7UUFFaEMsSUFBSSxDQUFDRCxLQUFLRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDcEIsTUFBTSxJQUFJSCxNQUFNO1FBQ2xCO1FBRUEsTUFBTUksUUFBUUgsS0FBS0UsS0FBSyxDQUFDLEVBQUU7UUFDM0IsT0FBTztZQUNMRSxPQUFPRCxNQUFNRSxPQUFPLEVBQUVEO1lBQ3RCRSxhQUFhSCxNQUFNRSxPQUFPLEVBQUVDO1lBQzVCQyxjQUFjSixNQUFNRSxPQUFPLEVBQUVFO1lBQzdCQyxhQUFhTCxNQUFNRSxPQUFPLEVBQUVHO1FBQzlCO0lBQ0YsRUFBRSxPQUFPQyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxpQ0FBaUNBO1FBQy9DLE1BQU1BO0lBQ1I7QUFDRjtBQVFPLGVBQWVFLHFCQUFxQkMsUUFBZ0I7SUFDekQsSUFBSTtRQUNGLDRCQUE0QjtRQUM1QixNQUFNcEIsVUFBVUgsZUFBZXVCO1FBQy9CLElBQUksQ0FBQ3BCLFNBQVM7WUFDWixNQUFNLElBQUlPLE1BQU07UUFDbEI7UUFFQSxtQkFBbUI7UUFDbkIsTUFBTWMsYUFBYSxNQUFNL0IsaUVBQWlCQSxDQUFDZ0MsZUFBZSxDQUFDdEI7UUFFM0QsMEJBQTBCO1FBQzFCLE9BQU9xQixXQUFXRSxHQUFHLENBQUNDLENBQUFBLFVBQVk7Z0JBQ2hDQyxNQUFNRCxRQUFRQyxJQUFJO2dCQUNsQkMsT0FBT0YsUUFBUUcsTUFBTTtnQkFDckJDLFVBQVVKLFFBQVFJLFFBQVE7WUFDNUI7SUFDRixFQUFFLE9BQU9YLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLHNDQUFzQ0E7UUFDcEQsT0FBTztJQUNUO0FBQ0Y7QUFFQSxTQUFTWSxnQkFBZ0JDLE9BQWU7SUFDdEMsTUFBTUMsUUFBUUMsS0FBS0MsS0FBSyxDQUFDSCxVQUFVO0lBQ25DLE1BQU1JLFVBQVVGLEtBQUtDLEtBQUssQ0FBQyxVQUFXLE9BQVE7SUFDOUMsTUFBTUUsbUJBQW1CSCxLQUFLQyxLQUFLLENBQUNILFVBQVU7SUFFOUMsT0FBTztRQUNMQyxNQUFNSyxRQUFRLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO1FBQzdCSCxRQUFRRSxRQUFRLEdBQUdDLFFBQVEsQ0FBQyxHQUFHO1FBQy9CRixpQkFBaUJDLFFBQVEsR0FBR0MsUUFBUSxDQUFDLEdBQUc7S0FDekMsQ0FBQ0MsSUFBSSxDQUFDO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0cHllLy4vc3JjL2xpYi95b3V0dWJlLnRzP2Y2OGQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWW91dHViZVRyYW5zY3JpcHQgfSBmcm9tICd5b3V0dWJlLXRyYW5zY3JpcHQnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRZb3VUdWJlVXJsKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgY29uc3QgcGF0dGVybnMgPSBbXHJcbiAgICAvXig/Omh0dHBzPzpcXC9cXC8pPyg/Ond3d1xcLik/KD86eW91dHViZVxcLmNvbVxcL3dhdGNoXFw/dj0pKFthLXpBLVowLTlfLV17MTF9KSg/OiZbXiZcXG5dKik/JC8sXHJcbiAgICAvXig/Omh0dHBzPzpcXC9cXC8pPyg/Ond3d1xcLik/KD86eW91dHVcXC5iZVxcLykoW2EtekEtWjAtOV8tXXsxMX0pKD86XFw/W14mXFxuXSopPyQvLFxyXG4gICAgL14oPzpodHRwcz86XFwvXFwvKT8oPzp3d3dcXC4pP3lvdXR1YmVcXC5jb21cXC9lbWJlZFxcLyhbYS16QS1aMC05Xy1dezExfSkvLFxyXG4gICAgL14oPzpodHRwcz86XFwvXFwvKT8oPzp3d3dcXC4pP3lvdXR1YmVcXC5jb21cXC92XFwvKFthLXpBLVowLTlfLV17MTF9KS9cclxuICBdXHJcbiAgcmV0dXJuIHBhdHRlcm5zLnNvbWUocGF0dGVybiA9PiBwYXR0ZXJuLnRlc3QodXJsKSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RWaWRlb0lkKHVybDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgY29uc3QgcGF0dGVybnMgPSBbXHJcbiAgICAvKD86eW91dHViZVxcLmNvbVxcL3dhdGNoXFw/dj0pKFteJlxcbj8jXSspLyxcclxuICAgIC8oPzp5b3V0dVxcLmJlXFwvKShbXiZcXG4/I10rKS8sXHJcbiAgICAveW91dHViZVxcLmNvbVxcL2VtYmVkXFwvKFteJlxcbj8jXSspLyxcclxuICAgIC95b3V0dWJlXFwuY29tXFwvdlxcLyhbXiZcXG4/I10rKS9cclxuICBdXHJcbiAgXHJcbiAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIHBhdHRlcm5zKSB7XHJcbiAgICBjb25zdCBtYXRjaCA9IHVybC5tYXRjaChwYXR0ZXJuKVxyXG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XHJcbiAgICAgIHJldHVybiBtYXRjaFsxXVxyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICByZXR1cm4gbnVsbFxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0VmlkZW9EZXRhaWxzKHZpZGVvSWQ6IHN0cmluZykge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxyXG4gICAgICBgaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20veW91dHViZS92My92aWRlb3M/cGFydD1zbmlwcGV0JmlkPSR7dmlkZW9JZH0ma2V5PSR7cHJvY2Vzcy5lbnYuWU9VVFVCRV9BUElfS0VZfWBcclxuICAgIClcclxuXHJcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCB2aWRlbyBkZXRhaWxzXCIpXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxyXG5cclxuICAgIGlmICghZGF0YS5pdGVtcz8uWzBdKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlZpZGVvIG5vdCBmb3VuZFwiKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZpZGVvID0gZGF0YS5pdGVtc1swXVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdGl0bGU6IHZpZGVvLnNuaXBwZXQ/LnRpdGxlLFxyXG4gICAgICBkZXNjcmlwdGlvbjogdmlkZW8uc25pcHBldD8uZGVzY3JpcHRpb24sXHJcbiAgICAgIGNoYW5uZWxUaXRsZTogdmlkZW8uc25pcHBldD8uY2hhbm5lbFRpdGxlLFxyXG4gICAgICBwdWJsaXNoZWRBdDogdmlkZW8uc25pcHBldD8ucHVibGlzaGVkQXQsXHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyB2aWRlbyBkZXRhaWxzOlwiLCBlcnJvcilcclxuICAgIHRocm93IGVycm9yXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY3JpcHRTZWdtZW50IHtcclxuICB0ZXh0OiBzdHJpbmc7XHJcbiAgc3RhcnQ6IG51bWJlcjtcclxuICBkdXJhdGlvbjogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0WW91VHViZVRyYW5zY3JpcHQodmlkZW9Vcmw6IHN0cmluZyk6IFByb21pc2U8VHJhbnNjcmlwdFNlZ21lbnRbXSB8IG51bGw+IHtcclxuICB0cnkge1xyXG4gICAgLy8gRXh0cmFjdCB2aWRlbyBJRCBmcm9tIFVSTFxyXG4gICAgY29uc3QgdmlkZW9JZCA9IGV4dHJhY3RWaWRlb0lkKHZpZGVvVXJsKTtcclxuICAgIGlmICghdmlkZW9JZCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgWW91VHViZSBVUkwnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGZXRjaCB0cmFuc2NyaXB0XHJcbiAgICBjb25zdCB0cmFuc2NyaXB0ID0gYXdhaXQgWW91dHViZVRyYW5zY3JpcHQuZmV0Y2hUcmFuc2NyaXB0KHZpZGVvSWQpO1xyXG4gICAgXHJcbiAgICAvLyBUcmFuc2Zvcm0gdG8gb3VyIGZvcm1hdFxyXG4gICAgcmV0dXJuIHRyYW5zY3JpcHQubWFwKHNlZ21lbnQgPT4gKHtcclxuICAgICAgdGV4dDogc2VnbWVudC50ZXh0LFxyXG4gICAgICBzdGFydDogc2VnbWVudC5vZmZzZXQsXHJcbiAgICAgIGR1cmF0aW9uOiBzZWdtZW50LmR1cmF0aW9uXHJcbiAgICB9KSk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGZldGNoaW5nIFlvdVR1YmUgdHJhbnNjcmlwdDonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZvcm1hdFRpbWVzdGFtcChzZWNvbmRzOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gIGNvbnN0IGhvdXJzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCk7XHJcbiAgY29uc3QgbWludXRlcyA9IE1hdGguZmxvb3IoKHNlY29uZHMgJSAzNjAwKSAvIDYwKTtcclxuICBjb25zdCByZW1haW5pbmdTZWNvbmRzID0gTWF0aC5mbG9vcihzZWNvbmRzICUgNjApO1xyXG5cclxuICByZXR1cm4gW1xyXG4gICAgaG91cnMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAnMCcpLFxyXG4gICAgbWludXRlcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsICcwJyksXHJcbiAgICByZW1haW5pbmdTZWNvbmRzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgJzAnKVxyXG4gIF0uam9pbignOicpO1xyXG59ICJdLCJuYW1lcyI6WyJZb3V0dWJlVHJhbnNjcmlwdCIsImlzVmFsaWRZb3VUdWJlVXJsIiwidXJsIiwicGF0dGVybnMiLCJzb21lIiwicGF0dGVybiIsInRlc3QiLCJleHRyYWN0VmlkZW9JZCIsIm1hdGNoIiwiZ2V0VmlkZW9EZXRhaWxzIiwidmlkZW9JZCIsInJlc3BvbnNlIiwiZmV0Y2giLCJwcm9jZXNzIiwiZW52IiwiWU9VVFVCRV9BUElfS0VZIiwib2siLCJFcnJvciIsImRhdGEiLCJqc29uIiwiaXRlbXMiLCJ2aWRlbyIsInRpdGxlIiwic25pcHBldCIsImRlc2NyaXB0aW9uIiwiY2hhbm5lbFRpdGxlIiwicHVibGlzaGVkQXQiLCJlcnJvciIsImNvbnNvbGUiLCJnZXRZb3VUdWJlVHJhbnNjcmlwdCIsInZpZGVvVXJsIiwidHJhbnNjcmlwdCIsImZldGNoVHJhbnNjcmlwdCIsIm1hcCIsInNlZ21lbnQiLCJ0ZXh0Iiwic3RhcnQiLCJvZmZzZXQiLCJkdXJhdGlvbiIsImZvcm1hdFRpbWVzdGFtcCIsInNlY29uZHMiLCJob3VycyIsIk1hdGgiLCJmbG9vciIsIm1pbnV0ZXMiLCJyZW1haW5pbmdTZWNvbmRzIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/youtube.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/youtube-transcript","vendor-chunks/uuid","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fvideo%2Fprocess%2Froute&page=%2Fapi%2Fvideo%2Fprocess%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fvideo%2Fprocess%2Froute.ts&appDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CDeborah%5CDocuments%5CCursor%20Projects%5Cchatpye&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();