{
  "version": 3,
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/contexts/chat-context.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport React, { createContext, useContext, useState, ReactNode } from \"react\"\r\n\r\ninterface Message {\r\n  id: string\r\n  content: string\r\n  isUser: boolean\r\n  timestamp: string\r\n}\r\n\r\ninterface ChatContextType {\r\n  selectedModel: {\r\n    id: string\r\n    name: string\r\n    description: string\r\n  }\r\n  setSelectedModel: (model: { id: string; name: string; description: string }) => void\r\n  messages: Message[]\r\n  setMessages: React.Dispatch<React.SetStateAction<Message[]>>\r\n  inputValue: string\r\n  setInputValue: (value: string) => void\r\n  isProcessing: boolean\r\n  setIsProcessing: (value: boolean) => void\r\n  processingStatus: string\r\n  setProcessingStatus: (value: string) => void\r\n}\r\n\r\nconst defaultModel = {\r\n  id: \"gemini\",\r\n  name: \"Gemini\",\r\n  description: \"Google's latest AI model\"\r\n}\r\n\r\nconst ChatContext = createContext<ChatContextType | undefined>(undefined)\r\n\r\nexport function ChatProvider({ children }: { children: ReactNode }) {\r\n  const [selectedModel, setSelectedModel] = useState(defaultModel)\r\n  const [messages, setMessages] = useState<Message[]>([])\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n  const [isProcessing, setIsProcessing] = useState(false)\r\n  const [processingStatus, setProcessingStatus] = useState(\"\")\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedModel,\r\n        setSelectedModel,\r\n        messages,\r\n        setMessages,\r\n        inputValue,\r\n        setInputValue,\r\n        isProcessing,\r\n        setIsProcessing,\r\n        processingStatus,\r\n        setProcessingStatus,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useChat() {\r\n  const context = useContext(ChatContext)\r\n  if (context === undefined) {\r\n    throw new Error(\"useChat must be used within a ChatProvider\")\r\n  }\r\n  return context\r\n} "],"names":[],"mappings":";;;;;;;;;AAAA;;AA4BA,MAAM,eAAe;IACnB,IAAI;IACJ,MAAM;IACN,aAAa;AACf;AAEA,MAAM,4BAAc,+KAA2C;AAExD,SAAS,aAAa,EAAE,QAAQ,EAA2B;;IAChE,MAAM,CAAC,eAAe,iBAAiB,GAAG,0KAAS;IACnD,MAAM,CAAC,UAAU,YAAY,GAAG,0KAAoB,EAAE;IACtD,MAAM,CAAC,YAAY,cAAc,GAAG,0KAAS;IAC7C,MAAM,CAAC,cAAc,gBAAgB,GAAG,0KAAS;IACjD,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,0KAAS;IAEzD,qBACE,wLAAC,YAAY,QAAQ;QACnB,OAAO;YACL;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;YACA;QACF;kBAEC;;;;;;AAGP;GAzBgB;KAAA;AA2BT,SAAS;;IACd,MAAM,UAAU,4KAAW;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB"}},
    {"offset": {"line": 62, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}